/*
 * Copyright 2011 eBay Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Tokenize strings for '{' and '}'
// Also supports nested tokens such as '{foo{bar{baz}barr}}'
{
    function typeOf(value) {
        var s = typeof value;
        if(s === 'object') {
            if(value) {
                if(typeof value.length === 'number' &&
                    !(value.propertyIsEnumerable('length')) &&
                    typeof value.splice === 'function') {
                    s = 'array';
                }
            }
            else {
                s = 'null';
            }
        }
        return s;
    }
    function select(path, obj) {
        var splits = !path ? [] : path.split('.');
        var curr = obj, ctype;
        for(var i = 0; i < splits.length; i++) {
            if(curr[splits[i]]) {
                curr = curr[splits[i]];
            }
            else {
                return null;
            }
        }
        var ctype = typeOf(curr);
        if(ctype === 'array' || ctype === 'object') curr = undefined;
        return curr;
    }
    function stringify(v) {
      var str  = '';
      var type = typeOf(v);
      if(type === 'array') {
          for(var i = 0; i < v.length; i++) {
              str = str + stringify(v[i]);
          }
      }
      else if(type === 'object' && v.variable) {
          str = str + '{' + stringify(v.variable) + '}';
      }
      else if(type === 'string') {
          str = str + v;
      }
      return str;
    }
    function append(arr) {
        var str = '';
        for(var i = 0; i < arr.length; i++) {
            if(typeOf(arr[i]) == 'array') {
                str += append(arr[i]);
            }
            else if (typeof arr[i] === 'object') {
                str += JSON.stringify(arr[i].object);
            }
            else {
                str += arr[i];
            }
        }
        return str;
    }
    function _format(str, stream, bag, keep) {
        bag = bag || {};
        var i, j, val, ele, str = '';
        for(i = 0; i < stream.length; i++) {
            ele = stream[i];
            if(ele.constructor === String) {
                str = str + ele;
            }
            else {
                if(ele.variable.constructor == Array) {
                    // Case of nested token - only single valued for now
                    key = _format('', ele.variable, bag, keep);
                    val = select(key, bag);
                    if(val) {
                        str = str + val;
                    }
                    else if(keep) {
                        str = str + '{' + ele.str + '}'
                    }
                }
                else {
                    val = select(ele.variable, bag);
                    if(val) {
                        str = str + val;
                    }
                    else if(keep) {
                        str = str + '{' + ele.str + '}'
                    }
                }
            }
        }
        return str;
    }
}

start = template

template = c:( expression / literal )* {
    var o = [];
    o.push(c[0]);
    var current = 0;
    for(var i = 1; i < c.length; i++) {
        if(typeof c[i] === 'string' && typeof o[current] === 'string') {
            o[current] = o[current] + c[i];
        }
        else {
            o.push(c[i]);
            current++;
        }
    }
    return {
        format: function(bag, keep) {
            return _format('', o, bag, keep);
        },
        stream: o
    }
}

literal = (([^^\`{}]) / ' ') / expression

expression =  "{" v:variable "}" {
    var token = {
        variable: v,
        str: stringify(v)
    };
    return token;
}

variable = l:literal* {
    var o = [];
    o.push(l[0]);
    var current = 0;
    for(var i = 1; i < l.length; i++) {
        if(typeof l[i] === 'string' && typeof o[current] === 'string') {
            o[current] = o[current] + l[i];
        }
        else {
            o.push(l[i]);
            current++;
        }
    }
    return (o.length === 1) ? o[0] : o;
}

digits = d:[0-9]* {
    var str = '';
    for(var i = 0; i < d.length; i++) {
        str += d[i];
    }
    return str;
}