module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "AliasField": parse_AliasField,
        "AliasSource": parse_AliasSource,
        "AliasedRef": parse_AliasedRef,
        "All": parse_All,
        "And": parse_And,
        "AndCond": parse_AndCond,
        "Array": parse_Array,
        "ArrayVal": parse_ArrayVal,
        "Assign": parse_Assign,
        "AuthenticateUsing": parse_AuthenticateUsing,
        "CNVP": parse_CNVP,
        "CSV": parse_CSV,
        "CSVMember": parse_CSVMember,
        "CallUdf": parse_CallUdf,
        "Column": parse_Column,
        "ColumnsClause": parse_ColumnsClause,
        "Comma": parse_Comma,
        "CommaCSVMember": parse_CommaCSVMember,
        "CommaSource": parse_CommaSource,
        "Comment": parse_Comment,
        "Cond": parse_Cond,
        "CreateStatement": parse_CreateStatement,
        "Delete": parse_Delete,
        "DeleteStatement": parse_DeleteStatement,
        "Descendent": parse_Descendent,
        "Describe": parse_Describe,
        "DescribeRouteStatement": parse_DescribeRouteStatement,
        "DescribeStatement": parse_DescribeStatement,
        "Digits": parse_Digits,
        "DoubleString": parse_DoubleString,
        "Elements": parse_Elements,
        "EqCond": parse_EqCond,
        "Exp": parse_Exp,
        "Expires": parse_Expires,
        "Expr": parse_Expr,
        "ExprBlock": parse_ExprBlock,
        "ExtIdentifier": parse_ExtIdentifier,
        "False": parse_False,
        "FalseVal": parse_FalseVal,
        "Field": parse_Field,
        "FieldName": parse_FieldName,
        "Fields": parse_Fields,
        "ForEachMember": parse_ForEachMember,
        "Frac": parse_Frac,
        "FromClause": parse_FromClause,
        "GetFrom": parse_GetFrom,
        "Identifier": parse_Identifier,
        "InCond": parse_InCond,
        "Indexed": parse_Indexed,
        "InsertStatement": parse_InsertStatement,
        "Int": parse_Int,
        "JSON": parse_JSON,
        "JSONPath": parse_JSONPath,
        "Limit": parse_Limit,
        "Line": parse_Line,
        "LineCrlf": parse_LineCrlf,
        "LiteralParam": parse_LiteralParam,
        "Members": parse_Members,
        "NVP": parse_NVP,
        "NVPs": parse_NVPs,
        "Name": parse_Name,
        "NonAliasField": parse_NonAliasField,
        "NonAliasSource": parse_NonAliasSource,
        "Null": parse_Null,
        "NullVal": parse_NullVal,
        "Number": parse_Number,
        "NumberVal": parse_NumberVal,
        "Object": parse_Object,
        "Offset": parse_Offset,
        "Operator": parse_Operator,
        "Output": parse_Output,
        "Pair": parse_Pair,
        "ParamDigits": parse_ParamDigits,
        "Patch": parse_Patch,
        "PositiveNumber": parse_PositiveNumber,
        "PostTo": parse_PostTo,
        "PutTo": parse_PutTo,
        "QuotedDigits": parse_QuotedDigits,
        "QuotedWord": parse_QuotedWord,
        "QuotedWordVal": parse_QuotedWordVal,
        "RHS": parse_RHS,
        "Ref": parse_Ref,
        "ResultSet": parse_ResultSet,
        "Ret": parse_Ret,
        "RetRef": parse_RetRef,
        "RetVal": parse_RetVal,
        "Return": parse_Return,
        "Route": parse_Route,
        "Select": parse_Select,
        "SelectStatement": parse_SelectStatement,
        "Selector": parse_Selector,
        "Show": parse_Show,
        "ShowRoutesStatement": parse_ShowRoutesStatement,
        "ShowStatement": parse_ShowStatement,
        "SingleString": parse_SingleString,
        "Source": parse_Source,
        "Statement": parse_Statement,
        "StatementOrObject": parse_StatementOrObject,
        "StringLiteral": parse_StringLiteral,
        "StringVal": parse_StringVal,
        "Struct": parse_Struct,
        "True": parse_True,
        "TrueVal": parse_TrueVal,
        "Type": parse_Type,
        "UDF": parse_UDF,
        "UDFParam": parse_UDFParam,
        "UDFParams": parse_UDFParams,
        "UsingBodyTemplate": parse_UsingBodyTemplate,
        "UsingDefaults": parse_UsingDefaults,
        "UsingHeaders": parse_UsingHeaders,
        "UsingMonkeyPatch": parse_UsingMonkeyPatch,
        "Value": parse_Value,
        "Verb": parse_Verb,
        "VerbName": parse_VerbName,
        "WhereClause": parse_WhereClause,
        "WhereCriteria": parse_WhereCriteria,
        "WithAliases": parse_WithAliases,
        "Word": parse_Word,
        "crlf": parse_crlf,
        "dQuotedDigits": parse_dQuotedDigits,
        "dQuotedWord": parse_dQuotedWord,
        "dquote": parse_dquote,
        "e": parse_e,
        "insig": parse_insig,
        "sQuotedDigits": parse_sQuotedDigits,
        "sQuotedWord": parse_sQuotedWord,
        "sp": parse_sp,
        "squote": parse_squote,
        "start": parse_start
      };

      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }

      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);

        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        rightmostMatchFailuresExpected.push(failure);
      }

      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result18 = parse_crlf();
        while (result18 !== null) {
          result3.push(result18);
          var result18 = parse_crlf();
        }
        if (result3 !== null) {
          var result4 = [];
          var result17 = parse_LineCrlf();
          while (result17 !== null) {
            result4.push(result17);
            var result17 = parse_LineCrlf();
          }
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result16 = parse_Return();
              var result6 = result16 !== null ? result16 : '';
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = [];
                  var result15 = parse_crlf();
                  while (result15 !== null) {
                    result8.push(result15);
                    var result15 = parse_crlf();
                  }
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      var result10 = [];
                      var result14 = parse_Comment();
                      while (result14 !== null) {
                        result10.push(result14);
                        var result14 = parse_Comment();
                      }
                      if (result10 !== null) {
                        var result11 = parse_insig();
                        if (result11 !== null) {
                          var result12 = [];
                          var result13 = parse_crlf();
                          while (result13 !== null) {
                            result12.push(result13);
                            var result13 = parse_crlf();
                          }
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(larr, r, carr) {
              ret = [];
              ret = ret.concat(larr);
              if(r) {
                  ret.push(r);
              }
              ret = ret.concat(carr);
              return ret;
          })(result1[1], result1[3], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LineCrlf() {
        var cacheKey = 'LineCrlf@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Line();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_crlf();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_crlf();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l) {
              return l;
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Line() {
        var cacheKey = 'Line@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_sp();
        if (result3 !== null) {
          var result6 = parse_Assign();
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result5 = parse_Comment();
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l) {
              if(l.type !== 'comment') {
                  l.id = id++;
              }
              return l;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Assign() {
        var cacheKey = 'Assign@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result9 = parse_Output();
        var result3 = result9 !== null ? result9 : '';
        if (result3 !== null) {
          var result4 = parse_StatementOrObject();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result8 = ";";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              var result6 = result8 !== null ? result8 : '';
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(a, s) {
              if(a) {
                  s.assign = a.assign;
                  s.line = a.line;
              }

              // Add LHS to the symbol table
              symbols[a.assign] = {};
              return s;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_StatementOrObject() {
        var cacheKey = 'StatementOrObject@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_Statement();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_Value();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_CallUdf();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CallUdf() {
        var cacheKey = 'CallUdf@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_UDF();
        var result2 = result1 !== null
          ? (function(u) {
              u.type = 'define';
              u.udf = u.name;
              delete u.operator;
              return u;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Statement() {
        var cacheKey = 'Statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result8 = parse_SelectStatement();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_ShowRoutesStatement();
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var result6 = parse_ShowStatement();
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var result5 = parse_DescribeRouteStatement();
              if (result5 !== null) {
                var result0 = result5;
              } else {
                var result4 = parse_DescribeStatement();
                if (result4 !== null) {
                  var result0 = result4;
                } else {
                  var result3 = parse_InsertStatement();
                  if (result3 !== null) {
                    var result0 = result3;
                  } else {
                    var result2 = parse_DeleteStatement();
                    if (result2 !== null) {
                      var result0 = result2;
                    } else {
                      var result1 = parse_CreateStatement();
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Output() {
        var cacheKey = 'Output@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_Word();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w) {
              return {
                  line: computeErrorPosition().line,
                  assign: w
              }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Comment() {
        var cacheKey = 'Comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "--") {
          var result3 = "--";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"--\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_sp();
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos).match(/^[ -\uFFFF]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[ -\\uFFFF]");
              }
            }
            while (result8 !== null) {
              result5.push(result8);
              if (input.substr(pos).match(/^[ -\uFFFF]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[ -\\uFFFF]");
                }
              }
            }
            if (result5 !== null) {
              var result7 = parse_crlf();
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
              return {
                  line: computeErrorPosition().line,
                  type: 'comment',
                  text: c.join('')
              }
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CreateStatement() {
        var cacheKey = 'CreateStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "create") {
          var result3 = "create";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"create\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "table") {
              var result5 = "table";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"table\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_NonAliasSource();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_Verb();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_Verb();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, v) {
              var s = {
                  type: 'create',
                  name: s.name,
                  line: computeErrorPosition().line
              };
              for(i = 0; i < v.length; i++) {
                  s[v[i].type] = v[i];
                  delete v[i].type;
              }
              return s;
          })(result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Type() {
        var cacheKey = 'Type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 6) === "select") {
          var result4 = "select";
          pos += 6;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"select\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 6) === "insert") {
            var result3 = "insert";
            pos += 6;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"insert\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 6) === "delete") {
              var result2 = "delete";
              pos += 6;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"delete\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 6) === "update") {
                var result1 = "update";
                pos += 6;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"update\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Verb() {
        var cacheKey = 'Verb@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "on") {
          var result3 = "on";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"on\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_Type();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_VerbName();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = parse_QuotedWord();
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        var result30 = parse_WithAliases();
                        var result11 = result30 !== null ? result30 : '';
                        if (result11 !== null) {
                          var result29 = parse_UsingHeaders();
                          var result12 = result29 !== null ? result29 : '';
                          if (result12 !== null) {
                            var result28 = parse_UsingDefaults();
                            var result13 = result28 !== null ? result28 : '';
                            if (result13 !== null) {
                              var result27 = parse_UsingMonkeyPatch();
                              var result14 = result27 !== null ? result27 : '';
                              if (result14 !== null) {
                                var result15 = parse_insig();
                                if (result15 !== null) {
                                  var result26 = parse_UsingBodyTemplate();
                                  var result16 = result26 !== null ? result26 : '';
                                  if (result16 !== null) {
                                    var result17 = parse_insig();
                                    if (result17 !== null) {
                                      var result25 = parse_AuthenticateUsing();
                                      var result18 = result25 !== null ? result25 : '';
                                      if (result18 !== null) {
                                        var result19 = parse_insig();
                                        if (result19 !== null) {
                                          var result24 = parse_ResultSet();
                                          var result20 = result24 !== null ? result24 : '';
                                          if (result20 !== null) {
                                            var result21 = parse_insig();
                                            if (result21 !== null) {
                                              var result23 = parse_Expires();
                                              var result22 = result23 !== null ? result23 : '';
                                              if (result22 !== null) {
                                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22];
                                              } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                              }
                                            } else {
                                              var result1 = null;
                                              pos = savedPos1;
                                            }
                                          } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result1 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t, m, u, a, h, d, p, b, auth, r, exp) {
              var ret = {
                  type: t,
                  method: m,
                  uri: u.value,
                  defaults: d || {},
                  aliases: a || {},
                  headers: h || {},
                  resultSet: r || '',
                  cache: exp || {}
              };
              if(auth && auth.length > 0) {
                  ret.auth = auth;
              }
              if(p) ret.patch = p;
              ret.body = b;
              return ret;
          })(result1[2], result1[4], result1[6], result1[8], result1[9], result1[10], result1[11], result1[13], result1[15], result1[17], result1[19])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VerbName() {
        var cacheKey = 'VerbName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result5 = parse_GetFrom();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_PostTo();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_PutTo();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_Delete();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_Patch();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GetFrom() {
        var cacheKey = 'GetFrom@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "get") {
          var result3 = "get";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"get\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 4) === "from") {
              var result5 = "from";
              pos += 4;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"from\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
              return 'get'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PostTo() {
        var cacheKey = 'PostTo@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "post") {
          var result3 = "post";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"post\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "to") {
              var result5 = "to";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"to\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
              return 'post'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PutTo() {
        var cacheKey = 'PutTo@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "put") {
          var result3 = "put";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"put\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "to") {
              var result5 = "to";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"to\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
              return 'put'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Delete() {
        var cacheKey = 'Delete@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "delete") {
          var result1 = "delete";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"delete\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return 'delete'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Patch() {
        var cacheKey = 'Patch@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 5) === "patch") {
          var result1 = "patch";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"patch\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return 'patch'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UsingDefaults() {
        var cacheKey = 'UsingDefaults@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 8) === "defaults") {
              var result5 = "defaults";
              pos += 8;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"defaults\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_NVPs();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
              return merge(d);
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UsingHeaders() {
        var cacheKey = 'UsingHeaders@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 7) === "headers") {
              var result5 = "headers";
              pos += 7;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"headers\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_NVPs();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
              return merge(d);
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UsingMonkeyPatch() {
        var cacheKey = 'UsingMonkeyPatch@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "patch") {
              var result5 = "patch";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"patch\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_QuotedWord();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t) {
              return t.value;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UsingBodyTemplate() {
        var cacheKey = 'UsingBodyTemplate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 12) === "bodyTemplate") {
              var result5 = "bodyTemplate";
              pos += 12;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"bodyTemplate\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_QuotedWord();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 4) === "type") {
                      var result9 = "type";
                      pos += 4;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"type\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        var result11 = parse_QuotedWord();
                        if (result11 !== null) {
                          var result12 = parse_insig();
                          if (result12 !== null) {
                            var result15 = parse_ForEachMember();
                            var result13 = result15 !== null ? result15 : '';
                            if (result13 !== null) {
                              var result14 = parse_insig();
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t, m, f) {
              var ret = {
                  template: t.value,
                  type: m.value
              }
              if(f) {
                  ret.foreach = f;
              }
              return ret;
          })(result1[4], result1[8], result1[10])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ForEachMember() {
        var cacheKey = 'ForEachMember@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "foreach") {
          var result3 = "foreach";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"foreach\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_QuotedWord();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(id) {
            return id.value;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WithAliases() {
        var cacheKey = 'WithAliases@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "with") {
          var result3 = "with";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"with\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 7) === "aliases") {
              var result5 = "aliases";
              pos += 7;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"aliases\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_NVPs();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p) {
              return merge(p);
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AuthenticateUsing() {
        var cacheKey = 'AuthenticateUsing@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 12) === "authenticate") {
          var result9 = "authenticate";
          pos += 12;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"authenticate\"");
          }
        }
        if (result9 !== null) {
          var result3 = result9;
        } else {
          if (input.substr(pos, 4) === "auth") {
            var result8 = "auth";
            pos += 4;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"auth\"");
            }
          }
          if (result8 !== null) {
            var result3 = result8;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "using") {
              var result5 = "using";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"using\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_QuotedWord();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(m) {
              return m.value;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ResultSet() {
        var cacheKey = 'ResultSet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 9) === "resultset") {
          var result3 = "resultset";
          pos += 9;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"resultset\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_QuotedWord();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(r) {
              return r.value;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NVPs() {
        var cacheKey = 'NVPs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NVP();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_CNVP();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_CNVP();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n, narr) {
            var ret = [n];
            ret = ret.concat(narr);
            return ret;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CNVP() {
        var cacheKey = 'CNVP@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === ",") {
          var result3 = ",";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\",\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_NVP();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n) {
              return n;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NVP() {
        var cacheKey = 'NVP@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result11 = parse_Field();
          if (result11 !== null) {
            var result4 = result11;
          } else {
            var result10 = parse_QuotedWord();
            if (result10 !== null) {
              var result4 = result10;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = parse_RHS();
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, rhs) {
              var  o = {};
              lhs = lhs.name || lhs;
              o[lhs.hasOwnProperty('value') ? lhs.value : lhs] = rhs.hasOwnProperty('value') ? rhs.value : rhs;
              return o;
          })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Expires() {
        var cacheKey = 'Expires@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          if (input.substr(pos, 7) === "expires") {
            var result4 = "expires";
            pos += 7;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"expires\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_Digits();
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
              return {
                  expires: d
              }
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SelectStatement() {
        var cacheKey = 'SelectStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Select();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_ColumnsClause();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                if (input.substr(pos, 4) === "from") {
                  var result7 = "from";
                  pos += 4;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"from\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = parse_FromClause();
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        var result11 = [];
                        var result18 = parse_WhereClause();
                        while (result18 !== null) {
                          result11.push(result18);
                          var result18 = parse_WhereClause();
                        }
                        if (result11 !== null) {
                          var result12 = parse_insig();
                          if (result12 !== null) {
                            var result13 = [];
                            var result17 = parse_Limit();
                            while (result17 !== null) {
                              result13.push(result17);
                              var result17 = parse_Limit();
                            }
                            if (result13 !== null) {
                              var result14 = parse_insig();
                              if (result14 !== null) {
                                var result15 = [];
                                var result16 = parse_Offset();
                                while (result16 !== null) {
                                  result15.push(result16);
                                  var result16 = parse_Offset();
                                }
                                if (result15 !== null) {
                                  var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, c, fc, wc, l, o) {
              var s = {
                  type: s.type,
                  line: s.line,
                  fromClause: fc,
                  columns: c,
                  whereCriteria: wc[0]
              };
              if(l[0]) {
                  s.limit = l[0];
              }
              if(o[0]) {
                  s.offset = o[0];
              }
              s.id = id;
              if(c && c.length > 0 && c[0].alias) {
                  s.usingColumnAliases = true
              }

              // Extras from where clause - there are non-literal args of UDFs in the where clause
              if(s.whereCriteria && typeOf(s.columns) === 'array') {
                  for(var i = 0; i < s.whereCriteria.length; i++) {
                      var where = s.whereCriteria[i];
                      if(where.operator === 'udf') {
                          for(var j = 0; j < where.args.length; j++) {
                              if(where.args[j].type === 'column') {
                                  // If this column is not already selected, included it now.
                                  for(var c = 0; c < s.columns.length; c++) {
                                      if(s.columns[c].name === where.args[j].name) {
                                          if(s.columns[c].alias) {
                                              where.args[j].alias = s.columns[c].alias
                                              delete where.args[j].index;
                                          }
                                          else {
                                              where.args[j].index = c;
                                          }
                                          break;
                                      }
                                  }
                                  if(!where.args[j].hasOwnProperty('alias') && !where.args[j].hasOwnProperty('index')) {
                                      s.extras = s.extras || [];
                                      s.extras.push(s.columns.length);
                                      var extra = {name: where.args[j].name, type: 'column'};
                                      // Index or name into selected columns
                                      if(s.columns[0].alias) {
                                          extra.alias = where.args[j].name;
                                          where.args[j].alias = extra.alias;
                                      }
                                      else {
                                          where.args[j].index = s.columns.length;
                                      }
                                      extra.for = 'udf';
                                      s.columns.push(extra);
                                  }
                              }
                          }
                      }
                  }
              }
              s = splitJoins(s);
              delete s.id;
              return s;
          })(result1[0], result1[2], result1[6], result1[8], result1[10], result1[12])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Select() {
        var cacheKey = 'Select@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "select") {
          var result1 = "select";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"select\"");
          }
        }
        var result2 = result1 !== null
          ? (function(s) {
              return {
                  type: 'select',
                  line: computeErrorPosition().line
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ShowRoutesStatement() {
        var cacheKey = 'ShowRoutesStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Show();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 6) === "routes") {
              var result5 = "routes";
              pos += 6;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"routes\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s) {
              return {
                  type: 'show routes',
                  line: s.line
              }
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ShowStatement() {
        var cacheKey = 'ShowStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Show();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 6) === "tables") {
              var result5 = "tables";
              pos += 6;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"tables\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s) {
              return {
                  type: 'show',
                  line: s.line
              }
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Show() {
        var cacheKey = 'Show@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 4) === "show") {
          var result1 = "show";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"show\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return {
                  line: computeErrorPosition().line
              }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Describe() {
        var cacheKey = 'Describe@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 8) === "describe") {
          var result4 = "describe";
          pos += 8;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"describe\"");
          }
        }
        if (result4 !== null) {
          var result1 = result4;
        } else {
          if (input.substr(pos, 4) === "desc") {
            var result3 = "desc";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"desc\"");
            }
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function() {
              return {
                  line: computeErrorPosition().line
              }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DescribeRouteStatement() {
        var cacheKey = 'DescribeRouteStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Describe();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "route") {
              var result5 = "route";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"route\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_QuotedWord();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 5) === "using") {
                      var result9 = "using";
                      pos += 5;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"using\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        if (input.substr(pos, 6) === "method") {
                          var result11 = "method";
                          pos += 6;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"method\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse_insig();
                          if (result12 !== null) {
                            if (input.substr(pos, 3) === "get") {
                              var result18 = "get";
                              pos += 3;
                            } else {
                              var result18 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"get\"");
                              }
                            }
                            if (result18 !== null) {
                              var result13 = result18;
                            } else {
                              if (input.substr(pos, 4) === "post") {
                                var result17 = "post";
                                pos += 4;
                              } else {
                                var result17 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"post\"");
                                }
                              }
                              if (result17 !== null) {
                                var result13 = result17;
                              } else {
                                if (input.substr(pos, 3) === "put") {
                                  var result16 = "put";
                                  pos += 3;
                                } else {
                                  var result16 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"put\"");
                                  }
                                }
                                if (result16 !== null) {
                                  var result13 = result16;
                                } else {
                                  if (input.substr(pos, 6) === "delete") {
                                    var result15 = "delete";
                                    pos += 6;
                                  } else {
                                    var result15 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"delete\"");
                                    }
                                  }
                                  if (result15 !== null) {
                                    var result13 = result15;
                                  } else {
                                    if (input.substr(pos, 5) === "patch") {
                                      var result14 = "patch";
                                      pos += 5;
                                    } else {
                                      var result14 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"patch\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      var result13 = result14;
                                    } else {
                                      var result13 = null;;
                                    };
                                  };
                                };
                              };
                            }
                            if (result13 !== null) {
                              var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d, p, m) {
              return {
                  type: 'describe route',
                  line: d.line,
                  path: p,
                  method: m
              }
          })(result1[0], result1[4], result1[10])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DescribeStatement() {
        var cacheKey = 'DescribeStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Describe();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_Source();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d, s) {
              return {
                  type: 'describe',
                  line: d.line,
                  source: s
              }
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_InsertStatement() {
        var cacheKey = 'InsertStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "insert") {
          var result3 = "insert";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"insert\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "in") {
              var result5 = "in";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"in\"");
              }
            }
            if (result5 !== null) {
              if (input.substr(pos, 2) === "to") {
                var result6 = "to";
                pos += 2;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"to\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = parse_Source();
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result10 = "(";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse_insig();
                        if (result11 !== null) {
                          var result12 = parse_ColumnsClause();
                          if (result12 !== null) {
                            var result13 = parse_insig();
                            if (result13 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result14 = ")";
                                pos += 1;
                              } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result14 !== null) {
                                var result15 = parse_insig();
                                if (result15 !== null) {
                                  if (input.substr(pos, 6) === "values") {
                                    var result16 = "values";
                                    pos += 6;
                                  } else {
                                    var result16 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"values\"");
                                    }
                                  }
                                  if (result16 !== null) {
                                    var result17 = parse_insig();
                                    if (result17 !== null) {
                                      if (input.substr(pos, 1) === "(") {
                                        var result18 = "(";
                                        pos += 1;
                                      } else {
                                        var result18 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"(\"");
                                        }
                                      }
                                      if (result18 !== null) {
                                        var result19 = parse_CSV();
                                        if (result19 !== null) {
                                          if (input.substr(pos, 1) === ")") {
                                            var result20 = ")";
                                            pos += 1;
                                          } else {
                                            var result20 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (result20 !== null) {
                                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20];
                                          } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result1 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, c, v) {
              if(c.length != v.value.length) {
                  throw new this.SyntaxError("Line " + computeErrorPosition().line + ": Number of values does not match number of columns.");
              }
              return {
                  type: 'insert',
                  source: s,
                  columns: c,
                  values: v.value,
                  line: computeErrorPosition().line
              }
          })(result1[5], result1[9], result1[16])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DeleteStatement() {
        var cacheKey = 'DeleteStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "delete") {
          var result3 = "delete";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"delete\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 4) === "from") {
              var result5 = "from";
              pos += 4;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"from\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_Source();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_WhereClause();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_WhereClause();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, wc) {
              return {
                  type: 'delete',
                  source: s,
                  whereCriteria: wc[0],
                  line: computeErrorPosition().line
              }
          })(result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ColumnsClause() {
        var cacheKey = 'ColumnsClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_All();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_Fields();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(arr) {
              var aliasCount = 0;
              for(var i = 0; i < arr.length; i++) {
                  if(arr[i].alias) {
                      aliasCount++;
                  }
              }
              if(aliasCount > 0 && aliasCount != arr.length) {
                  throw new this.SyntaxError("Line " + computeErrorPosition().line + ": Not all selected columns are using aliases.");
              }
              return arr;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FromClause() {
        var cacheKey = 'FromClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result6 = parse_Source();
        if (result6 !== null) {
          var result3 = [];
          while (result6 !== null) {
            result3.push(result6);
            var result6 = parse_Source();
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_CommaSource();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_CommaSource();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, sarr) {
              return s.concat(sarr);
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Source() {
        var cacheKey = 'Source@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_AliasSource();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_NonAliasSource();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CommaSource() {
        var cacheKey = 'CommaSource@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_Comma();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_Source();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s) {
              return s;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AliasSource() {
        var cacheKey = 'AliasSource@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Name();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result5 = "as";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_Name();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, a) {
              if(symbols[s]) {
                  s = "{" + s + "}";
              }
              return {name: s, alias: a};
          })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NonAliasSource() {
        var cacheKey = 'NonAliasSource@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Name();
        var result2 = result1 !== null
          ? (function(s) {
              if(symbols[s]) {
                  s = "{" + s + "}";
              }
              return {name: s};
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WhereClause() {
        var cacheKey = 'WhereClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "where") {
          var result3 = "where";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"where\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_WhereCriteria();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w) {
              return w;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Limit() {
        var cacheKey = 'Limit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "limit") {
          var result3 = "limit";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"limit\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_Digits();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n) {
              return n;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Offset() {
        var cacheKey = 'Offset@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "offset") {
          var result3 = "offset";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"offset\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_Digits();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n) {
              return n;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WhereCriteria() {
        var cacheKey = 'WhereCriteria@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Cond();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_AndCond();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_AndCond();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, carr) {
              var ret = [c];
              ret = ret.concat(carr);
              return ret;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_And() {
        var cacheKey = 'And@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 3) === "and") {
          var result0 = "and";
          pos += 3;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"and\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Cond() {
        var cacheKey = 'Cond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_EqCond();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_InCond();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_UDF();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AndCond() {
        var cacheKey = 'AndCond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_And();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_Cond();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
              return c;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EqCond() {
        var cacheKey = 'EqCond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_Field();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_Operator();
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = parse_RHS();
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, rhs) {
              return {operator : '=', lhs : lhs, rhs : rhs};
          })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_InCond() {
        var cacheKey = 'InCond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Name();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "in") {
              var result5 = "in";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"in\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result7 = "(";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result13 = parse_SelectStatement();
                    if (result13 !== null) {
                      var result9 = result13;
                    } else {
                      var result12 = parse_CSV();
                      if (result12 !== null) {
                        var result9 = result12;
                      } else {
                        var result9 = null;;
                      };
                    }
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result11 = ")";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, rhs) {
              return {operator : 'in', lhs : {name: lhs}, rhs: rhs};
          })(result1[0], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CSV() {
        var cacheKey = 'CSV@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_CSVMember();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_CommaCSVMember();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_CommaCSVMember();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, carr) {
              var res = [c.value || c];
              collect(carr,',', res, 'value');
              return {
                  value: res
              }
          })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CommaCSVMember() {
        var cacheKey = 'CommaCSVMember@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_Comma();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_CSVMember();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {
              return v;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_CSVMember() {
        var cacheKey = 'CSVMember@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_QuotedWord();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_QuotedDigits();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_Digits();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_Ref();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Ref() {
        var cacheKey = 'Ref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Name();
        var result2 = result1 !== null
          ? (function(i) {
              return {
                  value: "{" + i + "}"
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Operator() {
        var cacheKey = 'Operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var result6 = parse_insig();
        if (result6 !== null) {
          if (input.substr(pos, 1) === "=") {
            var result7 = "=";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result7 !== null) {
            var result8 = parse_insig();
            if (result8 !== null) {
              var result5 = [result6, result7, result8];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_insig();
          if (result2 !== null) {
            if (input.substr(pos, 2) === "in") {
              var result3 = "in";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"in\"");
              }
            }
            if (result3 !== null) {
              var result4 = parse_insig();
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RHS() {
        var cacheKey = 'RHS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result6 = parse_AliasedRef();
        if (result6 !== null) {
          var result1 = result6;
        } else {
          var result5 = parse_QuotedWord();
          if (result5 !== null) {
            var result1 = result5;
          } else {
            var result4 = parse_QuotedDigits();
            if (result4 !== null) {
              var result1 = result4;
            } else {
              var result3 = parse_Digits();
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        var result2 = result1 !== null
          ? (function(r) {
              if(!r.hasOwnProperty('value')) {
                  r = {
                      value: r
                  }
              }
              return r;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AliasedRef() {
        var cacheKey = 'AliasedRef@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_JSONPath();
        var result2 = result1 !== null
          ? (function(p) {
              return {
                  type: 'alias',
                  value: p
              };
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_All() {
        var cacheKey = 'All@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "*") {
          var result1 = "*";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return {
                  name: '*',
                  type: 'column'
              }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Fields() {
        var cacheKey = 'Fields@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Field();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse_insig();
          if (result6 !== null) {
            var result7 = parse_Comma();
            if (result7 !== null) {
              var result8 = parse_insig();
              if (result8 !== null) {
                var result9 = parse_Field();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse_insig();
            if (result6 !== null) {
              var result7 = parse_Comma();
              if (result7 !== null) {
                var result8 = parse_insig();
                if (result8 !== null) {
                  var result9 = parse_Field();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(arr) {
              var res = [];
              collect(arr, ",", res);
              return res;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Field() {
        var cacheKey = 'Field@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_AliasField();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_NonAliasField();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(f) {
              return f;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AliasField() {
        var cacheKey = 'AliasField@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NonAliasField();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result5 = "as";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_Name();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n, a) {
              if(symbols[n]) {
                  n = "{" + n + "}";
              }
              n.alias = a;
              return n;
          })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NonAliasField() {
        var cacheKey = 'NonAliasField@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_UDF();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Column();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UDF() {
        var cacheKey = 'UDF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Name();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result10 = parse_UDFParams();
                var result7 = result10 !== null ? result10 : '';
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, p) {
              return {
                  operator: 'udf',
                  name: name,
                  args: p
              }
          })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UDFParams() {
        var cacheKey = 'UDFParams@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_UDFParam();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var result7 = parse_Comma();
            if (result7 !== null) {
              var result8 = parse_insig();
              if (result8 !== null) {
                var result9 = parse_UDFParam();
                if (result9 !== null) {
                  var result6 = [result7, result8, result9];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var result7 = parse_Comma();
              if (result7 !== null) {
                var result8 = parse_insig();
                if (result8 !== null) {
                  var result9 = parse_UDFParam();
                  if (result9 !== null) {
                    var result6 = [result7, result8, result9];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, carr) {
              var res = [c];
              collect(carr,',', res);
              return res;
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UDFParam() {
        var cacheKey = 'UDFParam@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_LiteralParam();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Column();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LiteralParam() {
        var cacheKey = 'LiteralParam@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_JSON();
        var result2 = result1 !== null
          ? (function(j) {
              return {
                  type: 'literal',
                  value: j
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ParamDigits() {
        var cacheKey = 'ParamDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Digits();
        var result2 = result1 !== null
          ? (function(d) {
              return {
                  type: 'literal',
                  value: d
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Column() {
        var cacheKey = 'Column@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_JSONPath();
        var result2 = result1 !== null
          ? (function(p) {
              return {
                  type: 'column',
                  name: p
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FieldName() {
        var cacheKey = 'FieldName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Selector();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_Selector();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_Selector();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {
              return append(chars);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Selector() {
        var cacheKey = 'Selector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "..") {
          var result2 = "..";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"..\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === ".") {
            var result1 = ".";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Comma() {
        var cacheKey = 'Comma@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === ",") {
          var result0 = ",";
          pos += 1;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\",\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Name() {
        var cacheKey = 'Name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Word();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_Word();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_Word();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(obj) {
              return append(obj);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Word() {
        var cacheKey = 'Word@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z$:]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z$:]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z_0-9:]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_0-9:]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z_0-9:]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9:]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {
              var ret = chars[0];
              for(i = 1; i < chars.length; i++) {
                  ret = ret + chars[i].join('');
              }
              return ret;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_QuotedWordVal() {
        var cacheKey = 'QuotedWordVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_QuotedWord();
        var result2 = result1 !== null
          ? (function(q) {
              return '"' + q.value + '"';
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_QuotedWord() {
        var cacheKey = 'QuotedWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_sQuotedWord();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_dQuotedWord();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_sQuotedWord() {
        var cacheKey = 'sQuotedWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^']/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^']");
            }
          }
          if (result8 !== null) {
            var result6 = result8;
          } else {
            if (input.substr(pos, 1) === " ") {
              var result7 = " ";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\" \"");
              }
            }
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^']/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^']");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              if (input.substr(pos, 1) === " ") {
                var result7 = " ";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\" \"");
                }
              }
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
              return {
                  value: c.join('')
              }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_dQuotedWord() {
        var cacheKey = 'dQuotedWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          if (result8 !== null) {
            var result6 = result8;
          } else {
            if (input.substr(pos, 1) === " ") {
              var result7 = " ";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\" \"");
              }
            }
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              if (input.substr(pos, 1) === " ") {
                var result7 = " ";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\" \"");
                }
              }
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
              return {
                  value: c.join('')
              }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_QuotedDigits() {
        var cacheKey = 'QuotedDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_sQuotedDigits();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_dQuotedDigits();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_sQuotedDigits() {
        var cacheKey = 'sQuotedDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_Digits();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
              return {
                  value: d
              }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_dQuotedDigits() {
        var cacheKey = 'dQuotedDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_Digits();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
              return {
                  value: d
              }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Ret() {
        var cacheKey = 'Ret@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "return") {
          var result1 = "return";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"return\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return {
                  line: computeErrorPosition().line
              }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Return() {
        var cacheKey = 'Return@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Ret();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_RetVal();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result11 = parse_Route();
                var result7 = result11 !== null ? result11 : '';
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ";") {
                      var result10 = ";";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    var result9 = result10 !== null ? result10 : '';
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(re, o, r) {
              var ret = {
                  type: 'return',
                  line: re.line,
                  id: id,
                  rhs: o
              };
              if(r) {
                  ret.route = r;
              }
              return ret;
          })(result1[0], result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RetVal() {
        var cacheKey = 'RetVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_Statement();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_CallUdf();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_RetRef();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_Value();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RetRef() {
        var cacheKey = 'RetRef@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Word();
        var result2 = result1 !== null
          ? (function(o) {
              if(symbols[o] === undefined) {
                  throw new this.SyntaxError("Line " + computeErrorPosition().line + ": Unresolved symbol '" + o + "'");
              }
              return {
                  ref: o
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Route() {
        var cacheKey = 'Route@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "via") {
          var result3 = "via";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"via\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "route") {
              var result5 = "route";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"route\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_QuotedWord();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 5) === "using") {
                      var result9 = "using";
                      pos += 5;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"using\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        if (input.substr(pos, 6) === "method") {
                          var result11 = "method";
                          pos += 6;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"method\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse_insig();
                          if (result12 !== null) {
                            if (input.substr(pos, 3) === "get") {
                              var result21 = "get";
                              pos += 3;
                            } else {
                              var result21 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"get\"");
                              }
                            }
                            if (result21 !== null) {
                              var result13 = result21;
                            } else {
                              if (input.substr(pos, 4) === "post") {
                                var result20 = "post";
                                pos += 4;
                              } else {
                                var result20 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"post\"");
                                }
                              }
                              if (result20 !== null) {
                                var result13 = result20;
                              } else {
                                if (input.substr(pos, 3) === "put") {
                                  var result19 = "put";
                                  pos += 3;
                                } else {
                                  var result19 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"put\"");
                                  }
                                }
                                if (result19 !== null) {
                                  var result13 = result19;
                                } else {
                                  if (input.substr(pos, 6) === "delete") {
                                    var result18 = "delete";
                                    pos += 6;
                                  } else {
                                    var result18 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"delete\"");
                                    }
                                  }
                                  if (result18 !== null) {
                                    var result13 = result18;
                                  } else {
                                    if (input.substr(pos, 5) === "patch") {
                                      var result17 = "patch";
                                      pos += 5;
                                    } else {
                                      var result17 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"patch\"");
                                      }
                                    }
                                    if (result17 !== null) {
                                      var result13 = result17;
                                    } else {
                                      var result13 = null;;
                                    };
                                  };
                                };
                              };
                            }
                            if (result13 !== null) {
                              var result14 = parse_insig();
                              if (result14 !== null) {
                                var result16 = parse_UsingHeaders();
                                var result15 = result16 !== null ? result16 : '';
                                if (result15 !== null) {
                                  var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, m, h) {
              return {
                  path: p,
                  method: m,
                  headers: h || {}
              }
          })(result1[4], result1[10], result1[12])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_JSON() {
        var cacheKey = 'JSON@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result7 = parse_Object();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_StringVal();
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var result5 = parse_NumberVal();
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var result4 = parse_ArrayVal();
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var result3 = parse_TrueVal();
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  var result2 = parse_FalseVal();
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    var result1 = parse_NullVal();
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Value() {
        var cacheKey = 'Value@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_JSON();
        var result2 = result1 !== null
          ? (function(v) {
              return {
                  object: v === "__null__" ? null : v,
                  type: 'define',
                  line: computeErrorPosition().line
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_StringVal() {
        var cacheKey = 'StringVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_StringLiteral();
        var result2 = result1 !== null
          ? (function(s) {
              var s = append(s);
              return s.substr(1, s.length - 2);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumberVal() {
        var cacheKey = 'NumberVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Number();
        var result2 = result1 !== null
          ? (function(n) {
              return parseFloat(append(n));
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ArrayVal() {
        var cacheKey = 'ArrayVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Array();
        var result2 = result1 !== null
          ? (function(n) {
              return JSON.parse(append(n));
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TrueVal() {
        var cacheKey = 'TrueVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_True();
        var result2 = result1 !== null
          ? (function(t) {
              return JSON.parse(t);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FalseVal() {
        var cacheKey = 'FalseVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_False();
        var result2 = result1 !== null
          ? (function(f) {
              return JSON.parse(f);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NullVal() {
        var cacheKey = 'NullVal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Null();
        var result2 = result1 !== null
          ? (function(n) {
              return "__null__";
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Object() {
        var cacheKey = 'Object@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_Struct();
        var result2 = result1 !== null
          ? (function(o) {
              var str = append(o);
              return JSON.parse(str);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Struct() {
        var cacheKey = 'Struct@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_insig();
        if (result1 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result2 = "{";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_insig();
            if (result3 !== null) {
              var result8 = parse_Members();
              var result4 = result8 !== null ? result8 : '';
              if (result4 !== null) {
                var result5 = parse_insig();
                if (result5 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result6 = "}";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result6 !== null) {
                    var result7 = parse_insig();
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Members() {
        var cacheKey = 'Members@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var result6 = parse_Pair();
        if (result6 !== null) {
          var result7 = parse_insig();
          if (result7 !== null) {
            var result8 = parse_Comma();
            if (result8 !== null) {
              var result9 = parse_insig();
              if (result9 !== null) {
                var result10 = parse_Members();
                if (result10 !== null) {
                  var result5 = [result6, result7, result8, result9, result10];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_insig();
          if (result2 !== null) {
            var result3 = parse_Pair();
            if (result3 !== null) {
              var result4 = parse_insig();
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Pair() {
        var cacheKey = 'Pair@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_insig();
        if (result1 !== null) {
          var result2 = parse_StringLiteral();
          if (result2 !== null) {
            var result3 = parse_insig();
            if (result3 !== null) {
              if (input.substr(pos, 1) === ":") {
                var result4 = ":";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\":\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_insig();
                if (result5 !== null) {
                  var result6 = parse_Value();
                  if (result6 !== null) {
                    var result7 = parse_insig();
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Array() {
        var cacheKey = 'Array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result1 !== null) {
          var result2 = parse_insig();
          if (result2 !== null) {
            var result6 = parse_Elements();
            var result3 = result6 !== null ? result6 : '';
            if (result3 !== null) {
              var result4 = parse_insig();
              if (result4 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result5 = "]";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Elements() {
        var cacheKey = 'Elements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result3 = parse_Value();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_Comma();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_Elements();
                if (result7 !== null) {
                  var result2 = [result3, result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Value();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Number() {
        var cacheKey = 'Number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos3 = pos;
        var result11 = parse_Int();
        if (result11 !== null) {
          var result12 = parse_Frac();
          if (result12 !== null) {
            var result13 = parse_Exp();
            if (result13 !== null) {
              var result10 = [result11, result12, result13];
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result1 = result10;
        } else {
          var savedPos2 = pos;
          var result8 = parse_Int();
          if (result8 !== null) {
            var result9 = parse_Frac();
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos2;
            }
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result1 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_Int();
            if (result5 !== null) {
              var result6 = parse_Exp();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result1 = result4;
            } else {
              var result3 = parse_Int();
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        var result2 = result1 !== null
          ? (function(c) {
              return append(c);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Int() {
        var cacheKey = 'Int@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        if (input.substr(pos, 1) === "+") {
          var result7 = "+";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        var result5 = result7 !== null ? result7 : '';
        if (result5 !== null) {
          var result6 = parse_Digits();
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "-") {
            var result2 = "-";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_Digits();
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Frac() {
        var cacheKey = 'Frac@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === ".") {
          var result1 = ".";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result1 !== null) {
          var result3 = parse_Digits();
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Exp() {
        var cacheKey = 'Exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_e();
        if (result1 !== null) {
          var result3 = parse_Int();
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_e() {
        var cacheKey = 'e@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === "e") {
          var result6 = "e";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"e\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 2) === "e+") {
            var result5 = "e+";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"e+\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 2) === "e-") {
              var result4 = "e-";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"e-\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 1) === "E") {
                var result3 = "E";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 2) === "E+") {
                  var result2 = "E+";
                  pos += 2;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"E+\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 2) === "E-") {
                    var result1 = "E-";
                    pos += 2;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E-\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Digits() {
        var cacheKey = 'Digits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(d) {
              return parseInt(append(d));
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_True() {
        var cacheKey = 'True@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 4) === "true") {
          var result0 = "true";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_False() {
        var cacheKey = 'False@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 5) === "false") {
          var result0 = "false";
          pos += 5;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"false\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Null() {
        var cacheKey = 'Null@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 4) === "null") {
          var result0 = "null";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"null\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_dquote() {
        var cacheKey = 'dquote@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^["]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\"]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_squote() {
        var cacheKey = 'squote@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[']/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[']");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_insig() {
        var cacheKey = 'insig@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_sp();
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_crlf();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_crlf();
          }
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return ''})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_sp() {
        var cacheKey = 'sp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[	]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[	]");
          }
        }
        if (result5 !== null) {
          var result3 = result5;
        } else {
          if (input.substr(pos).match(/^[ ]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[ ]");
            }
          }
          if (result4 !== null) {
            var result3 = result4;
          } else {
            var result3 = null;;
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[	]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[	]");
            }
          }
          if (result5 !== null) {
            var result3 = result5;
          } else {
            if (input.substr(pos).match(/^[ ]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[ ]");
              }
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
        }
        var result2 = result1 !== null
          ? (function() {
            return ''
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_crlf() {
        var cacheKey = 'crlf@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[\\r\\n]");
          }
        }
        var result2 = result1 !== null
          ? (function(c) {
            return c;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_JSONPath() {
        var cacheKey = 'JSONPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Identifier();
        if (result3 !== null) {
          var result5 = parse_ExtIdentifier();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i, e) {
              return i + e;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExtIdentifier() {
        var cacheKey = 'ExtIdentifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        var result5 = parse_Descendent();
        if (result5 !== null) {
          var result3 = result5;
        } else {
          var result4 = parse_Indexed();
          if (result4 !== null) {
            var result3 = result4;
          } else {
            var result3 = null;;
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          var result5 = parse_Descendent();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result4 = parse_Indexed();
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
        }
        var result2 = result1 !== null
          ? (function(c) {
              return c.join('');
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Indexed() {
        var cacheKey = 'Indexed@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "[") {
          var result3 = "[";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result3 !== null) {
          var result8 = parse_PositiveNumber();
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var result7 = parse_StringLiteral();
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result6 = parse_Expr();
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;;
              };
            };
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result5 = "]";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p) {
              return '[' + p + ']';
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Expr() {
        var cacheKey = 'Expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "?") {
          var result7 = "?";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"?\"");
          }
        }
        var result3 = result7 !== null ? result7 : '';
        if (result3 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_ExprBlock();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result6 = ")";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(q, e) {
              return q + '(' + e + ')'
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExprBlock() {
        var cacheKey = 'ExprBlock@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_StringLiteral();
        var result2 = result1 !== null
          ? (function(s) {
              return s.substr(1, s.length - 2);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_StringLiteral() {
        var cacheKey = 'StringLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result8 = "\"";
          pos += 1;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result8 !== null) {
          var result9 = parse_DoubleString();
          if (result9 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result10 = "\"";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos2;
            }
          } else {
            var result7 = null;
            pos = savedPos2;
          }
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result1 = result7;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "'") {
            var result4 = "'";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_SingleString();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result6 = "'";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result6 !== null) {
                var result3 = [result4, result5, result6];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(parts) {
              return '"' + parts[1] + '"';
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Identifier() {
        var cacheKey = 'Identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z$:]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z$:]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z_0-9:]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_0-9:]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z_0-9:]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9:]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
              var ret = c[0];
              for(i = 1; i < c.length; i++) {
                  ret = ret + c[i].join('');
              }
              return ret;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Descendent() {
        var cacheKey = 'Descendent@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Selector();
        if (result3 !== null) {
          var result4 = parse_Identifier();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, i) {
              return s + i;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PositiveNumber() {
        var cacheKey = 'PositiveNumber@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return parseInt(d.join(''));
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SingleString() {
        var cacheKey = 'SingleString@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[ -&]/) !== null) {
          var result7 = input.charAt(pos);
          pos++;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("[ -&]");
          }
        }
        if (result7 !== null) {
          var result3 = result7;
        } else {
          if (input.substr(pos).match(/^[(-[]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[(-[]");
            }
          }
          if (result6 !== null) {
            var result3 = result6;
          } else {
            if (input.substr(pos).match(/^[\]-\uFFFF]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[\\]-\\uFFFF]");
              }
            }
            if (result5 !== null) {
              var result3 = result5;
            } else {
              if (input.substr(pos).match(/^[\\"]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\\\\"]");
                }
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            };
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[ -&]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[ -&]");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            if (input.substr(pos).match(/^[(-[]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[(-[]");
              }
            }
            if (result6 !== null) {
              var result3 = result6;
            } else {
              if (input.substr(pos).match(/^[\]-\uFFFF]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\]-\\uFFFF]");
                }
              }
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos).match(/^[\\"]/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\\\\"]");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
        }
        var result2 = result1 !== null
          ? (function(c) {
              return c.join('');
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DoubleString() {
        var cacheKey = 'DoubleString@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[ -!]/) !== null) {
          var result7 = input.charAt(pos);
          pos++;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("[ -!]");
          }
        }
        if (result7 !== null) {
          var result3 = result7;
        } else {
          if (input.substr(pos).match(/^[#-[]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[#-[]");
            }
          }
          if (result6 !== null) {
            var result3 = result6;
          } else {
            if (input.substr(pos).match(/^[\]-\uFFFF]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[\\]-\\uFFFF]");
              }
            }
            if (result5 !== null) {
              var result3 = result5;
            } else {
              if (input.substr(pos).match(/^[\\']/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\\\']");
                }
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            };
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[ -!]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[ -!]");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            if (input.substr(pos).match(/^[#-[]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[#-[]");
              }
            }
            if (result6 !== null) {
              var result3 = result6;
            } else {
              if (input.substr(pos).match(/^[\]-\uFFFF]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\]-\\uFFFF]");
                }
              }
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos).match(/^[\\']/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\\\']");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
        }
        var result2 = result1 !== null
          ? (function(c) {
              return c.join('');
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();

          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }

          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



        // Utils to establish the right semantic model

        function typeOf(value) {

            var s = typeof value;

            if(s === 'object') {

                if(value) {

                    if(typeof value.length === 'number' &&

                       !(value.propertyIsEnumerable('length')) &&

                       typeof value.splice === 'function') {

                        s = 'array';

                    }

                }

                else {

                    s = 'null';

                }

            }

            return s;

        }



        function append(arr) {

            var str = '';

            if(typeOf(arr) === 'array') {

                for(var i = 0; i < arr.length; i++) {

                    if(typeOf(arr[i]) == 'array') {

                        str += append(arr[i]);

                    }

                    else if (typeof arr[i] === 'object') {

                        str += JSON.stringify(arr[i].object);

                    }

                    else {

                        str += arr[i];

                    }

                }

            }

            else {

                str = str + arr;

            }

            return str;

        }



        function merge(arr) {

            var i, ret = {};

            for(i = 0; i < arr.length; i++) {

                for(p in arr[i]) {

                    ret[p] = arr[i][p];

                }

            }

            return ret;

        }



        function collect(arr, separator, ret, f) {

            for(var i = 0; i < arr.length; i++) {

                if(typeOf(arr[i]) == 'array') {

                    collect(arr[i], separator, ret, f);

                }

                else if(arr[i] != "" && arr[i] != separator) {

                    if(f && arr[i][f]) {

                        ret.push(arr[i][f]);

                    }

                    else {

                        ret.push(arr[i]);

                    }

                }

            }

        }



        function indexOf(names, name) {

            for(var i = 0; i < names.length; i++) {

                if(names[i].name === name) {

                    return i;

                }

            }

            return -1;

        }



        // Split join statements in to main and a joiner. The main statement is the independent

        // and the joiner depends on the outcome of the main statement. In this process, we split

        // the columns in the columns clause across the main and joiner, and merge them at runtime

        // using the 'selected' array below.

        function splitJoins(statement, cb) {

            var main = statement, join, i, cond, column, sel;



            // No need to split since there is no join.

            if(statement.fromClause.length === 1) {

                return main;

            }



            // Can't deal with joins between more than two tables.

            if(statement.fromClause.length > 2) {

                throw new this.SyntaxError("Line: " + statement.line + ": Statement must have no more than two tables in the from clause");

            }



            // Initialize the main statement.

            main = {

                type: 'select',

                line: statement.line,

                columns: [],

                selected: [], // These are the columns to be picked up at the end

                extras: [], // Used only during selection discared laer.

                whereCriteria: []

            };



            if(statement.extras) {

                // These are extra columns included the columns array - contain UDF args not already

                // listed in the columns clause

                main.udfExtras = statement.extras;

            }



            // Initialize the joiner

            join = {

                type: 'select',

                line: statement.line,

                columns: [],

                extras: [], // used only during selection

                whereCriteria: []

            };



            main.fromClause = [statement.fromClause[0]];

            join.fromClause = [statement.fromClause[1]];



            //  Split relevant columns into main and joiner

            for(i = 0; i < statement.columns.length; i++) {

                column = statement.columns[i];

                if(column.operator === 'udf') {

                    // Nothing to do

                }

                else if(column.name.indexOf(main.fromClause[0].alias + '.') === 0) {

                    // Keep it in main

                    if(indexOf(main.columns, column.name) < 0) {

                        main.columns.push(column);

                        sel = {from: 'main'};

                        if(column.alias) {

                            sel.name = column.alias;

                        }

                        else {

                            sel.index = main.columns.length - 1;

                        }

                        if(column.for) sel.for = column.for;

                        main.selected.push(sel);

                    }

                }

                else {

                    // Keep it in join

                    if(indexOf(join.columns, column.name) < 0) {

                        join.columns.push(column);

                        sel = {from: 'joiner'};

                        if(column.alias) {

                            sel.name = column.alias;

                        }

                        else {

                            sel.index = join.columns.length - 1;

                        }

                        if(column.for) sel.for = column.for;

                        main.selected.push(sel);

                    }

                }

            }



            // We need a where clause for the join

            if(!statement.whereCriteria) {

                throw new this.SyntaxError("Line " + statement.line + ": Missing join condition in statement ");

            }



            if(statement.whereCriteria) {

                for(i = 0; i < statement.whereCriteria.length; i++) {

                    cond = statement.whereCriteria[i];

                    if(cond.operator === 'udf') {

                        main.whereCriteria.push(cond);

                    }

                    else if(cond.rhs.type && cond.rhs.type === 'alias') {

                        // This is the join condition

                        var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');

                        if(index === 0) {

                            // Include only once

                            if(indexOf(main.columns, cond.rhs.value) < 0) {

                                var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');

                                main.columns.push({

                                    name: cond.rhs.value,

                                    type: 'column'

                                })

                                if(statement.usingColumnAliases) {

                                    main.columns[main.columns.length - 1].alias = cond.rhs.alias ||

                                              cond.rhs.value.substr(index + main.fromClause[0].alias.length + 1);

                                }

                                main.extras.push(main.columns.length -1);

                            }

                            if(indexOf(join.columns, cond.lhs.name) < 0) {

                                var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');

                                join.columns.push({

                                    name: cond.lhs.name,

                                    type: 'column'

                                });

                                if(statement.usingColumnAliases) {

                                    join.columns[join.columns.length - 1].alias = cond.lhs.alias ||

                                                   cond.lhs.name.substr(index + join.fromClause[0].alias.length + 1)

                                }

                                join.extras.push(join.columns.length - 1);

                            }

                        }

                        else {

                            // Include only once

                            if(indexOf(join.columns, cond.rhs.value) < 0) {

                                var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');

                                join.columns.push({

                                    name: cond.rhs.value,

                                    type: 'column'

                                })

                                if(statement.usingColumnAliases) {

                                    join.columns[join.columns.length - 1].alias = cond.rhs.alias ||

                                            cond.rhs.value.substr(index + join.fromClause[0].alias.length + 1)

                                }

                                join.extras.push(join.columns.length - 1);

                            }

                            if(indexOf(main.columns, cond.lhs.name) < 0) {

                                var index = cond.lhs.name.indexOf(main.fromClause[0].alias + '.');

                                main.columns.push({

                                    name: cond.lhs.name,

                                    type: 'column'

                                });

                                if(statement.usingColumnAliases) {

                                    main.columns[main.columns.length - 1].alias = cond.lhs.alias ||

                                            cond.lhs.name.substr(index + main.fromClause[0].alias.length + 1)

                                }



                                main.extras.push(main.columns.length -1);

                            }

                        }

                        join.whereCriteria.push(cond);

                    }

                    else {

                        if(cond.lhs.name.indexOf(main.fromClause[0].alias + '.') === 0) {

                            main.whereCriteria.push(cond);

                        }

                        else if(cond.lhs.name.indexOf(join.fromClause[0].alias + '.') === 0) {

                            join.whereCriteria.push(cond);

                        }

                    }

                }

            }



            if(join.whereCriteria && join.whereCriteria.length > 0) {

                if(indexOf(main.columns, join.whereCriteria[0].rhs.value) >= 0) {

                    join.whereCriteria[0].rhs.joiningColumn = indexOf(main.columns, join.whereCriteria[0].rhs.value);

                }

                else {

                    // Flip the condition

                    var temp = join.whereCriteria[0].rhs.value;

                    join.whereCriteria[0].rhs.value = join.whereCriteria[0].lhs.name;

                    join.whereCriteria[0].lhs = {

                        name: temp

                    }

                    temp = join.whereCriteria[0].rhs.value;

                    join.whereCriteria[0].rhs.joiningColumn = indexOf(main.columns, temp);

                }

            }

            main.joiner = join;



            // Reset the joiningColumn to the alias where columns are aliased

            // The joining column is an index by default.

            var joiningColumn;

            if(main.columns[join.whereCriteria[0].rhs.joiningColumn].alias) {

                for(var i = 0; i < main.columns.length; i++) {

                    if(main.columns[i].name === main.joiner.whereCriteria[0].rhs.value) {

                        joiningColumn = main.columns[i].alias;

                        break;

                    }

                }

                if(joiningColumn) {

                    main.joiner.whereCriteria[0].rhs.joiningColumn = joiningColumn;

                }

                else {

                    throw new this.SyntaxError("Line " + main.line + ": Joining column " + joiningColumn + " could not resolved. File a bug.");

                }

            }



            // Verify that all columns have prefixes

            for(var i = 0; i < main.columns.length; i++) {

                if(!main.columns[i].operator) {

                    var prefixed = false;

                     for(var j = 0; j < main.fromClause.length; j++) {

                        if(main.columns[i].name.indexOf(main.fromClause[j].alias + '.') === 0) {

                            prefixed = true;

                            break;

                        }

                    }

                    if(!prefixed) {

                        throw new this.SyntaxError("Line " + main.line + ": Column " + main.columns[i].name + " not prefixed or prefix not found");

                    }

                }

            }

            for(var i = 0; i < join.columns.length; i++) {

                if(!join.columns[i].operator) {

                    var prefixed = false;

                    for(var j = 0; j < join.fromClause.length; j++) {

                        if(join.columns[i].name.indexOf(join.fromClause[j].alias + '.') === 0) {

                            prefixed = true;

                            break;

                        }

                    }

                    if(!prefixed) {

                        throw new this.SyntaxError("Line " + main.line + ": Column " + join.columns[i].name + " not prefixed or prefix not found");

                    }

                }

            }



            // Redo the UDF args since the indexes of column type args would be different now

            // The index for each column arg should map to the 'selected' array so that we can pick up

            // values of args from the 'selected' array.

            for(var i = 0; i < main.whereCriteria.length; i++) {

                var where = main.whereCriteria[i];

                if(where.operator === 'udf') {

                    for(var j = 0; j < where.args.length; j++) {

                        if(where.args[j].type === 'column') {

                            // What is the prefix?

                            var index = where.args[j].name.indexOf('.');

                            if(index < 0) {

                                throw new this.SyntaxError("Line " + main.line + ": Arg " + where.args[j].name + " not prefixed");

                            }

                            var prefix = where.args[j].name.substr(0, index);

                            var name = where.args[j].name.substr(index + 1);

                            if(main.fromClause[0].alias === prefix) {

                                // From main - find matching selected[] element where from = main and name = arg.name.

                                for(var selected = 0; selected < main.selected.length; selected++) {

                                    if(main.selected[selected].from === 'main') {

                                        if(main.selected[selected].name && main.selected[selected].name === name) {

                                            where.args[j].index = selected;

                                        }

                                        else if(main.selected[selected].hasOwnProperty('index') &&

                                            main.columns[main.selected[selected].index].name === where.args[j].name) {

                                            where.args[j].index = selected;

                                        }

                                    }

                                }

                            }

                            else if(main.joiner.fromClause[0].alias === prefix) {

                                // From joiner - find matching selected[] element where from = joiner and name = arg.name.

                                for(var selected = 0; selected < main.selected.length; selected++) {

                                    if(main.selected[selected].from === 'joiner') {

                                        if(main.selected[selected].name && main.selected[selected].name === name) {

                                            where.args[j].index = selected;

                                        }

                                        else if(main.selected[selected].hasOwnProperty('index') &&

                                            join.columns[main.selected[selected].index].name === where.args[j].name) {

                                            where.args[j].index = selected;

                                        }

                                    }

                                }

                            }

                            else {

                                throw new this.SyntaxError("Line " + main.line + ": Alias of arg " + where.args[j].name + " not found");

                            }

                        }

                    }

                }

            }



            return main;

        }



        // Symbol table - to check for unreferenced variables

        var symbols = {};

        var lincr = 0;

        var id = 0;



      var result = parseFunctions[startRule]();

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();