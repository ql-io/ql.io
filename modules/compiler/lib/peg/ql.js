module.exports = (function(){
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */

    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\')  // backslash
            .replace(/"/g, '\\"')    // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t')   // horizontal tab
            .replace(/\n/g, '\\n')   // line feed
            .replace(/\f/g, '\\f')   // form feed
            .replace(/\r/g, '\\r')   // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }

    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function(input, startRule) {
            var parseFunctions = {
                "start": parse_start,
                "ClauseCrlf": parse_ClauseCrlf,
                "pClause": parse_pClause,
                "IfClause": parse_IfClause,
                "ElseClause": parse_ElseClause,
                "TryClause": parse_TryClause,
                "CatchClause": parse_CatchClause,
                "FinallyClause": parse_FinallyClause,
                "TryCrlf": parse_TryCrlf,
                "ThrowCrlf": parse_ThrowCrlf,
                "LogicStatement": parse_LogicStatement,
                "LogicParen": parse_LogicParen,
                "LogicPhrase": parse_LogicPhrase,
                "OrPhrase": parse_OrPhrase,
                "OrTail": parse_OrTail,
                "AndPhrase": parse_AndPhrase,
                "AndTail": parse_AndTail,
                "NotPhrase": parse_NotPhrase,
                "NormalPhrase": parse_NormalPhrase,
                "Line": parse_Line,
                "Assign": parse_Assign,
                "Fallback": parse_Fallback,
                "StatementOrObject": parse_StatementOrObject,
                "CallUdf": parse_CallUdf,
                "Statement": parse_Statement,
                "Output": parse_Output,
                "Comment": parse_Comment,
                "LineComment": parse_LineComment,
                "BlockComment": parse_BlockComment,
                "SourceCharacter": parse_SourceCharacter,
                "Connector": parse_Connector,
                "CreateStatement": parse_CreateStatement,
                "Type": parse_Type,
                "Verb": parse_Verb,
                "httpVerb": parse_httpVerb,
                "Required": parse_Required,
                "Variable": parse_Variable,
                "CommaVariable": parse_CommaVariable,
                "Expect": parse_Expect,
                "generalVerb": parse_generalVerb,
                "VerbName": parse_VerbName,
                "GetFrom": parse_GetFrom,
                "PostTo": parse_PostTo,
                "PutTo": parse_PutTo,
                "Delete": parse_Delete,
                "Patch": parse_Patch,
                "UsingDefaults": parse_UsingDefaults,
                "UsingHeaders": parse_UsingHeaders,
                "UsingMonkeyPatch": parse_UsingMonkeyPatch,
                "UsingBodyTemplate": parse_UsingBodyTemplate,
                "WithParts": parse_WithParts,
                "ForEachMember": parse_ForEachMember,
                "WithAliases": parse_WithAliases,
                "AuthenticateUsing": parse_AuthenticateUsing,
                "ResultSet": parse_ResultSet,
                "NVPs": parse_NVPs,
                "CNVP": parse_CNVP,
                "NVP": parse_NVP,
                "Expires": parse_Expires,
                "SelectStatement": parse_SelectStatement,
                "Select": parse_Select,
                "ShowRoutesStatement": parse_ShowRoutesStatement,
                "ShowStatement": parse_ShowStatement,
                "Show": parse_Show,
                "Describe": parse_Describe,
                "DescribeRouteStatement": parse_DescribeRouteStatement,
                "DescribeStatement": parse_DescribeStatement,
                "ColumnsParen": parse_ColumnsParen,
                "ValuesParen": parse_ValuesParen,
                "InsertStatement": parse_InsertStatement,
                "DeleteStatement": parse_DeleteStatement,
                "UpdateStatement": parse_UpdateStatement,
                "ColumnsClause": parse_ColumnsClause,
                "FromClause": parse_FromClause,
                "Source": parse_Source,
                "CommaSource": parse_CommaSource,
                "AliasSource": parse_AliasSource,
                "NonAliasSource": parse_NonAliasSource,
                "WhereClause": parse_WhereClause,
                "Limit": parse_Limit,
                "Offset": parse_Offset,
                "Timeout": parse_Timeout,
                "MinDelay": parse_MinDelay,
                "MaxDelay": parse_MaxDelay,
                "WhereCriteria": parse_WhereCriteria,
                "And": parse_And,
                "Cond": parse_Cond,
                "AndCond": parse_AndCond,
                "EqCond": parse_EqCond,
                "InCond": parse_InCond,
                "CSV": parse_CSV,
                "CommaCSVMember": parse_CommaCSVMember,
                "CSVMember": parse_CSVMember,
                "Ref": parse_Ref,
                "Operator": parse_Operator,
                "RHS": parse_RHS,
                "AliasedRef": parse_AliasedRef,
                "All": parse_All,
                "Fields": parse_Fields,
                "Field": parse_Field,
                "AliasField": parse_AliasField,
                "NonAliasField": parse_NonAliasField,
                "UDF": parse_UDF,
                "UDFParams": parse_UDFParams,
                "UDFParam": parse_UDFParam,
                "LiteralParam": parse_LiteralParam,
                "ParamDigits": parse_ParamDigits,
                "Column": parse_Column,
                "FieldName": parse_FieldName,
                "Selector": parse_Selector,
                "Comma": parse_Comma,
                "Name": parse_Name,
                "Word": parse_Word,
                "WordVal": parse_WordVal,
                "QuotedWordVal": parse_QuotedWordVal,
                "QuotedWord": parse_QuotedWord,
                "sQuotedWord": parse_sQuotedWord,
                "dQuotedWord": parse_dQuotedWord,
                "QuotedDigits": parse_QuotedDigits,
                "sQuotedDigits": parse_sQuotedDigits,
                "dQuotedDigits": parse_dQuotedDigits,
                "Ret": parse_Ret,
                "Return": parse_Return,
                "RetVal": parse_RetVal,
                "RetFallback": parse_RetFallback,
                "RetRef": parse_RetRef,
                "Route": parse_Route,
                "OptParam": parse_OptParam,
                "JSON": parse_JSON,
                "Value": parse_Value,
                "StringVal": parse_StringVal,
                "NumberVal": parse_NumberVal,
                "ArrayVal": parse_ArrayVal,
                "TrueVal": parse_TrueVal,
                "FalseVal": parse_FalseVal,
                "NullVal": parse_NullVal,
                "Object": parse_Object,
                "Struct": parse_Struct,
                "Members": parse_Members,
                "Pair": parse_Pair,
                "Array": parse_Array,
                "Elements": parse_Elements,
                "Number": parse_Number,
                "Int": parse_Int,
                "Frac": parse_Frac,
                "Exp": parse_Exp,
                "e": parse_e,
                "Digits": parse_Digits,
                "True": parse_True,
                "False": parse_False,
                "Null": parse_Null,
                "Comma": parse_Comma,
                "dquote": parse_dquote,
                "squote": parse_squote,
                "insig": parse_insig,
                "sp": parse_sp,
                "crlf": parse_crlf,
                "JSONPath": parse_JSONPath,
                "ExtIdentifier": parse_ExtIdentifier,
                "Indexed": parse_Indexed,
                "Expr": parse_Expr,
                "ExprBlock": parse_ExprBlock,
                "Identifier": parse_Identifier,
                "Descendent": parse_Descendent,
                "Selector": parse_Selector,
                "PositiveNumber": parse_PositiveNumber,
                "StringLiteral": parse_StringLiteral,
                "DoubleString": parse_DoubleString,
                "SingleString": parse_SingleString,
                "dchar": parse_dchar,
                "achar": parse_achar,
                "hexDigit": parse_hexDigit
            };

            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            } else {
                startRule = "start";
            }

            var pos = { offset: 0, line: 1, column: 1, seenCR: false };
            var reportFailures = 0;
            var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
            var rightmostFailuresExpected = [];

            function padLeft(input, padding, length) {
                var result = input;

                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }

                return result;
            }

            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;

                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                } else {
                    escapeChar = 'u';
                    length = 4;
                }

                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }

            function clone(object) {
                var result = {};
                for (var key in object) {
                    result[key] = object[key];
                }
                return result;
            }

            function advance(pos, n) {
                var endOffset = pos.offset + n;

                for (var offset = pos.offset; offset < endOffset; offset++) {
                    var ch = input.charAt(offset);
                    if (ch === "\n") {
                        if (!pos.seenCR) { pos.line++; }
                        pos.column = 1;
                        pos.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        pos.line++;
                        pos.column = 1;
                        pos.seenCR = true;
                    } else {
                        pos.column++;
                        pos.seenCR = false;
                    }
                }

                pos.offset += n;
            }

            function matchFailed(failure) {
                if (pos.offset < rightmostFailuresPos.offset) {
                    return;
                }

                if (pos.offset > rightmostFailuresPos.offset) {
                    rightmostFailuresPos = clone(pos);
                    rightmostFailuresExpected = [];
                }

                rightmostFailuresExpected.push(failure);
            }

            function parse_start() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = [];
                result1 = parse_crlf();
                while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_crlf();
                }
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_ClauseCrlf();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_ClauseCrlf();
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_Return();
                            result3 = result3 !== null ? result3 : "";
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result5 = [];
                                    result6 = parse_crlf();
                                    while (result6 !== null) {
                                        result5.push(result6);
                                        result6 = parse_crlf();
                                    }
                                    if (result5 !== null) {
                                        result6 = parse_insig();
                                        if (result6 !== null) {
                                            result7 = [];
                                            result8 = parse_Comment();
                                            while (result8 !== null) {
                                                result7.push(result8);
                                                result8 = parse_Comment();
                                            }
                                            if (result7 !== null) {
                                                result8 = parse_insig();
                                                if (result8 !== null) {
                                                    result9 = [];
                                                    result10 = parse_crlf();
                                                    while (result10 !== null) {
                                                        result9.push(result10);
                                                        result10 = parse_crlf();
                                                    }
                                                    if (result9 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, larr, r, carr) {
                        ret = [];
                        ret = ret.concat(larr);
                        if(r) {
                            ret.push(r);
                        }
                        ret = ret.concat(carr);
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[7]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ClauseCrlf() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_sp();
                if (result0 !== null) {
                    result1 = parse_pClause();
                    if (result1 === null) {
                        result1 = parse_Line();
                    }
                    if (result1 !== null) {
                        result2 = [];
                        result3 = parse_crlf();
                        while (result3 !== null) {
                            result2.push(result3);
                            result3 = parse_crlf();
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_pClause() {
                var result0;

                result0 = parse_IfClause();
                if (result0 === null) {
                    result0 = parse_TryClause();
                }
                return result0;
            }

            function parse_IfClause() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "if") {
                    result0 = "if";
                    advance(pos, 2);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"if\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_LogicParen();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 123) {
                                    result4 = "{";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"{\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = [];
                                        result7 = parse_TryCrlf();
                                        while (result7 !== null) {
                                            result6.push(result7);
                                            result7 = parse_TryCrlf();
                                        }
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                if (input.charCodeAt(pos.offset) === 125) {
                                                    result8 = "}";
                                                    advance(pos, 1);
                                                } else {
                                                    result8 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"}\"");
                                                    }
                                                }
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        result10 = parse_ElseClause();
                                                        result10 = result10 !== null ? result10 : "";
                                                        if (result10 !== null) {
                                                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, condition, iflines, elselines) {
                        return {
                            id : id++,
                            line : line,
                            type : 'if',
                            condition : condition,
                            if : iflines,
                            else : elselines
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[10]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ElseClause() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 4) === "else") {
                    result0 = "else";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"else\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 123) {
                            result2 = "{";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"{\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = [];
                                result5 = parse_TryCrlf();
                                while (result5 !== null) {
                                    result4.push(result5);
                                    result5 = parse_TryCrlf();
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos.offset) === 125) {
                                            result6 = "}";
                                            advance(pos, 1);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"}\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, larr) {
                        return larr;
                    })(pos0.offset, pos0.line, pos0.column, result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_TryClause() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 3) === "try") {
                    result0 = "try";
                    advance(pos, 3);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"try\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 123) {
                            result2 = "{";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"{\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result5 = parse_TryCrlf();
                                if (result5 !== null) {
                                    result4 = [];
                                    while (result5 !== null) {
                                        result4.push(result5);
                                        result5 = parse_TryCrlf();
                                    }
                                } else {
                                    result4 = null;
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos.offset) === 125) {
                                            result6 = "}";
                                            advance(pos, 1);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"}\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result8 = parse_CatchClause();
                                            if (result8 !== null) {
                                                result7 = [];
                                                while (result8 !== null) {
                                                    result7.push(result8);
                                                    result8 = parse_CatchClause();
                                                }
                                            } else {
                                                result7 = null;
                                            }
                                            if (result7 !== null) {
                                                result8 = parse_FinallyClause();
                                                result8 = result8 !== null ? result8 : "";
                                                if (result8 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, tryClause, catchClause, finallyClause) {
                        var errMap = findThrows(tryClause);
                        for (var i = 0; i < catchClause.length; i++){
                            var catchvars = countLogicVars(catchClause[i].condition);
                            for (var j = 0; j < catchvars.length; j++){
                                var errVar = catchvars[j];
                                if(errMap.indexOf(errVar) == -1){
                                    throw new this.SyntaxError("Line " + line + " exception variable "+errVar+" is not thrown inside the try statement.");
                                }
                            }
                        }
                        var catchConds = [];
                        for(var i = 0; i < catchClause.length; i++){
                            catchConds.push(catchClause[i].condition);
                        }
                        return {
                            id : id++,
                            line : line,
                            type : 'try',
                            dependsOn : tryClause.concat(catchConds),
                            catchClause : catchClause,
                            finallyClause : finallyClause || undefined,
                            lock : false
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[4], result0[7], result0[8]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_CatchClause() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    if (input.substr(pos.offset, 5) === "catch") {
                        result1 = "catch";
                        advance(pos, 5);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"catch\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_LogicParen();
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    if (input.charCodeAt(pos.offset) === 123) {
                                        result5 = "{";
                                        advance(pos, 1);
                                    } else {
                                        result5 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"{\"");
                                        }
                                    }
                                    if (result5 !== null) {
                                        result6 = parse_insig();
                                        if (result6 !== null) {
                                            result7 = [];
                                            result8 = parse_TryCrlf();
                                            while (result8 !== null) {
                                                result7.push(result8);
                                                result8 = parse_TryCrlf();
                                            }
                                            if (result7 !== null) {
                                                result8 = parse_insig();
                                                if (result8 !== null) {
                                                    if (input.charCodeAt(pos.offset) === 125) {
                                                        result9 = "}";
                                                        advance(pos, 1);
                                                    } else {
                                                        result9 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\"}\"");
                                                        }
                                                    }
                                                    if (result9 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, condition, lines) {
                        return {
                            condition : condition,
                            lines : lines
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[3], result0[7]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_FinallyClause() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    if (input.substr(pos.offset, 7) === "finally") {
                        result1 = "finally";
                        advance(pos, 7);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"finally\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos.offset) === 123) {
                                result3 = "{";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"{\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result6 = parse_ClauseCrlf();
                                    if (result6 !== null) {
                                        result5 = [];
                                        while (result6 !== null) {
                                            result5.push(result6);
                                            result6 = parse_ClauseCrlf();
                                        }
                                    } else {
                                        result5 = null;
                                    }
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos.offset) === 125) {
                                            result6 = "}";
                                            advance(pos, 1);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"}\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, lines) {
                        return lines;
                    })(pos0.offset, pos0.line, pos0.column, result0[5]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_TryCrlf() {
                var result0;

                result0 = parse_ThrowCrlf();
                if (result0 === null) {
                    result0 = parse_ClauseCrlf();
                }
                return result0;
            }

            function parse_ThrowCrlf() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_sp();
                if (result0 !== null) {
                    if (input.substr(pos.offset, 5) === "throw") {
                        result1 = "throw";
                        advance(pos, 5);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"throw\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos.offset) === 40) {
                                result3 = "(";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"(\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result5 = parse_Word();
                                    if (result5 !== null) {
                                        result6 = parse_insig();
                                        if (result6 !== null) {
                                            if (input.charCodeAt(pos.offset) === 41) {
                                                result7 = ")";
                                                advance(pos, 1);
                                            } else {
                                                result7 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\")\"");
                                                }
                                            }
                                            if (result7 !== null) {
                                                result8 = parse_insig();
                                                if (result8 !== null) {
                                                    result9 = [];
                                                    result10 = parse_crlf();
                                                    while (result10 !== null) {
                                                        result9.push(result10);
                                                        result10 = parse_crlf();
                                                    }
                                                    if (result9 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, condition) {
                        return {
                            id : id++,
                            line : line,
                            type : 'throw',
                            err : condition
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[5]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_LogicStatement() {
                var result0;

                result0 = parse_LogicParen();
                if (result0 === null) {
                    result0 = parse_LogicPhrase();
                }
                return result0;
            }

            function parse_LogicParen() {
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 40) {
                    result0 = "(";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"(\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_LogicPhrase();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 41) {
                                    result4 = ")";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5];
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) {
                        return p;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_LogicPhrase() {
                var result0;

                result0 = parse_OrPhrase();
                if (result0 === null) {
                    result0 = parse_AndPhrase();
                    if (result0 === null) {
                        result0 = parse_NotPhrase();
                        if (result0 === null) {
                            result0 = parse_NormalPhrase();
                        }
                    }
                }
                return result0;
            }

            function parse_OrPhrase() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_AndPhrase();
                if (result0 === null) {
                    result0 = parse_NotPhrase();
                    if (result0 === null) {
                        result0 = parse_NormalPhrase();
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_OrTail();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s1, sn) {
                        s1.fallback = sn;
                        return s1;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_OrTail() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "||") {
                    result0 = "||";
                    advance(pos, 2);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"||\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_LogicStatement();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_AndPhrase() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_NotPhrase();
                if (result0 === null) {
                    result0 = parse_NormalPhrase();
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_AndTail();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s1, sn) {
                        return {
                            type: 'logic',
                            logic: 'and',
                            id : id++,
                            line : line,
                            values: [s1].concat(sn)
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_AndTail() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "&&") {
                    result0 = "&&";
                    advance(pos, 2);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"&&\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_LogicStatement();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NotPhrase() {
                var result0, result1;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 33) {
                    result0 = "!";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"!\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_LogicParen();
                    if (result1 === null) {
                        result1 = parse_NotPhrase();
                        if (result1 === null) {
                            result1 = parse_NormalPhrase();
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return {
                            type: 'logic',
                            logic : 'not',
                            id : id++,
                            line : line,
                            values : s
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NormalPhrase() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Word();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, w) {
                        return {
                            type: 'logic',
                            logic: 'normal',
                            id : id++,
                            line : line,
                            values: w
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Line() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Assign();
                if (result0 === null) {
                    result0 = parse_Comment();
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, l) {
                        if(l.type !== 'comment') {
                            l.id = id++;
                        }
                        return l;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Assign() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Output();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = parse_Fallback();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos.offset) === 59) {
                                result3 = ";";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\";\"");
                                }
                            }
                            result3 = result3 !== null ? result3 : "";
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, a, s) {
                        if(a) {
                            s.assign = a.assign;
                            s.line = a.line;
                            var next = s.fallback;
                            while(next) {
                                next.id = id++;
                                next.assign = s.assign;
                                next = next.fallback;
                            }
                        }

                        // Add LHS to the symbol table
                        symbols[a.assign] = {};
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Fallback() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1, pos2, pos3;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_StatementOrObject();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        pos2 = clone(pos);
                        pos3 = clone(pos);
                        if (input.substr(pos.offset, 2) === "||") {
                            result2 = "||";
                            advance(pos, 2);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"||\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_Fallback();
                                if (result4 !== null) {
                                    result2 = [result2, result3, result4];
                                } else {
                                    result2 = null;
                                    pos = clone(pos3);
                                }
                            } else {
                                result2 = null;
                                pos = clone(pos3);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos3);
                        }
                        if (result2 !== null) {
                            result2 = (function(offset, line, column, f) { return f; })(pos2.offset, pos2.line, pos2.column, result2[2]);
                        }
                        if (result2 === null) {
                            pos = clone(pos2);
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s1, s2) {
                        if(s2) {
                            s1.fallback = s2;
                        }
                        return s1;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_StatementOrObject() {
                var result0;

                result0 = parse_Statement();
                if (result0 === null) {
                    result0 = parse_Value();
                    if (result0 === null) {
                        result0 = parse_CallUdf();
                    }
                }
                return result0;
            }

            function parse_CallUdf() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_UDF();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, u) {
                        u.type = 'define';
                        u.udf = u.name;
                        delete u.operator;
                        return u;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Statement() {
                var result0;

                result0 = parse_SelectStatement();
                if (result0 === null) {
                    result0 = parse_ShowRoutesStatement();
                    if (result0 === null) {
                        result0 = parse_ShowStatement();
                        if (result0 === null) {
                            result0 = parse_DescribeRouteStatement();
                            if (result0 === null) {
                                result0 = parse_DescribeStatement();
                                if (result0 === null) {
                                    result0 = parse_InsertStatement();
                                    if (result0 === null) {
                                        result0 = parse_DeleteStatement();
                                        if (result0 === null) {
                                            result0 = parse_CreateStatement();
                                            if (result0 === null) {
                                                result0 = parse_UpdateStatement();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_Output() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_Word();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos.offset) === 61) {
                                result3 = "=";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"=\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, w) {
                        return {
                            line: line,
                            assign: w
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Comment() {
                var result0;

                result0 = parse_LineComment();
                if (result0 === null) {
                    result0 = parse_BlockComment();
                }
                return result0;
            }

            function parse_LineComment() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1, pos2, pos3;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "--") {
                    result0 = "--";
                    advance(pos, 2);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"--\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_sp();
                    if (result1 !== null) {
                        result2 = [];
                        pos2 = clone(pos);
                        pos3 = clone(pos);
                        reportFailures++;
                        result3 = parse_crlf();
                        reportFailures--;
                        if (result3 === null) {
                            result3 = "";
                        } else {
                            result3 = null;
                            pos = clone(pos3);
                        }
                        if (result3 !== null) {
                            result4 = parse_SourceCharacter();
                            if (result4 !== null) {
                                result3 = [result3, result4];
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result3 = null;
                            pos = clone(pos2);
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            pos2 = clone(pos);
                            pos3 = clone(pos);
                            reportFailures++;
                            result3 = parse_crlf();
                            reportFailures--;
                            if (result3 === null) {
                                result3 = "";
                            } else {
                                result3 = null;
                                pos = clone(pos3);
                            }
                            if (result3 !== null) {
                                result4 = parse_SourceCharacter();
                                if (result4 !== null) {
                                    result3 = [result3, result4];
                                } else {
                                    result3 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return {
                            line: line,
                            type: 'comment',
                            text: append(c)
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_BlockComment() {
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1, pos2, pos3;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 3) === "/**") {
                    result0 = "/**";
                    advance(pos, 3);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"/**\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "/*") {
                        result0 = "/*";
                        advance(pos, 2);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"/*\"");
                        }
                    }
                }
                if (result0 !== null) {
                    result1 = parse_sp();
                    if (result1 !== null) {
                        result2 = [];
                        pos2 = clone(pos);
                        pos3 = clone(pos);
                        reportFailures++;
                        if (input.substr(pos.offset, 2) === "*/") {
                            result3 = "*/";
                            advance(pos, 2);
                        } else {
                            result3 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"*/\"");
                            }
                        }
                        reportFailures--;
                        if (result3 === null) {
                            result3 = "";
                        } else {
                            result3 = null;
                            pos = clone(pos3);
                        }
                        if (result3 !== null) {
                            result4 = parse_SourceCharacter();
                            if (result4 !== null) {
                                result3 = [result3, result4];
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result3 = null;
                            pos = clone(pos2);
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            pos2 = clone(pos);
                            pos3 = clone(pos);
                            reportFailures++;
                            if (input.substr(pos.offset, 2) === "*/") {
                                result3 = "*/";
                                advance(pos, 2);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"*/\"");
                                }
                            }
                            reportFailures--;
                            if (result3 === null) {
                                result3 = "";
                            } else {
                                result3 = null;
                                pos = clone(pos3);
                            }
                            if (result3 !== null) {
                                result4 = parse_SourceCharacter();
                                if (result4 !== null) {
                                    result3 = [result3, result4];
                                } else {
                                    result3 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_sp();
                            if (result3 !== null) {
                                if (input.substr(pos.offset, 2) === "*/") {
                                    result4 = "*/";
                                    advance(pos, 2);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"*/\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5];
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return {
                            line: line,
                            type: 'comment',
                            text: append(c)
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_SourceCharacter() {
                var result0;

                if (input.length > pos.offset) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("any character");
                    }
                }
                return result0;
            }

            function parse_Connector() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 3) === "via") {
                    result0 = "via";
                    advance(pos, 3);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"via\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Word();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return c;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_CreateStatement() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "create") {
                    result0 = "create";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"create\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 5) === "table") {
                            result2 = "table";
                            advance(pos, 5);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"table\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_NonAliasSource();
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_Connector();
                                        result6 = result6 !== null ? result6 : "";
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = [];
                                                result9 = parse_Verb();
                                                while (result9 !== null) {
                                                    result8.push(result9);
                                                    result9 = parse_Verb();
                                                }
                                                if (result8 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s, connector, v) {

                        var s = {
                            type: 'create',
                            name: s.name,
                            line: line,
                            connector: connector || 'http'
                        };
                        for(i = 0; i < v.length; i++) {
                            //check verb-connector match.
                            switch(connector){
                                case 'http':
                                    var validVerbs = ['get', 'post', 'put', 'delete', 'patch'];
                                    if(validVerbs.indexOf(v[i].method) == -1){
                                        throw new this.SyntaxError("Line " + line + ": unknown verb method " + v[i].method + " found.");
                                    }
                                    break;
                            }
                            s[v[i].type] = v[i];
                            delete v[i].type;
                        }
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[4], result0[6], result0[8]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Type() {
                var result0;

                if (input.substr(pos.offset, 6) === "select") {
                    result0 = "select";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"select\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos.offset, 6) === "insert") {
                        result0 = "insert";
                        advance(pos, 6);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"insert\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos.offset, 6) === "delete") {
                            result0 = "delete";
                            advance(pos, 6);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"delete\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.substr(pos.offset, 6) === "update") {
                                result0 = "update";
                                advance(pos, 6);
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"update\"");
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_Verb() {
                var result0;

                result0 = parse_httpVerb();
                if (result0 === null) {
                    result0 = parse_generalVerb();
                }
                return result0;
            }

            function parse_httpVerb() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "on") {
                    result0 = "on";
                    advance(pos, 2);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"on\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Type();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_VerbName();
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_QuotedWord();
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = parse_WithAliases();
                                                result8 = result8 !== null ? result8 : "";
                                                if (result8 !== null) {
                                                    result9 = parse_UsingHeaders();
                                                    result9 = result9 !== null ? result9 : "";
                                                    if (result9 !== null) {
                                                        result10 = parse_UsingDefaults();
                                                        result10 = result10 !== null ? result10 : "";
                                                        if (result10 !== null) {
                                                            result11 = parse_UsingMonkeyPatch();
                                                            result11 = result11 !== null ? result11 : "";
                                                            if (result11 !== null) {
                                                                result12 = parse_insig();
                                                                if (result12 !== null) {
                                                                    result13 = parse_UsingBodyTemplate();
                                                                    result13 = result13 !== null ? result13 : "";
                                                                    if (result13 !== null) {
                                                                        result14 = parse_insig();
                                                                        if (result14 !== null) {
                                                                            result15 = parse_AuthenticateUsing();
                                                                            result15 = result15 !== null ? result15 : "";
                                                                            if (result15 !== null) {
                                                                                result16 = parse_insig();
                                                                                if (result16 !== null) {
                                                                                    result17 = parse_ResultSet();
                                                                                    result17 = result17 !== null ? result17 : "";
                                                                                    if (result17 !== null) {
                                                                                        result18 = parse_insig();
                                                                                        if (result18 !== null) {
                                                                                            result19 = parse_Expires();
                                                                                            result19 = result19 !== null ? result19 : "";
                                                                                            if (result19 !== null) {
                                                                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                                                                            } else {
                                                                                                result0 = null;
                                                                                                pos = clone(pos1);
                                                                                            }
                                                                                        } else {
                                                                                            result0 = null;
                                                                                            pos = clone(pos1);
                                                                                        }
                                                                                    } else {
                                                                                        result0 = null;
                                                                                        pos = clone(pos1);
                                                                                    }
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = clone(pos1);
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = clone(pos1);
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = clone(pos1);
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, t, m, u, a, h, d, p, b, auth, r, exp) {
                        var ret = {
                            type: t,
                            method: m,
                            uri: u.value,
                            aliases: a || {},
                            headers: h || {},
                            defaults: d || {},
                            body: b,
                            resultSet: r || '',
                            cache: exp || {}
                        };
                        if(auth && auth.length > 0) {
                            ret.auth = auth;
                        }
                        if(p) ret.patch = p;
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4], result0[6], result0[8], result0[9], result0[10], result0[11], result0[13], result0[15], result0[17], result0[19]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Required() {
                var result0;

                if (input.charCodeAt(pos.offset) === 94) {
                    result0 = "^";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"^\"");
                    }
                }
                return result0;
            }

            function parse_Variable() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Required();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Word();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, r, w) {
                        return {
                            name: w,
                            required: !!r
                        };

                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_CommaVariable() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 44) {
                    result0 = ",";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Variable();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, v) {
                        return v;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Expect() {
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "expect") {
                    result0 = "expect";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"expect\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Variable();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = [];
                                result5 = parse_CommaVariable();
                                while (result5 !== null) {
                                    result4.push(result5);
                                    result5 = parse_CommaVariable();
                                }
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, var1, vars) {
                        ret = vars || [];
                        ret.unshift(var1);
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_generalVerb() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 2) === "on") {
                    result0 = "on";
                    advance(pos, 2);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"on\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Type();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.substr(pos.offset, 2) === "do") {
                                    result4 = "do";
                                    advance(pos, 2);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"do\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_Word();
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                if (input.substr(pos.offset, 2) === "at") {
                                                    result8 = "at";
                                                    advance(pos, 2);
                                                } else {
                                                    result8 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"at\"");
                                                    }
                                                }
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        result10 = parse_QuotedWord();
                                                        if (result10 !== null) {
                                                            result11 = parse_insig();
                                                            if (result11 !== null) {
                                                                result12 = parse_WithAliases();
                                                                result12 = result12 !== null ? result12 : "";
                                                                if (result12 !== null) {
                                                                    result13 = parse_UsingHeaders();
                                                                    result13 = result13 !== null ? result13 : "";
                                                                    if (result13 !== null) {
                                                                        result14 = parse_Expect();
                                                                        result14 = result14 !== null ? result14 : "";
                                                                        if (result14 !== null) {
                                                                            result15 = parse_UsingDefaults();
                                                                            result15 = result15 !== null ? result15 : "";
                                                                            if (result15 !== null) {
                                                                                result16 = parse_UsingMonkeyPatch();
                                                                                result16 = result16 !== null ? result16 : "";
                                                                                if (result16 !== null) {
                                                                                    result17 = parse_insig();
                                                                                    if (result17 !== null) {
                                                                                        result18 = parse_UsingBodyTemplate();
                                                                                        result18 = result18 !== null ? result18 : "";
                                                                                        if (result18 !== null) {
                                                                                            result19 = parse_insig();
                                                                                            if (result19 !== null) {
                                                                                                result20 = parse_AuthenticateUsing();
                                                                                                result20 = result20 !== null ? result20 : "";
                                                                                                if (result20 !== null) {
                                                                                                    result21 = parse_insig();
                                                                                                    if (result21 !== null) {
                                                                                                        result22 = parse_ResultSet();
                                                                                                        result22 = result22 !== null ? result22 : "";
                                                                                                        if (result22 !== null) {
                                                                                                            result23 = parse_insig();
                                                                                                            if (result23 !== null) {
                                                                                                                result24 = parse_Expires();
                                                                                                                result24 = result24 !== null ? result24 : "";
                                                                                                                if (result24 !== null) {
                                                                                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24];
                                                                                                                } else {
                                                                                                                    result0 = null;
                                                                                                                    pos = clone(pos1);
                                                                                                                }
                                                                                                            } else {
                                                                                                                result0 = null;
                                                                                                                pos = clone(pos1);
                                                                                                            }
                                                                                                        } else {
                                                                                                            result0 = null;
                                                                                                            pos = clone(pos1);
                                                                                                        }
                                                                                                    } else {
                                                                                                        result0 = null;
                                                                                                        pos = clone(pos1);
                                                                                                    }
                                                                                                } else {
                                                                                                    result0 = null;
                                                                                                    pos = clone(pos1);
                                                                                                }
                                                                                            } else {
                                                                                                result0 = null;
                                                                                                pos = clone(pos1);
                                                                                            }
                                                                                        } else {
                                                                                            result0 = null;
                                                                                            pos = clone(pos1);
                                                                                        }
                                                                                    } else {
                                                                                        result0 = null;
                                                                                        pos = clone(pos1);
                                                                                    }
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = clone(pos1);
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = clone(pos1);
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = clone(pos1);
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, t, m, u, a, h, e, d, p, b, auth, r, exp) {
                        var ret = {
                            type: t,
                            method: m,
                            uri: u.value,
                            aliases: a || {},
                            headers: h || {},
                            expect: e || {},
                            defaults: d || {},
                            body: b,
                            resultSet: r || '',
                            cache: exp || {}
                        };
                        if(auth && auth.length > 0) {
                            ret.auth = auth;
                        }
                        if(p) ret.patch = p;
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[10], result0[12], result0[13], result0[14], result0[15], result0[16], result0[18], result0[20], result0[22], result0[24]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_VerbName() {
                var result0;

                result0 = parse_GetFrom();
                if (result0 === null) {
                    result0 = parse_PostTo();
                    if (result0 === null) {
                        result0 = parse_PutTo();
                        if (result0 === null) {
                            result0 = parse_Delete();
                            if (result0 === null) {
                                result0 = parse_Patch();
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_GetFrom() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 3) === "get") {
                    result0 = "get";
                    advance(pos, 3);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"get\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 4) === "from") {
                            result2 = "from";
                            advance(pos, 4);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"from\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return 'get'
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_PostTo() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 4) === "post") {
                    result0 = "post";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"post\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 2) === "to") {
                            result2 = "to";
                            advance(pos, 2);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"to\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return 'post'
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_PutTo() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 3) === "put") {
                    result0 = "put";
                    advance(pos, 3);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"put\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 2) === "to") {
                            result2 = "to";
                            advance(pos, 2);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"to\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return 'put'
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Delete() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                if (input.substr(pos.offset, 6) === "delete") {
                    result0 = "delete";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"delete\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return 'delete'
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Patch() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                if (input.substr(pos.offset, 5) === "patch") {
                    result0 = "patch";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"patch\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return 'patch'
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_UsingDefaults() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "using") {
                    result0 = "using";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"using\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 8) === "defaults") {
                            result2 = "defaults";
                            advance(pos, 8);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"defaults\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_NVPs();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return merge(d);
                    })(pos0.offset, pos0.line, pos0.column, result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_UsingHeaders() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "using") {
                    result0 = "using";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"using\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 7) === "headers") {
                            result2 = "headers";
                            advance(pos, 7);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"headers\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_NVPs();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return merge(d);
                    })(pos0.offset, pos0.line, pos0.column, result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_UsingMonkeyPatch() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "using") {
                    result0 = "using";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"using\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 5) === "patch") {
                            result2 = "patch";
                            advance(pos, 5);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"patch\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_QuotedWord();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, t) {
                        return t.value;
                    })(pos0.offset, pos0.line, pos0.column, result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_UsingBodyTemplate() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "using") {
                    result0 = "using";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"using\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 12) === "bodyTemplate") {
                            result2 = "bodyTemplate";
                            advance(pos, 12);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"bodyTemplate\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_QuotedWord();
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        if (input.substr(pos.offset, 4) === "type") {
                                            result6 = "type";
                                            advance(pos, 4);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"type\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = parse_QuotedWord();
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        result10 = parse_ForEachMember();
                                                        result10 = result10 !== null ? result10 : "";
                                                        if (result10 !== null) {
                                                            result11 = parse_insig();
                                                            if (result11 !== null) {
                                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, t, m, f) {
                        var ret = {
                            template: t.value,
                            type: m.value
                        }
                        if(f) {
                            ret.foreach = f;
                        }
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[4], result0[8], result0[10]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_WithParts() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 4) === "with") {
                    result0 = "with";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"with\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 5) === "parts") {
                            result2 = "parts";
                            advance(pos, 5);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"parts\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_CSV();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) {
                        return p;
                    })(pos0.offset, pos0.line, pos0.column, result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ForEachMember() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 7) === "foreach") {
                    result0 = "foreach";
                    advance(pos, 7);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"foreach\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_QuotedWord();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, id) {
                        return id.value;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_WithAliases() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 4) === "with") {
                    result0 = "with";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"with\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 7) === "aliases") {
                            result2 = "aliases";
                            advance(pos, 7);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"aliases\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_NVPs();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) {
                        return merge(p);
                    })(pos0.offset, pos0.line, pos0.column, result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_AuthenticateUsing() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 12) === "authenticate") {
                    result0 = "authenticate";
                    advance(pos, 12);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"authenticate\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos.offset, 4) === "auth") {
                        result0 = "auth";
                        advance(pos, 4);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"auth\"");
                        }
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 5) === "using") {
                            result2 = "using";
                            advance(pos, 5);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"using\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_QuotedWord();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, m) {
                        return m.value;
                    })(pos0.offset, pos0.line, pos0.column, result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ResultSet() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 9) === "resultset") {
                    result0 = "resultset";
                    advance(pos, 9);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"resultset\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_QuotedWord();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, r) {
                        return r.value;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NVPs() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_NVP();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_CNVP();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_CNVP();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n, narr) {
                        var ret = [n];
                        ret = ret.concat(narr);
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_CNVP() {
                var result0, result1;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 44) {
                    result0 = ",";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_NVP();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return n;
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NVP() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_Field();
                    if (result1 === null) {
                        result1 = parse_QuotedWord();
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos.offset) === 61) {
                                result3 = "=";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"=\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result5 = parse_RHS();
                                    if (result5 !== null) {
                                        result6 = parse_insig();
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, lhs, rhs) {
                        var  o = {};
                        lhs = lhs.name || lhs;
                        o[lhs.hasOwnProperty('value') ? lhs.value : lhs] = rhs.hasOwnProperty('value') ? rhs.value : rhs;
                        return o;
                    })(pos0.offset, pos0.line, pos0.column, result0[1], result0[5]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Expires() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    if (input.substr(pos.offset, 7) === "expires") {
                        result1 = "expires";
                        advance(pos, 7);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"expires\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_Digits();
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return {
                            expires: d
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_SelectStatement() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Select();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_ColumnsClause();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.substr(pos.offset, 4) === "from") {
                                    result4 = "from";
                                    advance(pos, 4);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"from\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_FromClause();
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = [];
                                                result9 = parse_WhereClause();
                                                while (result9 !== null) {
                                                    result8.push(result9);
                                                    result9 = parse_WhereClause();
                                                }
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        result10 = parse_Limit();
                                                        result10 = result10 !== null ? result10 : "";
                                                        if (result10 !== null) {
                                                            result11 = parse_insig();
                                                            if (result11 !== null) {
                                                                result12 = parse_Offset();
                                                                result12 = result12 !== null ? result12 : "";
                                                                if (result12 !== null) {
                                                                    result13 = parse_insig();
                                                                    if (result13 !== null) {
                                                                        result14 = parse_Timeout();
                                                                        result14 = result14 !== null ? result14 : "";
                                                                        if (result14 !== null) {
                                                                            result15 = parse_insig();
                                                                            if (result15 !== null) {
                                                                                result16 = parse_MinDelay();
                                                                                result16 = result16 !== null ? result16 : "";
                                                                                if (result16 !== null) {
                                                                                    result17 = parse_insig();
                                                                                    if (result17 !== null) {
                                                                                        result18 = parse_MaxDelay();
                                                                                        result18 = result18 !== null ? result18 : "";
                                                                                        if (result18 !== null) {
                                                                                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18];
                                                                                        } else {
                                                                                            result0 = null;
                                                                                            pos = clone(pos1);
                                                                                        }
                                                                                    } else {
                                                                                        result0 = null;
                                                                                        pos = clone(pos1);
                                                                                    }
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = clone(pos1);
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = clone(pos1);
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = clone(pos1);
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s, c, fc, wc, l, o, timeout, minDelay, maxDelay) {
                        var s = {
                            type: s.type,
                            line: s.line,
                            fromClause: fc,
                            columns: c,
                            whereCriteria: wc[0]
                        };
                        if(l) {
                            s.limit = l;
                        }
                        if(o) {
                            s.offset = o;
                        }
                        if(timeout) {
                            s.timeout = timeout;
                        }
                        if(minDelay) {
                            s.minDelay = minDelay;
                        }
                        if(maxDelay) {
                            s.maxDelay = maxDelay;
                        }
                        s.id = id;
                        if(c && c.length > 0 && c[0].alias) {
                            s.usingColumnAliases = true
                        }

                        // Extras from where clause - there are non-literal args of UDFs in the where clause
                        if(s.whereCriteria && typeOf(s.columns) === 'array') {
                            for(var i = 0; i < s.whereCriteria.length; i++) {
                                var where = s.whereCriteria[i];
                                if(where.operator === 'udf') {
                                    for(var j = 0; j < where.args.length; j++) {
                                        if(where.args[j].type === 'column') {
                                            // If this column is not already selected, included it now.
                                            for(var c = 0; c < s.columns.length; c++) {
                                                if(s.columns[c].name === where.args[j].name) {
                                                    if(s.columns[c].alias) {
                                                        where.args[j].alias = s.columns[c].alias
                                                        delete where.args[j].index;
                                                    }
                                                    else {
                                                        where.args[j].index = c;
                                                    }
                                                    break;
                                                }
                                            }
                                            if(!where.args[j].hasOwnProperty('alias') && !where.args[j].hasOwnProperty('index')) {
                                                s.extras = s.extras || [];
                                                s.extras.push(s.columns.length);
                                                var extra = {name: where.args[j].name, type: 'column'};
                                                // Index or name into selected columns
                                                if(s.columns[0].alias) {
                                                    extra.alias = where.args[j].name;
                                                    where.args[j].alias = extra.alias;
                                                }
                                                else {
                                                    where.args[j].index = s.columns.length;
                                                }
                                                extra.for = 'udf';
                                                s.columns.push(extra);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        s = splitJoins(s);
                        delete s.id;
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[6], result0[8], result0[10], result0[12], result0[14], result0[16], result0[18]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Select() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                if (input.substr(pos.offset, 6) === "select") {
                    result0 = "select";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"select\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return {
                            type: 'select',
                            line: line
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ShowRoutesStatement() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Show();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 6) === "routes") {
                            result2 = "routes";
                            advance(pos, 6);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"routes\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return {
                            type: 'show routes',
                            line: s.line
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[0]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ShowStatement() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Show();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 6) === "tables") {
                            result2 = "tables";
                            advance(pos, 6);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"tables\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return {
                            type: 'show',
                            line: s.line
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[0]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Show() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                if (input.substr(pos.offset, 4) === "show") {
                    result0 = "show";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"show\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return {
                            line: line
                        }
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Describe() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                if (input.substr(pos.offset, 8) === "describe") {
                    result0 = "describe";
                    advance(pos, 8);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"describe\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos.offset, 4) === "desc") {
                        result0 = "desc";
                        advance(pos, 4);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"desc\"");
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return {
                            line: line
                        }
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_DescribeRouteStatement() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Describe();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 5) === "route") {
                            result2 = "route";
                            advance(pos, 5);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"route\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_QuotedWord();
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        if (input.substr(pos.offset, 5) === "using") {
                                            result6 = "using";
                                            advance(pos, 5);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"using\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                if (input.substr(pos.offset, 6) === "method") {
                                                    result8 = "method";
                                                    advance(pos, 6);
                                                } else {
                                                    result8 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"method\"");
                                                    }
                                                }
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        if (input.substr(pos.offset, 3) === "get") {
                                                            result10 = "get";
                                                            advance(pos, 3);
                                                        } else {
                                                            result10 = null;
                                                            if (reportFailures === 0) {
                                                                matchFailed("\"get\"");
                                                            }
                                                        }
                                                        if (result10 === null) {
                                                            if (input.substr(pos.offset, 4) === "post") {
                                                                result10 = "post";
                                                                advance(pos, 4);
                                                            } else {
                                                                result10 = null;
                                                                if (reportFailures === 0) {
                                                                    matchFailed("\"post\"");
                                                                }
                                                            }
                                                            if (result10 === null) {
                                                                if (input.substr(pos.offset, 3) === "put") {
                                                                    result10 = "put";
                                                                    advance(pos, 3);
                                                                } else {
                                                                    result10 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\"put\"");
                                                                    }
                                                                }
                                                                if (result10 === null) {
                                                                    if (input.substr(pos.offset, 6) === "delete") {
                                                                        result10 = "delete";
                                                                        advance(pos, 6);
                                                                    } else {
                                                                        result10 = null;
                                                                        if (reportFailures === 0) {
                                                                            matchFailed("\"delete\"");
                                                                        }
                                                                    }
                                                                    if (result10 === null) {
                                                                        if (input.substr(pos.offset, 5) === "patch") {
                                                                            result10 = "patch";
                                                                            advance(pos, 5);
                                                                        } else {
                                                                            result10 = null;
                                                                            if (reportFailures === 0) {
                                                                                matchFailed("\"patch\"");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (result10 !== null) {
                                                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d, p, m) {
                        return {
                            type: 'describe route',
                            line: d.line,
                            path: p,
                            method: m
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4], result0[10]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_DescribeStatement() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Describe();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Source();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d, s) {
                        return {
                            type: 'describe',
                            line: d.line,
                            source: s
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ColumnsParen() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 40) {
                    result0 = "(";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"(\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_ColumnsClause();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 41) {
                                    result4 = ")";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return c
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ValuesParen() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "values") {
                    result0 = "values";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"values\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 40) {
                            result2 = "(";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_CSV();
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos.offset) === 41) {
                                            result6 = ")";
                                            advance(pos, 1);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\")\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, v) {
                        return v
                    })(pos0.offset, pos0.line, pos0.column, result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_InsertStatement() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "insert") {
                    result0 = "insert";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"insert\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_QuotedWord();
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.substr(pos.offset, 4) === "into") {
                                    result4 = "into";
                                    advance(pos, 4);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"into\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_Source();
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = parse_ColumnsParen();
                                                result8 = result8 !== null ? result8 : "";
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        result10 = parse_ValuesParen();
                                                        result10 = result10 !== null ? result10 : "";
                                                        if (result10 !== null) {
                                                            result11 = parse_insig();
                                                            if (result11 !== null) {
                                                                result12 = parse_WithParts();
                                                                result12 = result12 !== null ? result12 : "";
                                                                if (result12 !== null) {
                                                                    result13 = parse_Timeout();
                                                                    result13 = result13 !== null ? result13 : "";
                                                                    if (result13 !== null) {
                                                                        result14 = parse_insig();
                                                                        if (result14 !== null) {
                                                                            result15 = parse_MinDelay();
                                                                            result15 = result15 !== null ? result15 : "";
                                                                            if (result15 !== null) {
                                                                                result16 = parse_insig();
                                                                                if (result16 !== null) {
                                                                                    result17 = parse_MaxDelay();
                                                                                    result17 = result17 !== null ? result17 : "";
                                                                                    if (result17 !== null) {
                                                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17];
                                                                                    } else {
                                                                                        result0 = null;
                                                                                        pos = clone(pos1);
                                                                                    }
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = clone(pos1);
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = clone(pos1);
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = clone(pos1);
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, j, s, c, v, wp, timeout, minDelay, maxDelay) {
                        if (j && (c || v)){
                            throw new this.SyntaxError("Line " + line + ": Inserting JSON object cannot co-exist with name value pairs or opaque body.");
                        }
                        if (!v && c){
                            throw new this.SyntaxError("Line " + line + ": Values are required if columns are specified.");
                        }
                        if(c && c.length != v.value.length) {
                            throw new this.SyntaxError("Line " + line + ": Number of values does not match number of columns.");
                        }
                        if (!c && v && v.value.length > 1){
                            throw new this.SyntaxError("Line " + line + ": Values do not have paired columns.");
                        }
                        ret = {
                            type: 'insert',
                            source: s,
                            values: v.value,
                            line: line
                        }
                        if(timeout) {
                            ret.timeout = timeout;
                        }
                        if(minDelay) {
                            ret.minDelay = minDelay;
                        }
                        if(maxDelay) {
                            ret.maxDelay = maxDelay;
                        }

                        if (v){
                            if (c){
                                ret.columns = c,
                                    ret.values = v.value;
                            }else{
                                ret.values = v.value[0];
                            }
                        }
                        if (wp){
                            ret.parts = wp.value;
                        }
                        if (j){
                            ret.jsonObj = j;
                        }
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[8], result0[10], result0[12], result0[13], result0[15], result0[17]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_DeleteStatement() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "delete") {
                    result0 = "delete";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"delete\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 4) === "from") {
                            result2 = "from";
                            advance(pos, 4);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"from\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_Source();
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = [];
                                        result7 = parse_WhereClause();
                                        while (result7 !== null) {
                                            result6.push(result7);
                                            result7 = parse_WhereClause();
                                        }
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = parse_Timeout();
                                                result8 = result8 !== null ? result8 : "";
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        result10 = parse_MinDelay();
                                                        result10 = result10 !== null ? result10 : "";
                                                        if (result10 !== null) {
                                                            result11 = parse_insig();
                                                            if (result11 !== null) {
                                                                result12 = parse_MaxDelay();
                                                                result12 = result12 !== null ? result12 : "";
                                                                if (result12 !== null) {
                                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s, wc, timeout, minDelay, maxDelay) {
                        var s = {
                            type: 'delete',
                            source: s,
                            whereCriteria: wc[0],
                            line: line
                        }

                        if(timeout) {
                            s.timeout = timeout;
                        }
                        if(minDelay) {
                            s.minDelay = minDelay;
                        }
                        if(maxDelay) {
                            s.maxDelay = maxDelay;
                        }
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[4], result0[6], result0[8], result0[10], result0[12]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_UpdateStatement() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "update") {
                    result0 = "update";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"update\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Source();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.substr(pos.offset, 4) === "with") {
                                    result4 = "with";
                                    advance(pos, 4);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"with\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_QuotedWord();
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = parse_Timeout();
                                                result8 = result8 !== null ? result8 : "";
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        result10 = parse_MinDelay();
                                                        result10 = result10 !== null ? result10 : "";
                                                        if (result10 !== null) {
                                                            result11 = parse_insig();
                                                            if (result11 !== null) {
                                                                result12 = parse_MaxDelay();
                                                                result12 = result12 !== null ? result12 : "";
                                                                if (result12 !== null) {
                                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s, w, timeout, minDelay, maxDelay) {

                        var u = {
                            type: 'update',
                            source : s,
                            withClause: w,
                            line: line
                        };

                        if(timeout) {
                            u.timeout = timeout;
                        }
                        if(minDelay) {
                            u.minDelay = minDelay;
                        }
                        if(maxDelay) {
                            u.maxDelay = maxDelay;
                        }
                        return u;
                    })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6], result0[8], result0[10], result0[12]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ColumnsClause() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_All();
                if (result0 === null) {
                    result0 = parse_Fields();
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, arr) {
                        var aliasCount = 0;
                        for(var i = 0; i < arr.length; i++) {
                            if(arr[i].alias) {
                                aliasCount++;
                            }
                        }
                        if(aliasCount > 0 && aliasCount != arr.length) {
                            throw new this.SyntaxError("Line " + line + ": Not all selected columns are using aliases.");
                        }
                        return arr;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_FromClause() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result1 = parse_Source();
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_Source();
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_CommaSource();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_CommaSource();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s, sarr) {
                        return s.concat(sarr);
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Source() {
                var result0;

                result0 = parse_AliasSource();
                if (result0 === null) {
                    result0 = parse_NonAliasSource();
                }
                return result0;
            }

            function parse_CommaSource() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_Comma();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_Source();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return s;
                    })(pos0.offset, pos0.line, pos0.column, result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_AliasSource() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Name();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 2) === "as") {
                            result2 = "as";
                            advance(pos, 2);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"as\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_Name();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s, a) {
                        if(symbols[s]) {
                            s = "{" + s + "}";
                        }
                        return {name: s, alias: a};
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NonAliasSource() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Name();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        if(symbols[s]) {
                            s = "{" + s + "}";
                        }
                        return {name: s};
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_WhereClause() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "where") {
                    result0 = "where";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"where\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_WhereCriteria();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, w) {
                        return w;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Limit() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 5) === "limit") {
                    result0 = "limit";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"limit\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Digits();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return n;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Offset() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "offset") {
                    result0 = "offset";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"offset\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Digits();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return n;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Timeout() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 7).toLowerCase() === "timeout") {
                    result0 = input.substr(pos.offset, 7);
                    advance(pos, 7);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"timeout\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Digits();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return n;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_MinDelay() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 8).toLowerCase() === "mindelay") {
                    result0 = input.substr(pos.offset, 8);
                    advance(pos, 8);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"minDelay\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Digits();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return n;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_MaxDelay() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 8).toLowerCase() === "maxdelay") {
                    result0 = input.substr(pos.offset, 8);
                    advance(pos, 8);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"maxDelay\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Digits();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return n;
                    })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_WhereCriteria() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Cond();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_AndCond();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_AndCond();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c, carr) {
                        var ret = [c];
                        ret = ret.concat(carr);
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_And() {
                var result0;

                if (input.substr(pos.offset, 3) === "and") {
                    result0 = "and";
                    advance(pos, 3);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"and\"");
                    }
                }
                return result0;
            }

            function parse_Cond() {
                var result0;

                result0 = parse_EqCond();
                if (result0 === null) {
                    result0 = parse_InCond();
                    if (result0 === null) {
                        result0 = parse_UDF();
                    }
                }
                return result0;
            }

            function parse_AndCond() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_And();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_Cond();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return c;
                    })(pos0.offset, pos0.line, pos0.column, result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_EqCond() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_Field();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_Operator();
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result5 = parse_RHS();
                                    if (result5 !== null) {
                                        result6 = parse_insig();
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, lhs, rhs) {
                        return {operator : '=', lhs : lhs, rhs : rhs};
                    })(pos0.offset, pos0.line, pos0.column, result0[1], result0[5]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_InCond() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Name();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 2) === "in") {
                            result2 = "in";
                            advance(pos, 2);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"in\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 40) {
                                    result4 = "(";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_SelectStatement();
                                        if (result6 === null) {
                                            result6 = parse_CSV();
                                        }
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                if (input.charCodeAt(pos.offset) === 41) {
                                                    result8 = ")";
                                                    advance(pos, 1);
                                                } else {
                                                    result8 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\")\"");
                                                    }
                                                }
                                                if (result8 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, lhs, rhs) {
                        return {operator : 'in', lhs : {name: lhs}, rhs: rhs};
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[6]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_CSV() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_CSVMember();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = [];
                            result4 = parse_CommaCSVMember();
                            while (result4 !== null) {
                                result3.push(result4);
                                result4 = parse_CommaCSVMember();
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c, carr) {
                        var res = [c.value || c];
                        collect(carr,',', res, 'value');
                        return {
                            value: res
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_CommaCSVMember() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_Comma();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_CSVMember();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, v) {
                        return v;
                    })(pos0.offset, pos0.line, pos0.column, result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_CSVMember() {
                var result0;

                result0 = parse_QuotedWord();
                if (result0 === null) {
                    result0 = parse_QuotedDigits();
                    if (result0 === null) {
                        result0 = parse_Digits();
                        if (result0 === null) {
                            result0 = parse_Ref();
                        }
                    }
                }
                return result0;
            }

            function parse_Ref() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Name();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, i) {
                        return {
                            value: "{" + i + "}"
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Operator() {
                var result0, result1, result2;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 61) {
                        result1 = "=";
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"=\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    result0 = parse_insig();
                    if (result0 !== null) {
                        if (input.substr(pos.offset, 2) === "in") {
                            result1 = "in";
                            advance(pos, 2);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"in\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_insig();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                }
                return result0;
            }

            function parse_RHS() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_QuotedWord();
                if (result0 === null) {
                    result0 = parse_QuotedDigits();
                    if (result0 === null) {
                        result0 = parse_Digits();
                        if (result0 === null) {
                            result0 = parse_AliasedRef();
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, r) {
                        if(!r.hasOwnProperty('value')) {
                            r = {
                                value: r
                            }
                        }
                        return r;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_AliasedRef() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_JSONPath();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) {
                        return {
                            type: 'alias',
                            value: p
                        };
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_All() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                if (input.charCodeAt(pos.offset) === 42) {
                    result0 = "*";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"*\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return {
                            name: '*',
                            type: 'column'
                        }
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Fields() {
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1, pos2;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Field();
                if (result0 !== null) {
                    result1 = [];
                    pos2 = clone(pos);
                    result2 = parse_insig();
                    if (result2 !== null) {
                        result3 = parse_Comma();
                        if (result3 !== null) {
                            result4 = parse_insig();
                            if (result4 !== null) {
                                result5 = parse_Field();
                                if (result5 !== null) {
                                    result2 = [result2, result3, result4, result5];
                                } else {
                                    result2 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result2 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos2);
                        }
                    } else {
                        result2 = null;
                        pos = clone(pos2);
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        pos2 = clone(pos);
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_Comma();
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result5 = parse_Field();
                                    if (result5 !== null) {
                                        result2 = [result2, result3, result4, result5];
                                    } else {
                                        result2 = null;
                                        pos = clone(pos2);
                                    }
                                } else {
                                    result2 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result2 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos2);
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, arr) {
                        var res = [];
                        collect(arr, ",", res);
                        return res;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Field() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_AliasField();
                if (result0 === null) {
                    result0 = parse_NonAliasField();
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, f) {
                        return f;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_AliasField() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_NonAliasField();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 2) === "as") {
                            result2 = "as";
                            advance(pos, 2);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"as\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_Name();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n, a) {
                        if(symbols[n]) {
                            n = "{" + n + "}";
                        }
                        n.alias = a;
                        return n;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NonAliasField() {
                var result0;

                result0 = parse_UDF();
                if (result0 === null) {
                    result0 = parse_Column();
                }
                return result0;
            }

            function parse_UDF() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Name();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 40) {
                            result2 = "(";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_UDFParams();
                                result4 = result4 !== null ? result4 : "";
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos.offset) === 41) {
                                            result6 = ")";
                                            advance(pos, 1);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\")\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, name, p) {
                        return {
                            operator: 'udf',
                            name: name,
                            args: p
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_UDFParams() {
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1, pos2;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_UDFParam();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = [];
                        pos2 = clone(pos);
                        result3 = parse_Comma();
                        if (result3 !== null) {
                            result4 = parse_insig();
                            if (result4 !== null) {
                                result5 = parse_UDFParam();
                                if (result5 !== null) {
                                    result3 = [result3, result4, result5];
                                } else {
                                    result3 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result3 = null;
                            pos = clone(pos2);
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            pos2 = clone(pos);
                            result3 = parse_Comma();
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result5 = parse_UDFParam();
                                    if (result5 !== null) {
                                        result3 = [result3, result4, result5];
                                    } else {
                                        result3 = null;
                                        pos = clone(pos2);
                                    }
                                } else {
                                    result3 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c, carr) {
                        var res = [c];
                        collect(carr,',', res);
                        return res;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_UDFParam() {
                var result0;

                result0 = parse_LiteralParam();
                if (result0 === null) {
                    result0 = parse_Column();
                }
                return result0;
            }

            function parse_LiteralParam() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_JSON();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, j) {
                        return {
                            type: 'literal',
                            value: j
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ParamDigits() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Digits();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return {
                            type: 'literal',
                            value: d
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Column() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_JSONPath();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) {
                        return {
                            type: 'column',
                            name: p
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_FieldName() {
                var result0, result1, result2, result3;
                var pos0, pos1, pos2;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Selector();
                if (result0 !== null) {
                    result1 = [];
                    pos2 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 46) {
                        result2 = ".";
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("\".\"");
                        }
                    }
                    if (result2 !== null) {
                        result3 = parse_Selector();
                        if (result3 !== null) {
                            result2 = [result2, result3];
                        } else {
                            result2 = null;
                            pos = clone(pos2);
                        }
                    } else {
                        result2 = null;
                        pos = clone(pos2);
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        pos2 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 46) {
                            result2 = ".";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_Selector();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos2);
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, chars) {
                        return append(chars);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Selector() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                result0 = parse_Word();
                if (result0 !== null) {
                    result1 = [];
                    pos1 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 91) {
                        result2 = "[";
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"[\"");
                        }
                    }
                    if (result2 !== null) {
                        result3 = parse_Digits();
                        if (result3 === null) {
                            result3 = parse_QuotedWordVal();
                            if (result3 === null) {
                                if (input.charCodeAt(pos.offset) === 42) {
                                    result3 = "*";
                                    advance(pos, 1);
                                } else {
                                    result3 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"*\"");
                                    }
                                }
                                if (result3 === null) {
                                    result3 = parse_JSONPath();
                                }
                            }
                        }
                        if (result3 !== null) {
                            if (input.charCodeAt(pos.offset) === 93) {
                                result4 = "]";
                                advance(pos, 1);
                            } else {
                                result4 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"]\"");
                                }
                            }
                            if (result4 !== null) {
                                result2 = [result2, result3, result4];
                            } else {
                                result2 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result2 = null;
                        pos = clone(pos1);
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        pos1 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 91) {
                            result2 = "[";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"[\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_Digits();
                            if (result3 === null) {
                                result3 = parse_QuotedWordVal();
                                if (result3 === null) {
                                    if (input.charCodeAt(pos.offset) === 42) {
                                        result3 = "*";
                                        advance(pos, 1);
                                    } else {
                                        result3 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"*\"");
                                        }
                                    }
                                    if (result3 === null) {
                                        result3 = parse_JSONPath();
                                    }
                                }
                            }
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 93) {
                                    result4 = "]";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result2 = [result2, result3, result4];
                                } else {
                                    result2 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result2 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos1);
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    result0 = parse_Word();
                }
                return result0;
            }

            function parse_Comma() {
                var result0;

                if (input.charCodeAt(pos.offset) === 44) {
                    result0 = ",";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                return result0;
            }

            function parse_Name() {
                var result0, result1, result2, result3;
                var pos0, pos1, pos2;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Word();
                if (result0 !== null) {
                    result1 = [];
                    pos2 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 46) {
                        result2 = ".";
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("\".\"");
                        }
                    }
                    if (result2 !== null) {
                        result3 = parse_Word();
                        if (result3 !== null) {
                            result2 = [result2, result3];
                        } else {
                            result2 = null;
                            pos = clone(pos2);
                        }
                    } else {
                        result2 = null;
                        pos = clone(pos2);
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        pos2 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 46) {
                            result2 = ".";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_Word();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos2);
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, obj) {
                        return append(obj);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Word() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (/^[a-zA-Z$:]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[a-zA-Z$:]");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[a-zA-Z_0-9:]/.test(input.charAt(pos.offset))) {
                        result2 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-zA-Z_0-9:]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[a-zA-Z_0-9:]/.test(input.charAt(pos.offset))) {
                            result2 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[a-zA-Z_0-9:]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, chars) {
                        var ret = chars[0];
                        for(i = 1; i < chars.length; i++) {
                            ret = ret + chars[i].join('');
                        }
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_WordVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_QuotedWord();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, q) {
                        return q.value;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_QuotedWordVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_QuotedWord();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, q) {
                        return '"' + q.value + '"';
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_QuotedWord() {
                var result0;

                result0 = parse_sQuotedWord();
                if (result0 === null) {
                    result0 = parse_dQuotedWord();
                }
                return result0;
            }

            function parse_sQuotedWord() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 39) {
                    result0 = "'";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"'\"");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[^']/.test(input.charAt(pos.offset))) {
                        result2 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[^']");
                        }
                    }
                    if (result2 === null) {
                        if (input.charCodeAt(pos.offset) === 32) {
                            result2 = " ";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\" \"");
                            }
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[^']/.test(input.charAt(pos.offset))) {
                            result2 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[^']");
                            }
                        }
                        if (result2 === null) {
                            if (input.charCodeAt(pos.offset) === 32) {
                                result2 = " ";
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\" \"");
                                }
                            }
                        }
                    }
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 39) {
                            result2 = "'";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"'\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return {
                            value: c.join('')
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_dQuotedWord() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 34) {
                    result0 = "\"";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\\"\"");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[^"]/.test(input.charAt(pos.offset))) {
                        result2 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[^\"]");
                        }
                    }
                    if (result2 === null) {
                        if (input.charCodeAt(pos.offset) === 32) {
                            result2 = " ";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\" \"");
                            }
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[^"]/.test(input.charAt(pos.offset))) {
                            result2 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[^\"]");
                            }
                        }
                        if (result2 === null) {
                            if (input.charCodeAt(pos.offset) === 32) {
                                result2 = " ";
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\" \"");
                                }
                            }
                        }
                    }
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 34) {
                            result2 = "\"";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"\\\"\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return {
                            value: c.join('')
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_QuotedDigits() {
                var result0;

                result0 = parse_sQuotedDigits();
                if (result0 === null) {
                    result0 = parse_dQuotedDigits();
                }
                return result0;
            }

            function parse_sQuotedDigits() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 39) {
                    result0 = "'";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"'\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_Digits();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 39) {
                            result2 = "'";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"'\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return {
                            value: d
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_dQuotedDigits() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 34) {
                    result0 = "\"";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\\"\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_Digits();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 34) {
                            result2 = "\"";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"\\\"\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return {
                            value: d
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Ret() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                if (input.substr(pos.offset, 6) === "return") {
                    result0 = "return";
                    advance(pos, 6);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"return\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return {
                            line: line
                        }
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Return() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Ret();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_RetFallback();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_Route();
                                result4 = result4 !== null ? result4 : "";
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos.offset) === 59) {
                                            result6 = ";";
                                            advance(pos, 1);
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\";\"");
                                            }
                                        }
                                        result6 = result6 !== null ? result6 : "";
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, re, o, r) {
                        var ret = {
                            type: 'return',
                            line: re.line,
                            id: id++,
                            rhs: o
                        };
                        if(!o.hasOwnProperty(id)) {
                            o.id = id++;
                        }
                        if(r) {
                            ret.route = r;
                        }
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_RetVal() {
                var result0;

                result0 = parse_Statement();
                if (result0 === null) {
                    result0 = parse_CallUdf();
                    if (result0 === null) {
                        result0 = parse_RetRef();
                        if (result0 === null) {
                            result0 = parse_Value();
                        }
                    }
                }
                return result0;
            }

            function parse_RetFallback() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1, pos2, pos3;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_RetVal();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        pos2 = clone(pos);
                        pos3 = clone(pos);
                        if (input.substr(pos.offset, 2) === "||") {
                            result2 = "||";
                            advance(pos, 2);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"||\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_RetFallback();
                                if (result4 !== null) {
                                    result2 = [result2, result3, result4];
                                } else {
                                    result2 = null;
                                    pos = clone(pos3);
                                }
                            } else {
                                result2 = null;
                                pos = clone(pos3);
                            }
                        } else {
                            result2 = null;
                            pos = clone(pos3);
                        }
                        if (result2 !== null) {
                            result2 = (function(offset, line, column, f) { return f; })(pos2.offset, pos2.line, pos2.column, result2[2]);
                        }
                        if (result2 === null) {
                            pos = clone(pos2);
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s1, s2) {
                        if(s2) {
                            s1.fallback = s2;
                            if(!s2.hasOwnProperty('id')) {
                                s2.id = id++;
                            }
                        }
                        return s1;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_RetRef() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Word();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, o) {
                        if(symbols[o] === undefined) {
                            throw new this.SyntaxError("Line " + line + ": Unresolved symbol '" + o + "'");
                        }
                        return {
                            ref: o,
                            type: 'ref'
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Route() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 3) === "via") {
                    result0 = "via";
                    advance(pos, 3);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"via\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 5) === "route") {
                            result2 = "route";
                            advance(pos, 5);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"route\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_QuotedWord();
                                if (result4 !== null) {
                                    result5 = parse_insig();
                                    if (result5 !== null) {
                                        result6 = parse_OptParam();
                                        result6 = result6 !== null ? result6 : "";
                                        if (result6 !== null) {
                                            result7 = parse_insig();
                                            if (result7 !== null) {
                                                result8 = parse_UsingDefaults();
                                                result8 = result8 !== null ? result8 : "";
                                                if (result8 !== null) {
                                                    result9 = parse_insig();
                                                    if (result9 !== null) {
                                                        if (input.substr(pos.offset, 5) === "using") {
                                                            result10 = "using";
                                                            advance(pos, 5);
                                                        } else {
                                                            result10 = null;
                                                            if (reportFailures === 0) {
                                                                matchFailed("\"using\"");
                                                            }
                                                        }
                                                        if (result10 !== null) {
                                                            result11 = parse_insig();
                                                            if (result11 !== null) {
                                                                if (input.substr(pos.offset, 6) === "method") {
                                                                    result12 = "method";
                                                                    advance(pos, 6);
                                                                } else {
                                                                    result12 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\"method\"");
                                                                    }
                                                                }
                                                                if (result12 !== null) {
                                                                    result13 = parse_insig();
                                                                    if (result13 !== null) {
                                                                        if (input.substr(pos.offset, 3) === "get") {
                                                                            result14 = "get";
                                                                            advance(pos, 3);
                                                                        } else {
                                                                            result14 = null;
                                                                            if (reportFailures === 0) {
                                                                                matchFailed("\"get\"");
                                                                            }
                                                                        }
                                                                        if (result14 === null) {
                                                                            if (input.substr(pos.offset, 4) === "post") {
                                                                                result14 = "post";
                                                                                advance(pos, 4);
                                                                            } else {
                                                                                result14 = null;
                                                                                if (reportFailures === 0) {
                                                                                    matchFailed("\"post\"");
                                                                                }
                                                                            }
                                                                            if (result14 === null) {
                                                                                if (input.substr(pos.offset, 3) === "put") {
                                                                                    result14 = "put";
                                                                                    advance(pos, 3);
                                                                                } else {
                                                                                    result14 = null;
                                                                                    if (reportFailures === 0) {
                                                                                        matchFailed("\"put\"");
                                                                                    }
                                                                                }
                                                                                if (result14 === null) {
                                                                                    if (input.substr(pos.offset, 6) === "delete") {
                                                                                        result14 = "delete";
                                                                                        advance(pos, 6);
                                                                                    } else {
                                                                                        result14 = null;
                                                                                        if (reportFailures === 0) {
                                                                                            matchFailed("\"delete\"");
                                                                                        }
                                                                                    }
                                                                                    if (result14 === null) {
                                                                                        if (input.substr(pos.offset, 5) === "patch") {
                                                                                            result14 = "patch";
                                                                                            advance(pos, 5);
                                                                                        } else {
                                                                                            result14 = null;
                                                                                            if (reportFailures === 0) {
                                                                                                matchFailed("\"patch\"");
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        if (result14 !== null) {
                                                                            result15 = parse_insig();
                                                                            if (result15 !== null) {
                                                                                result16 = parse_UsingHeaders();
                                                                                result16 = result16 !== null ? result16 : "";
                                                                                if (result16 !== null) {
                                                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = clone(pos1);
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = clone(pos1);
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = clone(pos1);
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = clone(pos1);
                                                }
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p, op, d, m, h) {
                        return {
                            path: p,
                            method: m,
                            headers: h || {},
                            optparam: op || false,
                            defaults: d || {}
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0[4], result0[6], result0[8], result0[14], result0[16]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_OptParam() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 4) === "with") {
                    result0 = "with";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"with\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        if (input.substr(pos.offset, 8) === "optional") {
                            result2 = "optional";
                            advance(pos, 8);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"optional\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.substr(pos.offset, 6) === "params") {
                                    result4 = "params";
                                    advance(pos, 6);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"params\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return true;
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_JSON() {
                var result0;

                result0 = parse_Object();
                if (result0 === null) {
                    result0 = parse_StringVal();
                    if (result0 === null) {
                        result0 = parse_NumberVal();
                        if (result0 === null) {
                            result0 = parse_ArrayVal();
                            if (result0 === null) {
                                result0 = parse_TrueVal();
                                if (result0 === null) {
                                    result0 = parse_FalseVal();
                                    if (result0 === null) {
                                        result0 = parse_NullVal();
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_Value() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_JSON();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, v) {
                        return {
                            object: v === "__null__" ? null : v,
                            type: 'define',
                            line: line
                        }
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_StringVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_StringLiteral();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        var s = append(s);
                        return s.substr(1, s.length - 2);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NumberVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Number();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return parseFloat(append(n));
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ArrayVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Array();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return JSON.parse(append(n));
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_TrueVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_True();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, t) {
                        return JSON.parse(t);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_FalseVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_False();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, f) {
                        return JSON.parse(f);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_NullVal() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Null();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, n) {
                        return "__null__";
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Object() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Struct();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, o) {
                        var str = append(o);
                        return JSON.parse(str);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Struct() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 123) {
                        result1 = "{";
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"{\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            result3 = parse_Members();
                            result3 = result3 !== null ? result3 : "";
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    if (input.charCodeAt(pos.offset) === 125) {
                                        result5 = "}";
                                        advance(pos, 1);
                                    } else {
                                        result5 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                        }
                                    }
                                    if (result5 !== null) {
                                        result6 = parse_insig();
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos0);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos0);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Members() {
                var result0, result1, result2, result3, result4;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Pair();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Comma();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_Members();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    result0 = parse_insig();
                    if (result0 !== null) {
                        result1 = parse_Pair();
                        if (result1 !== null) {
                            result2 = parse_insig();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                }
                return result0;
            }

            function parse_Pair() {
                var result0, result1, result2, result3, result4, result5, result6;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_insig();
                if (result0 !== null) {
                    result1 = parse_StringLiteral();
                    if (result1 !== null) {
                        result2 = parse_insig();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos.offset) === 58) {
                                result3 = ":";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = parse_insig();
                                if (result4 !== null) {
                                    result5 = parse_Value();
                                    if (result5 !== null) {
                                        result6 = parse_insig();
                                        if (result6 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                                        } else {
                                            result0 = null;
                                            pos = clone(pos0);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos0);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Array() {
                var result0, result1, result2, result3, result4;
                var pos0;

                pos0 = clone(pos);
                if (input.charCodeAt(pos.offset) === 91) {
                    result0 = "[";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"[\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Elements();
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 93) {
                                    result4 = "]";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Elements() {
                var result0, result1, result2, result3, result4;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_Value();
                if (result0 !== null) {
                    result1 = parse_insig();
                    if (result1 !== null) {
                        result2 = parse_Comma();
                        if (result2 !== null) {
                            result3 = parse_insig();
                            if (result3 !== null) {
                                result4 = parse_Elements();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = clone(pos0);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos0);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    result0 = parse_Value();
                }
                return result0;
            }

            function parse_Number() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Int();
                if (result0 !== null) {
                    result1 = parse_Frac();
                    if (result1 !== null) {
                        result2 = parse_Exp();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 === null) {
                    pos1 = clone(pos);
                    result0 = parse_Int();
                    if (result0 !== null) {
                        result1 = parse_Frac();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                    if (result0 === null) {
                        pos1 = clone(pos);
                        result0 = parse_Int();
                        if (result0 !== null) {
                            result1 = parse_Exp();
                            if (result1 !== null) {
                                result0 = [result0, result1];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                        if (result0 === null) {
                            result0 = parse_Int();
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return append(c);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Int() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                if (input.charCodeAt(pos.offset) === 43) {
                    result0 = "+";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"+\"");
                    }
                }
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = parse_Digits();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 45) {
                        result0 = "-";
                        advance(pos, 1);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"-\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_Digits();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = clone(pos0);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                }
                return result0;
            }

            function parse_Frac() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                if (input.charCodeAt(pos.offset) === 46) {
                    result0 = ".";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\".\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_Digits();
                    result1 = result1 !== null ? result1 : "";
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Exp() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_e();
                if (result0 !== null) {
                    result1 = parse_Int();
                    result1 = result1 !== null ? result1 : "";
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos0);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_e() {
                var result0;

                if (input.charCodeAt(pos.offset) === 101) {
                    result0 = "e";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"e\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "e+") {
                        result0 = "e+";
                        advance(pos, 2);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"e+\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos.offset, 2) === "e-") {
                            result0 = "e-";
                            advance(pos, 2);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"e-\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.charCodeAt(pos.offset) === 69) {
                                result0 = "E";
                                advance(pos, 1);
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"E\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.substr(pos.offset, 2) === "E+") {
                                    result0 = "E+";
                                    advance(pos, 2);
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"E+\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.substr(pos.offset, 2) === "E-") {
                                        result0 = "E-";
                                        advance(pos, 2);
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"E-\"");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_Digits() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result1 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[0-9]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[0-9]/.test(input.charAt(pos.offset))) {
                            result1 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[0-9]");
                            }
                        }
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return parseInt(append(d));
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_True() {
                var result0;

                if (input.substr(pos.offset, 4) === "true") {
                    result0 = "true";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"true\"");
                    }
                }
                return result0;
            }

            function parse_False() {
                var result0;

                if (input.substr(pos.offset, 5) === "false") {
                    result0 = "false";
                    advance(pos, 5);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"false\"");
                    }
                }
                return result0;
            }

            function parse_Null() {
                var result0;

                if (input.substr(pos.offset, 4) === "null") {
                    result0 = "null";
                    advance(pos, 4);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"null\"");
                    }
                }
                return result0;
            }

            function parse_Comma() {
                var result0;

                if (input.charCodeAt(pos.offset) === 44) {
                    result0 = ",";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                return result0;
            }

            function parse_dquote() {
                var result0;

                if (/^["]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[\"]");
                    }
                }
                return result0;
            }

            function parse_squote() {
                var result0;

                if (/^[']/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[']");
                    }
                }
                return result0;
            }

            function parse_insig() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_sp();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_crlf();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_crlf();
                    }
                    if (result1 !== null) {
                        result2 = parse_sp();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) { return ''})(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_sp() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                result0 = [];
                if (/^[\t]/.test(input.charAt(pos.offset))) {
                    result1 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[\\t]");
                    }
                }
                if (result1 === null) {
                    if (/^[ ]/.test(input.charAt(pos.offset))) {
                        result1 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("[ ]");
                        }
                    }
                }
                while (result1 !== null) {
                    result0.push(result1);
                    if (/^[\t]/.test(input.charAt(pos.offset))) {
                        result1 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("[\\t]");
                        }
                    }
                    if (result1 === null) {
                        if (/^[ ]/.test(input.charAt(pos.offset))) {
                            result1 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[ ]");
                            }
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column) {
                        return ''
                    })(pos0.offset, pos0.line, pos0.column);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_crlf() {
                var result0;

                if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[\\n\\r\\u2028\\u2029]");
                    }
                }
                return result0;
            }

            function parse_JSONPath() {
                var result0, result1;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Identifier();
                if (result0 === null) {
                    result0 = parse_WordVal();
                }
                if (result0 !== null) {
                    result1 = parse_ExtIdentifier();
                    result1 = result1 !== null ? result1 : "";
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, i, e) {
                        return i + e;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ExtIdentifier() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                result0 = [];
                result1 = parse_Descendent();
                if (result1 === null) {
                    result1 = parse_Indexed();
                }
                while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_Descendent();
                    if (result1 === null) {
                        result1 = parse_Indexed();
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return c.join('');
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Indexed() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 91) {
                    result0 = "[";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"[\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_PositiveNumber();
                    if (result1 === null) {
                        result1 = parse_WordVal();
                        if (result1 === null) {
                            result1 = parse_StringLiteral();
                            if (result1 === null) {
                                result1 = parse_Expr();
                            }
                        }
                    }
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                            result2 = "]";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"]\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) {
                        return '[' + p + ']';
                    })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Expr() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 63) {
                    result0 = "?";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"?\"");
                    }
                }
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 40) {
                        result1 = "(";
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_ExprBlock();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos.offset) === 41) {
                                result3 = ")";
                                advance(pos, 1);
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, q, e) {
                        return q + '(' + e + ')'
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_ExprBlock() {
                var result0;
                var pos0;

                pos0 = clone(pos);
                result0 = parse_StringLiteral();
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s) {
                        return s.substr(1, s.length - 2);
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Identifier() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (/^[a-zA-Z$:]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[a-zA-Z$:]");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[a-zA-Z_0-9:]/.test(input.charAt(pos.offset))) {
                        result2 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-zA-Z_0-9:]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[a-zA-Z_0-9:]/.test(input.charAt(pos.offset))) {
                            result2 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[a-zA-Z_0-9:]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        var ret = c[0];
                        for(i = 1; i < c.length; i++) {
                            ret = ret + c[i].join('');
                        }
                        return ret;
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Descendent() {
                var result0, result1;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Selector();
                if (result0 !== null) {
                    result1 = parse_Identifier();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, s, i) {
                        return s + i;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_Selector() {
                var result0;

                if (input.substr(pos.offset, 2) === "..") {
                    result0 = "..";
                    advance(pos, 2);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"..\"");
                    }
                }
                if (result0 === null) {
                    if (input.charCodeAt(pos.offset) === 46) {
                        result0 = ".";
                        advance(pos, 1);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\".\"");
                        }
                    }
                }
                return result0;
            }

            function parse_PositiveNumber() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result1 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[0-9]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[0-9]/.test(input.charAt(pos.offset))) {
                            result1 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[0-9]");
                            }
                        }
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, d) {
                        return parseInt(d.join(''));
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_StringLiteral() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 34) {
                    result0 = "\"";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\\"\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_DoubleString();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 34) {
                            result2 = "\"";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"\\\"\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 === null) {
                    pos1 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 39) {
                        result0 = "'";
                        advance(pos, 1);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"'\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_SingleString();
                        if (result1 !== null) {
                            if (input.charCodeAt(pos.offset) === 39) {
                                result2 = "'";
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"'\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, parts) {
                        return '"' + parts[1] + '"';
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_DoubleString() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                result0 = [];
                result1 = parse_dchar();
                while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_dchar();
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return c.join('');
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_SingleString() {
                var result0, result1;
                var pos0;

                pos0 = clone(pos);
                result0 = [];
                result1 = parse_achar();
                while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_achar();
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, c) {
                        return c.join('');
                    })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                return result0;
            }

            function parse_dchar() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                if (/^[^"\\\0-\x1F]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[^\"\\\\\\0-\\x1F]");
                    }
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    if (input.substr(pos.offset, 2) === "\\\"") {
                        result0 = "\\\"";
                        advance(pos, 2);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"\\\\\\\"\"");
                        }
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, line, column) { return '"';  })(pos0.offset, pos0.line, pos0.column);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        pos0 = clone(pos);
                        if (input.substr(pos.offset, 2) === "\\\\") {
                            result0 = "\\\\";
                            advance(pos, 2);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"\\\\\\\\\"");
                            }
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, line, column) { return "\\"; })(pos0.offset, pos0.line, pos0.column);
                        }
                        if (result0 === null) {
                            pos = clone(pos0);
                        }
                        if (result0 === null) {
                            pos0 = clone(pos);
                            if (input.substr(pos.offset, 2) === "\\/") {
                                result0 = "\\/";
                                advance(pos, 2);
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"\\\\/\"");
                                }
                            }
                            if (result0 !== null) {
                                result0 = (function(offset, line, column) { return "/";  })(pos0.offset, pos0.line, pos0.column);
                            }
                            if (result0 === null) {
                                pos = clone(pos0);
                            }
                            if (result0 === null) {
                                pos0 = clone(pos);
                                if (input.substr(pos.offset, 2) === "\\b") {
                                    result0 = "\\b";
                                    advance(pos, 2);
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"\\\\b\"");
                                    }
                                }
                                if (result0 !== null) {
                                    result0 = (function(offset, line, column) { return "\b"; })(pos0.offset, pos0.line, pos0.column);
                                }
                                if (result0 === null) {
                                    pos = clone(pos0);
                                }
                                if (result0 === null) {
                                    pos0 = clone(pos);
                                    if (input.substr(pos.offset, 2) === "\\f") {
                                        result0 = "\\f";
                                        advance(pos, 2);
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"\\\\f\"");
                                        }
                                    }
                                    if (result0 !== null) {
                                        result0 = (function(offset, line, column) { return "\f"; })(pos0.offset, pos0.line, pos0.column);
                                    }
                                    if (result0 === null) {
                                        pos = clone(pos0);
                                    }
                                    if (result0 === null) {
                                        pos0 = clone(pos);
                                        if (input.substr(pos.offset, 2) === "\\n") {
                                            result0 = "\\n";
                                            advance(pos, 2);
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"\\\\n\"");
                                            }
                                        }
                                        if (result0 !== null) {
                                            result0 = (function(offset, line, column) { return "\n"; })(pos0.offset, pos0.line, pos0.column);
                                        }
                                        if (result0 === null) {
                                            pos = clone(pos0);
                                        }
                                        if (result0 === null) {
                                            pos0 = clone(pos);
                                            if (input.substr(pos.offset, 2) === "\\r") {
                                                result0 = "\\r";
                                                advance(pos, 2);
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"\\\\r\"");
                                                }
                                            }
                                            if (result0 !== null) {
                                                result0 = (function(offset, line, column) { return "\r"; })(pos0.offset, pos0.line, pos0.column);
                                            }
                                            if (result0 === null) {
                                                pos = clone(pos0);
                                            }
                                            if (result0 === null) {
                                                pos0 = clone(pos);
                                                if (input.substr(pos.offset, 2) === "\\t") {
                                                    result0 = "\\t";
                                                    advance(pos, 2);
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"\\\\t\"");
                                                    }
                                                }
                                                if (result0 !== null) {
                                                    result0 = (function(offset, line, column) { return "\t"; })(pos0.offset, pos0.line, pos0.column);
                                                }
                                                if (result0 === null) {
                                                    pos = clone(pos0);
                                                }
                                                if (result0 === null) {
                                                    pos0 = clone(pos);
                                                    pos1 = clone(pos);
                                                    if (input.substr(pos.offset, 2) === "\\u") {
                                                        result0 = "\\u";
                                                        advance(pos, 2);
                                                    } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\"\\\\u\"");
                                                        }
                                                    }
                                                    if (result0 !== null) {
                                                        result1 = parse_hexDigit();
                                                        if (result1 !== null) {
                                                            result2 = parse_hexDigit();
                                                            if (result2 !== null) {
                                                                result3 = parse_hexDigit();
                                                                if (result3 !== null) {
                                                                    result4 = parse_hexDigit();
                                                                    if (result4 !== null) {
                                                                        result0 = [result0, result1, result2, result3, result4];
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                    if (result0 !== null) {
                                                        result0 = (function(offset, line, column, h1, h2, h3, h4) {
                                                            return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
                                                        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3], result0[4]);
                                                    }
                                                    if (result0 === null) {
                                                        pos = clone(pos0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_achar() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                if (/^[^'\\\0-\x1F]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[^'\\\\\\0-\\x1F]");
                    }
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    if (input.substr(pos.offset, 2) === "\\'") {
                        result0 = "\\'";
                        advance(pos, 2);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"\\\\'\"");
                        }
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, line, column) { return "\'";  })(pos0.offset, pos0.line, pos0.column);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        pos0 = clone(pos);
                        if (input.substr(pos.offset, 2) === "\\\\") {
                            result0 = "\\\\";
                            advance(pos, 2);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"\\\\\\\\\"");
                            }
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, line, column) { return "\\"; })(pos0.offset, pos0.line, pos0.column);
                        }
                        if (result0 === null) {
                            pos = clone(pos0);
                        }
                        if (result0 === null) {
                            pos0 = clone(pos);
                            if (input.substr(pos.offset, 2) === "\\/") {
                                result0 = "\\/";
                                advance(pos, 2);
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"\\\\/\"");
                                }
                            }
                            if (result0 !== null) {
                                result0 = (function(offset, line, column) { return "/";  })(pos0.offset, pos0.line, pos0.column);
                            }
                            if (result0 === null) {
                                pos = clone(pos0);
                            }
                            if (result0 === null) {
                                pos0 = clone(pos);
                                if (input.substr(pos.offset, 2) === "\\b") {
                                    result0 = "\\b";
                                    advance(pos, 2);
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"\\\\b\"");
                                    }
                                }
                                if (result0 !== null) {
                                    result0 = (function(offset, line, column) { return "\b"; })(pos0.offset, pos0.line, pos0.column);
                                }
                                if (result0 === null) {
                                    pos = clone(pos0);
                                }
                                if (result0 === null) {
                                    pos0 = clone(pos);
                                    if (input.substr(pos.offset, 2) === "\\f") {
                                        result0 = "\\f";
                                        advance(pos, 2);
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"\\\\f\"");
                                        }
                                    }
                                    if (result0 !== null) {
                                        result0 = (function(offset, line, column) { return "\f"; })(pos0.offset, pos0.line, pos0.column);
                                    }
                                    if (result0 === null) {
                                        pos = clone(pos0);
                                    }
                                    if (result0 === null) {
                                        pos0 = clone(pos);
                                        if (input.substr(pos.offset, 2) === "\\n") {
                                            result0 = "\\n";
                                            advance(pos, 2);
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"\\\\n\"");
                                            }
                                        }
                                        if (result0 !== null) {
                                            result0 = (function(offset, line, column) { return "\n"; })(pos0.offset, pos0.line, pos0.column);
                                        }
                                        if (result0 === null) {
                                            pos = clone(pos0);
                                        }
                                        if (result0 === null) {
                                            pos0 = clone(pos);
                                            if (input.substr(pos.offset, 2) === "\\r") {
                                                result0 = "\\r";
                                                advance(pos, 2);
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"\\\\r\"");
                                                }
                                            }
                                            if (result0 !== null) {
                                                result0 = (function(offset, line, column) { return "\r"; })(pos0.offset, pos0.line, pos0.column);
                                            }
                                            if (result0 === null) {
                                                pos = clone(pos0);
                                            }
                                            if (result0 === null) {
                                                pos0 = clone(pos);
                                                if (input.substr(pos.offset, 2) === "\\t") {
                                                    result0 = "\\t";
                                                    advance(pos, 2);
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"\\\\t\"");
                                                    }
                                                }
                                                if (result0 !== null) {
                                                    result0 = (function(offset, line, column) { return "\t"; })(pos0.offset, pos0.line, pos0.column);
                                                }
                                                if (result0 === null) {
                                                    pos = clone(pos0);
                                                }
                                                if (result0 === null) {
                                                    pos0 = clone(pos);
                                                    pos1 = clone(pos);
                                                    if (input.substr(pos.offset, 2) === "\\u") {
                                                        result0 = "\\u";
                                                        advance(pos, 2);
                                                    } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\"\\\\u\"");
                                                        }
                                                    }
                                                    if (result0 !== null) {
                                                        result1 = parse_hexDigit();
                                                        if (result1 !== null) {
                                                            result2 = parse_hexDigit();
                                                            if (result2 !== null) {
                                                                result3 = parse_hexDigit();
                                                                if (result3 !== null) {
                                                                    result4 = parse_hexDigit();
                                                                    if (result4 !== null) {
                                                                        result0 = [result0, result1, result2, result3, result4];
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = clone(pos1);
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = clone(pos1);
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = clone(pos1);
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = clone(pos1);
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = clone(pos1);
                                                    }
                                                    if (result0 !== null) {
                                                        result0 = (function(offset, line, column, h1, h2, h3, h4) {
                                                            return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
                                                        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3], result0[4]);
                                                    }
                                                    if (result0 === null) {
                                                        pos = clone(pos0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_hexDigit() {
                var result0;

                if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[0-9a-fA-F]");
                    }
                }
                return result0;
            }


            function cleanupExpected(expected) {
                expected.sort();

                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }



            // Utils to establish the right semantic model
            function typeOf(value) {
                var s = typeof value;
                if(s === 'object') {
                    if(value) {
                        if(typeof value.length === 'number' &&
                            !(value.propertyIsEnumerable('length')) &&
                            typeof value.splice === 'function') {
                            s = 'array';
                        }
                    }
                    else {
                        s = 'null';
                    }
                }
                return s;
            }

            function append(arr) {
                var str = '';
                if(typeOf(arr) === 'array') {
                    for(var i = 0; i < arr.length; i++) {
                        if(typeOf(arr[i]) == 'array') {
                            str += append(arr[i]);
                        }
                        else if (typeof arr[i] === 'object') {
                            str += JSON.stringify(arr[i].object);
                        }
                        else {
                            str += arr[i];
                        }
                    }
                }
                else {
                    str = str + arr;
                }
                return str;
            }

            function merge(arr) {
                var i, ret = {};
                for(i = 0; i < arr.length; i++) {
                    for(p in arr[i]) {
                        ret[p] = arr[i][p];
                    }
                }
                return ret;
            }

            function collect(arr, separator, ret, f) {
                for(var i = 0; i < arr.length; i++) {
                    if(typeOf(arr[i]) == 'array') {
                        collect(arr[i], separator, ret, f);
                    }
                    else if(arr[i] != "" && arr[i] != separator) {
                        if(f && arr[i][f]) {
                            ret.push(arr[i][f]);
                        }
                        else {
                            ret.push(arr[i]);
                        }
                    }
                }
            }

            function indexOf(names, name) {
                for(var i = 0; i < names.length; i++) {
                    if(names[i].name === name) {
                        return i;
                    }
                }
                return -1;
            }

            function countLogicVars(condition){
                var fallback, ret;
                if (condition.fallback){
                    fallback = countLogicVars(condition.fallback);
                }else{
                    fallback = [];
                }
                switch(condition.logic){
                    case 'and':
                        ret = _.all(condition.values, function(onecond){
                            return countLogicVars(onecond);
                        });
                    case 'not':
                        ret = !countLogicVars(condition.values);
                    default://normal
                        ret = [condition.values];
                }
                return ret.concat(fallback);
            }

            function findThrows(tryClause){
                if(!tryClause){
                    return [];
                }
                var errMap = [];
                for (var i = 0; i < tryClause.length; i++){
                    var thistry = tryClause[i];
                    if(thistry.type === 'throw'){
                        errMap.push(thistry.err);
                    }else if(thistry.type === 'if'){
                        errMap = errMap.concat(findThrows(thistry.if));
                        errMap = errMap.concat(findThrows(thistry.else));
                    }else if (thistry.type === 'try'){
                        errMap = errMap.concat(findThrows(thistry.tryClause));
                        errMap = errMap.concat(findThrows(thistry.catchClause));
                        errMap = errMap.concat(findThrows(thistry.finallyClause));
                    }
                }
                return errMap;
            }

            // Split join statements in to main and a joiner. The main statement is the independent
            // and the joiner depends on the outcome of the main statement. In this process, we split
            // the columns in the columns clause across the main and joiner, and merge them at runtime
            // using the 'selected' array below.
            function splitJoins(statement, cb) {
                var main = statement, join, i, cond, column, sel;

                // No need to split since there is no join.
                if(statement.fromClause.length === 1) {
                    return main;
                }

                // Can't deal with joins between more than two tables.
                if(statement.fromClause.length > 2) {
                    throw new this.SyntaxError("Line: " + statement.line + ": Statement must have no more than two tables in the from clause");
                }

                // Initialize the main statement.
                main = {
                    type: 'select',
                    line: statement.line,
                    columns: [],
                    selected: [], // These are the columns to be picked up at the end
                    extras: [], // Used only during selection discared laer.
                    whereCriteria: []
                };

                if(statement.extras) {
                    // These are extra columns included the columns array - contain UDF args not already
                    // listed in the columns clause
                    main.udfExtras = statement.extras;
                }

                // Initialize the joiner
                join = {
                    type: 'select',
                    line: statement.line,
                    columns: [],
                    extras: [], // used only during selection
                    whereCriteria: []
                };

                main.fromClause = [statement.fromClause[0]];
                join.fromClause = [statement.fromClause[1]];

                //  Split relevant columns into main and joiner
                for(i = 0; i < statement.columns.length; i++) {
                    column = statement.columns[i];
                    if(column.operator === 'udf') {
                        // Nothing to do
                    }
                    else if(column.name.indexOf(main.fromClause[0].alias + '.') === 0) {
                        // Keep it in main
                        if(indexOf(main.columns, column.name) < 0) {
                            main.columns.push(column);
                            sel = {from: 'main'};
                            if(column.alias) {
                                sel.name = column.alias;
                            }
                            else {
                                sel.index = main.columns.length - 1;
                            }
                            if(column.for) sel.for = column.for;
                            main.selected.push(sel);
                        }
                    }
                    else {
                        // Keep it in join
                        if(indexOf(join.columns, column.name) < 0) {
                            join.columns.push(column);
                            sel = {from: 'joiner'};
                            if(column.alias) {
                                sel.name = column.alias;
                            }
                            else {
                                sel.index = join.columns.length - 1;
                            }
                            if(column.for) sel.for = column.for;
                            main.selected.push(sel);
                        }
                    }
                }

                // We need a where clause for the join
                if(!statement.whereCriteria) {
                    throw new this.SyntaxError("Line " + statement.line + ": Missing join condition in statement ");
                }

                if(statement.whereCriteria) {
                    for(i = 0; i < statement.whereCriteria.length; i++) {
                        cond = statement.whereCriteria[i];
                        if(cond.operator === 'udf') {
                            main.whereCriteria.push(cond);
                        }
                        else if(cond.rhs.type && cond.rhs.type === 'alias') {
                            // This is the join condition
                            var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');
                            if(index === 0) {
                                // Include only once
                                if(indexOf(main.columns, cond.rhs.value) < 0) {
                                    var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');
                                    main.columns.push({
                                        name: cond.rhs.value,
                                        type: 'column'
                                    })
                                    if(statement.usingColumnAliases) {
                                        main.columns[main.columns.length - 1].alias = cond.rhs.alias ||
                                            cond.rhs.value.substr(index + main.fromClause[0].alias.length + 1);
                                    }
                                    main.extras.push(main.columns.length -1);
                                }
                                if(indexOf(join.columns, cond.lhs.name) < 0) {
                                    var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');
                                    join.columns.push({
                                        name: cond.lhs.name,
                                        type: 'column'
                                    });
                                    if(statement.usingColumnAliases) {
                                        join.columns[join.columns.length - 1].alias = cond.lhs.alias ||
                                            cond.lhs.name.substr(index + join.fromClause[0].alias.length + 1)
                                    }
                                    join.extras.push(join.columns.length - 1);
                                }
                            }
                            else {
                                // Include only once
                                if(indexOf(join.columns, cond.rhs.value) < 0) {
                                    var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');
                                    join.columns.push({
                                        name: cond.rhs.value,
                                        type: 'column'
                                    })
                                    if(statement.usingColumnAliases) {
                                        join.columns[join.columns.length - 1].alias = cond.rhs.alias ||
                                            cond.rhs.value.substr(index + join.fromClause[0].alias.length + 1)
                                    }
                                    join.extras.push(join.columns.length - 1);
                                }
                                if(indexOf(main.columns, cond.lhs.name) < 0) {
                                    var index = cond.lhs.name.indexOf(main.fromClause[0].alias + '.');
                                    main.columns.push({
                                        name: cond.lhs.name,
                                        type: 'column'
                                    });
                                    if(statement.usingColumnAliases) {
                                        main.columns[main.columns.length - 1].alias = cond.lhs.alias ||
                                            cond.lhs.name.substr(index + main.fromClause[0].alias.length + 1)
                                    }

                                    main.extras.push(main.columns.length -1);
                                }
                            }
                            join.whereCriteria.push(cond);
                        }
                        else {
                            if(cond.lhs.name.indexOf(main.fromClause[0].alias + '.') === 0) {
                                main.whereCriteria.push(cond);
                            }
                            else if(cond.lhs.name.indexOf(join.fromClause[0].alias + '.') === 0) {
                                join.whereCriteria.push(cond);
                            }
                        }
                    }
                }

                if(join.whereCriteria && join.whereCriteria.length > 0) {
                    for(var i in join.whereCriteria){
                        if(indexOf(main.columns, join.whereCriteria[i].rhs.value) >= 0) {
                            join.whereCriteria[i].rhs.joiningColumn = indexOf(main.columns, join.whereCriteria[i].rhs.value);
                        }
                        else if (indexOf(main.columns, join.whereCriteria[i].lhs.name) >= 0){
                            // Flip the condition
                            var temp = join.whereCriteria[i].rhs.value;
                            join.whereCriteria[i].rhs.value = join.whereCriteria[i].lhs.name;
                            join.whereCriteria[i].lhs = {
                                name: temp
                            }
                            temp = join.whereCriteria[i].rhs.value;
                            join.whereCriteria[i].rhs.joiningColumn = indexOf(main.columns, temp);
                        }
                    }
                }
                main.joiner = join;

                // Reset the joiningColumn to the alias where columns are aliased
                // The joining column is an index by default.
                for (var j in join.whereCriteria){
                    var joiningColumn;
                    if(main.columns[join.whereCriteria[j].rhs.joiningColumn] && main.columns[join.whereCriteria[j].rhs.joiningColumn].alias) {
                        for(var i = 0; i < main.columns.length; i++) {
                            if(main.columns[i].name === main.joiner.whereCriteria[j].rhs.value) {
                                joiningColumn = main.columns[i].alias;
                                break;
                            }
                        }
                        if(joiningColumn) {
                            main.joiner.whereCriteria[j].rhs.joiningColumn = joiningColumn;
                        }
                        else {
                            throw new this.SyntaxError("Line " + main.line + ": Joining column " + joiningColumn + " could not resolved. File a bug.");
                        }
                    }
                }

                // Verify that all columns have prefixes
                for(var i = 0; i < main.columns.length; i++) {
                    if(!main.columns[i].operator) {
                        var prefixed = false;
                        for(var j = 0; j < main.fromClause.length; j++) {
                            if(main.columns[i].name.indexOf(main.fromClause[j].alias + '.') === 0) {
                                prefixed = true;
                                break;
                            }
                        }
                        if(!prefixed) {
                            throw new this.SyntaxError("Line " + main.line + ": Column " + main.columns[i].name + " not prefixed or prefix not found");
                        }
                    }
                }
                for(var i = 0; i < join.columns.length; i++) {
                    if(!join.columns[i].operator) {
                        var prefixed = false;
                        for(var j = 0; j < join.fromClause.length; j++) {
                            if(join.columns[i].name.indexOf(join.fromClause[j].alias + '.') === 0) {
                                prefixed = true;
                                break;
                            }
                        }
                        if(!prefixed) {
                            throw new this.SyntaxError("Line " + main.line + ": Column " + join.columns[i].name + " not prefixed or prefix not found");
                        }
                    }
                }

                // Redo the UDF args since the indexes of column type args would be different now
                // The index for each column arg should map to the 'selected' array so that we can pick up
                // values of args from the 'selected' array.
                for(var i = 0; i < main.whereCriteria.length; i++) {
                    var where = main.whereCriteria[i];
                    if(where.operator === 'udf') {
                        for(var j = 0; j < where.args.length; j++) {
                            if(where.args[j].type === 'column') {
                                // What is the prefix?
                                var index = where.args[j].name.indexOf('.');
                                if(index < 0) {
                                    throw new this.SyntaxError("Line " + main.line + ": Arg " + where.args[j].name + " not prefixed");
                                }
                                var prefix = where.args[j].name.substr(0, index);
                                var name = where.args[j].name.substr(index + 1);
                                if(main.fromClause[0].alias === prefix) {
                                    // From main - find matching selected[] element where from = main and name = arg.name.
                                    for(var selected = 0; selected < main.selected.length; selected++) {
                                        if(main.selected[selected].from === 'main') {
                                            if(main.selected[selected].name && main.selected[selected].name === name) {
                                                where.args[j].index = selected;
                                            }
                                            else if(main.selected[selected].hasOwnProperty('index') &&
                                                main.columns[main.selected[selected].index].name === where.args[j].name) {
                                                where.args[j].index = selected;
                                            }
                                        }
                                    }
                                }
                                else if(main.joiner.fromClause[0].alias === prefix) {
                                    // From joiner - find matching selected[] element where from = joiner and name = arg.name.
                                    for(var selected = 0; selected < main.selected.length; selected++) {
                                        if(main.selected[selected].from === 'joiner') {
                                            if(main.selected[selected].name && main.selected[selected].name === name) {
                                                where.args[j].index = selected;
                                            }
                                            else if(main.selected[selected].hasOwnProperty('index') &&
                                                join.columns[main.selected[selected].index].name === where.args[j].name) {
                                                where.args[j].index = selected;
                                            }
                                        }
                                    }
                                }
                                else {
                                    throw new this.SyntaxError("Line " + main.line + ": Alias of arg " + where.args[j].name + " not found");
                                }
                            }
                        }
                    }
                }

                return main;
            }

            // Symbol table - to check for unreferenced variables
            var symbols = {};
            var lincr = 0;
            var id = 0;


            var result = parseFunctions[startRule]();

            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos.offset === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos.offset < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos.offset === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos.offset !== input.length) {
                var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;

                throw new this.SyntaxError(
                    cleanupExpected(rightmostFailuresExpected),
                    found,
                    offset,
                    errorPosition.line,
                    errorPosition.column
                );
            }

            return result;
        },

        /* Returns the parser source code. */
        toSource: function() { return this._source; }
    };

    /* Thrown when a parser encounters a syntax error. */

    result.SyntaxError = function(expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;

            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }

            foundHumanized = found ? quote(found) : "end of input";

            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }

        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };

    result.SyntaxError.prototype = Error.prototype;

    return result;
})();
