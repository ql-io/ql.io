module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "act": parse_act,
        "actname": parse_actname,
        "aliasField": parse_aliasField,
        "aliasSource": parse_aliasSource,
        "aliasedRef": parse_aliasedRef,
        "all": parse_all,
        "and": parse_and,
        "andCond": parse_andCond,
        "array": parse_array,
        "arrayval": parse_arrayval,
        "assign": parse_assign,
        "authenticateUsing": parse_authenticateUsing,
        "cnvp": parse_cnvp,
        "columnsClause": parse_columnsClause,
        "comma": parse_comma,
        "commaCsvMember": parse_commaCsvMember,
        "commaSource": parse_commaSource,
        "comment": parse_comment,
        "cond": parse_cond,
        "createStatement": parse_createStatement,
        "crlf": parse_crlf,
        "csv": parse_csv,
        "csvMember": parse_csvMember,
        "dQuotedDigits": parse_dQuotedDigits,
        "dQuotedWord": parse_dQuotedWord,
        "delete": parse_delete,
        "deleteStatement": parse_deleteStatement,
        "describeStatement": parse_describeStatement,
        "digits": parse_digits,
        "dquote": parse_dquote,
        "e": parse_e,
        "elements": parse_elements,
        "eqCond": parse_eqCond,
        "exp": parse_exp,
        "false": parse_false,
        "falseval": parse_falseval,
        "field": parse_field,
        "fieldName": parse_fieldName,
        "fields": parse_fields,
        "frac": parse_frac,
        "fromClause": parse_fromClause,
        "getfrom": parse_getfrom,
        "identifier": parse_identifier,
        "inCond": parse_inCond,
        "insertStatement": parse_insertStatement,
        "insig": parse_insig,
        "int": parse_int,
        "limit": parse_limit,
        "line": parse_line,
        "linecrlf": parse_linecrlf,
        "members": parse_members,
        "nonAliasField": parse_nonAliasField,
        "nonAliasSource": parse_nonAliasSource,
        "null": parse_null,
        "nullval": parse_nullval,
        "number": parse_number,
        "numberval": parse_numberval,
        "nvp": parse_nvp,
        "nvps": parse_nvps,
        "object": parse_object,
        "offset": parse_offset,
        "operator": parse_operator,
        "output": parse_output,
        "pair": parse_pair,
        "postto": parse_postto,
        "putto": parse_putto,
        "quotedDigits": parse_quotedDigits,
        "quotedWord": parse_quotedWord,
        "qword": parse_qword,
        "ref": parse_ref,
        "resultSet": parse_resultSet,
        "retref": parse_retref,
        "return": parse_return,
        "retval": parse_retval,
        "rhs": parse_rhs,
        "route": parse_route,
        "sQuotedDigits": parse_sQuotedDigits,
        "sQuotedWord": parse_sQuotedWord,
        "selectStatement": parse_selectStatement,
        "selector": parse_selector,
        "showStatement": parse_showStatement,
        "source": parse_source,
        "sp": parse_sp,
        "start": parse_start,
        "statement": parse_statement,
        "statementOrObject": parse_statementOrObject,
        "string": parse_string,
        "stringval": parse_stringval,
        "struct": parse_struct,
        "true": parse_true,
        "trueval": parse_trueval,
        "type": parse_type,
        "udf": parse_udf,
        "udfParam": parse_udfParam,
        "udfParams": parse_udfParams,
        "usingBodyTemplate": parse_usingBodyTemplate,
        "usingDefaults": parse_usingDefaults,
        "usingHeaders": parse_usingHeaders,
        "usingMonkeyPatch": parse_usingMonkeyPatch,
        "value": parse_value,
        "whereClause": parse_whereClause,
        "whereCriteria": parse_whereCriteria,
        "withAliases": parse_withAliases,
        "word": parse_word
      };

      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }

      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);

        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        rightmostMatchFailuresExpected.push(failure);
      }

      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result18 = parse_crlf();
        while (result18 !== null) {
          result3.push(result18);
          var result18 = parse_crlf();
        }
        if (result3 !== null) {
          var result4 = [];
          var result17 = parse_linecrlf();
          while (result17 !== null) {
            result4.push(result17);
            var result17 = parse_linecrlf();
          }
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result16 = parse_return();
              var result6 = result16 !== null ? result16 : '';
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = [];
                  var result15 = parse_crlf();
                  while (result15 !== null) {
                    result8.push(result15);
                    var result15 = parse_crlf();
                  }
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      var result10 = [];
                      var result14 = parse_comment();
                      while (result14 !== null) {
                        result10.push(result14);
                        var result14 = parse_comment();
                      }
                      if (result10 !== null) {
                        var result11 = parse_insig();
                        if (result11 !== null) {
                          var result12 = [];
                          var result13 = parse_crlf();
                          while (result13 !== null) {
                            result12.push(result13);
                            var result13 = parse_crlf();
                          }
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(larr, r, carr) {
            ret = [];
            ret = ret.concat(larr);
            if(r) {
              ret.push(r);
            }
            ret = ret.concat(carr);
            return ret;
          })(result1[1], result1[3], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_linecrlf() {
        var cacheKey = 'linecrlf@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_line();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_crlf();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_crlf();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l) {
            return l;
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_line() {
        var cacheKey = 'line@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_sp();
        if (result3 !== null) {
          var result6 = parse_assign();
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result5 = parse_comment();
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l) {
            var i, from;
            if(l.type !== 'comment') {
              l.id = id++;
            }
            return l;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_assign() {
        var cacheKey = 'assign@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result9 = parse_output();
        var result3 = result9 !== null ? result9 : '';
        if (result3 !== null) {
          var result4 = parse_statementOrObject();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result8 = ";";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              var result6 = result8 !== null ? result8 : '';
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(a, s) {
            if(a) {
              s.assign = a;
            }
            symbols[a] = {};
            return s;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_statementOrObject() {
        var cacheKey = 'statementOrObject@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_statement();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_value();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_statement() {
        var cacheKey = 'statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result6 = parse_selectStatement();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_showStatement();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_describeStatement();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_insertStatement();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_deleteStatement();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_createStatement();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_output() {
        var cacheKey = 'output@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_word();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w) {
            return w;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "--") {
          var result3 = "--";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"--\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_sp();
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos).match(/^[ -\uFFFF]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[ -\\uFFFF]");
              }
            }
            while (result8 !== null) {
              result5.push(result8);
              if (input.substr(pos).match(/^[ -\uFFFF]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[ -\\uFFFF]");
                }
              }
            }
            if (result5 !== null) {
              var result7 = parse_crlf();
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
            return {
              line: computeErrorPosition().line,
              type: 'comment',
              text: c.join('')
            }
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_createStatement() {
        var cacheKey = 'createStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "create") {
          var result3 = "create";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"create\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "table") {
              var result5 = "table";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"table\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_nonAliasSource();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_act();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_act();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, a) {
            var s = {
              type: 'create',
              name: s.name,
              line: computeErrorPosition().line
            };
            for(i = 0; i < a.length; i++) {
              s[a[i].type] = a[i];
              delete a[i].type;
            }
            return s;
          })(result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_type() {
        var cacheKey = 'type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 6) === "select") {
          var result4 = "select";
          pos += 6;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"select\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 6) === "insert") {
            var result3 = "insert";
            pos += 6;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"insert\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 6) === "delete") {
              var result2 = "delete";
              pos += 6;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"delete\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 6) === "update") {
                var result1 = "update";
                pos += 6;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"update\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_act() {
        var cacheKey = 'act@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "on") {
          var result3 = "on";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"on\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_type();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_actname();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = parse_quotedWord();
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        var result11 = parse_insig();
                        if (result11 !== null) {
                          var result29 = parse_withAliases();
                          var result12 = result29 !== null ? result29 : '';
                          if (result12 !== null) {
                            var result28 = parse_usingHeaders();
                            var result13 = result28 !== null ? result28 : '';
                            if (result13 !== null) {
                              var result27 = parse_usingDefaults();
                              var result14 = result27 !== null ? result27 : '';
                              if (result14 !== null) {
                                var result26 = parse_usingMonkeyPatch();
                                var result15 = result26 !== null ? result26 : '';
                                if (result15 !== null) {
                                  var result16 = parse_insig();
                                  if (result16 !== null) {
                                    var result25 = parse_usingBodyTemplate();
                                    var result17 = result25 !== null ? result25 : '';
                                    if (result17 !== null) {
                                      var result18 = parse_insig();
                                      if (result18 !== null) {
                                        var result24 = parse_authenticateUsing();
                                        var result19 = result24 !== null ? result24 : '';
                                        if (result19 !== null) {
                                          var result20 = parse_insig();
                                          if (result20 !== null) {
                                            var result23 = parse_resultSet();
                                            var result21 = result23 !== null ? result23 : '';
                                            if (result21 !== null) {
                                              var result22 = parse_insig();
                                              if (result22 !== null) {
                                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22];
                                              } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                              }
                                            } else {
                                              var result1 = null;
                                              pos = savedPos1;
                                            }
                                          } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result1 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t, m, u, a, h, d, p, b, auth, r) {
            var ret = {
              type: t,
              method: m,
              uri: u.value,
              defaults: d || {},
              aliases: a || {},
              headers: h || {},
              resultSet: r || ''
            };
            if(auth && auth.length > 0) {
              ret.auth = auth;
            }
            if(p) ret.patch = p;
            ret.body = b;
            return ret;
          })(result1[2], result1[4], result1[6], result1[9], result1[10], result1[11], result1[12], result1[14], result1[16], result1[18])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_actname() {
        var cacheKey = 'actname@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_getfrom();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_postto();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_putto();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_delete();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_getfrom() {
        var cacheKey = 'getfrom@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "get") {
          var result3 = "get";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"get\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 4) === "from") {
              var result5 = "from";
              pos += 4;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"from\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return 'get'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_postto() {
        var cacheKey = 'postto@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "post") {
          var result3 = "post";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"post\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "to") {
              var result5 = "to";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"to\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return 'post'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_putto() {
        var cacheKey = 'putto@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "put") {
          var result3 = "put";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"put\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "to") {
              var result5 = "to";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"to\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return 'put'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_delete() {
        var cacheKey = 'delete@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 6) === "delete") {
          var result1 = "delete";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"delete\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
            return 'delete'
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_usingDefaults() {
        var cacheKey = 'usingDefaults@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 8) === "defaults") {
              var result5 = "defaults";
              pos += 8;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"defaults\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_nvps();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return merge(d);
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_usingHeaders() {
        var cacheKey = 'usingHeaders@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 7) === "headers") {
              var result5 = "headers";
              pos += 7;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"headers\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_nvps();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return merge(d);
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_usingMonkeyPatch() {
        var cacheKey = 'usingMonkeyPatch@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "patch") {
              var result5 = "patch";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"patch\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_quotedWord();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t) {
            return t.value;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_usingBodyTemplate() {
        var cacheKey = 'usingBodyTemplate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "using") {
          var result3 = "using";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"using\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 12) === "bodyTemplate") {
              var result5 = "bodyTemplate";
              pos += 12;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"bodyTemplate\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_quotedWord();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 4) === "type") {
                      var result9 = "type";
                      pos += 4;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"type\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        var result11 = parse_quotedWord();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t, m) {
            return {
              template: t.value,
              type: m.value
            }
          })(result1[4], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_withAliases() {
        var cacheKey = 'withAliases@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "with") {
          var result3 = "with";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"with\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 7) === "aliases") {
              var result5 = "aliases";
              pos += 7;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"aliases\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_nvps();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p) {
            return merge(p);
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_authenticateUsing() {
        var cacheKey = 'authenticateUsing@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 12) === "authenticate") {
          var result9 = "authenticate";
          pos += 12;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"authenticate\"");
          }
        }
        if (result9 !== null) {
          var result3 = result9;
        } else {
          if (input.substr(pos, 4) === "auth") {
            var result8 = "auth";
            pos += 4;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"auth\"");
            }
          }
          if (result8 !== null) {
            var result3 = result8;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "using") {
              var result5 = "using";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"using\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_quotedWord();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(m) {
            return m.value;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_resultSet() {
        var cacheKey = 'resultSet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 9) === "resultset") {
          var result3 = "resultset";
          pos += 9;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"resultset\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_quotedWord();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(r) {
            return r.value;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_nvps() {
        var cacheKey = 'nvps@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_nvp();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_cnvp();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_cnvp();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n, narr) {
            var ret = [n];
            ret = ret.concat(narr);
            return ret;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_cnvp() {
        var cacheKey = 'cnvp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === ",") {
          var result3 = ",";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\",\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_nvp();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n) {
            return n;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_nvp() {
        var cacheKey = 'nvp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result11 = parse_field();
          if (result11 !== null) {
            var result4 = result11;
          } else {
            var result10 = parse_quotedWord();
            if (result10 !== null) {
              var result4 = result10;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = parse_rhs();
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, rhs) {
            var  o = {};
            lhs = lhs.name || lhs;
            o[lhs.hasOwnProperty('value') ? lhs.value : lhs] = rhs.hasOwnProperty('value') ? rhs.value : rhs;
            return o;
          })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_selectStatement() {
        var cacheKey = 'selectStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "select") {
          var result3 = "select";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"select\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_columnsClause();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                if (input.substr(pos, 4) === "from") {
                  var result7 = "from";
                  pos += 4;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"from\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = parse_fromClause();
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        var result11 = [];
                        var result18 = parse_whereClause();
                        while (result18 !== null) {
                          result11.push(result18);
                          var result18 = parse_whereClause();
                        }
                        if (result11 !== null) {
                          var result12 = parse_insig();
                          if (result12 !== null) {
                            var result13 = [];
                            var result17 = parse_limit();
                            while (result17 !== null) {
                              result13.push(result17);
                              var result17 = parse_limit();
                            }
                            if (result13 !== null) {
                              var result14 = parse_insig();
                              if (result14 !== null) {
                                var result15 = [];
                                var result16 = parse_offset();
                                while (result16 !== null) {
                                  result15.push(result16);
                                  var result16 = parse_offset();
                                }
                                if (result15 !== null) {
                                  var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, fc, wc, l, o) {
            var s = {
              type: 'select',
              line: computeErrorPosition().line,
              fromClause: fc,
              columns: c,
              whereCriteria: wc[0]
            };
            if(l[0]) {
              s.limit = l[0];
            }
            if(o[0]) {
              s.offset = o[0];
            }
            s.id = id;
            if(c && c.length > 0 && c[0].alias) {
              s.usingColumnAliases = true
            }
            s = splitJoins(s);
            delete s.id;
            return s;
          })(result1[2], result1[6], result1[8], result1[10], result1[12])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_showStatement() {
        var cacheKey = 'showStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "show") {
          var result3 = "show";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"show\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 6) === "tables") {
              var result5 = "tables";
              pos += 6;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"tables\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return {
              type: 'show',
              line: computeErrorPosition().line
            }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_describeStatement() {
        var cacheKey = 'describeStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 8) === "describe") {
          var result7 = "describe";
          pos += 8;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"describe\"");
          }
        }
        if (result7 !== null) {
          var result3 = result7;
        } else {
          if (input.substr(pos, 4) === "desc") {
            var result6 = "desc";
            pos += 4;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"desc\"");
            }
          }
          if (result6 !== null) {
            var result3 = result6;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_source();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s) {
            return {
              type: 'describe',
              line: computeErrorPosition().line,
              source: s
            }
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_insertStatement() {
        var cacheKey = 'insertStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "insert") {
          var result3 = "insert";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"insert\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "in") {
              var result5 = "in";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"in\"");
              }
            }
            if (result5 !== null) {
              if (input.substr(pos, 2) === "to") {
                var result6 = "to";
                pos += 2;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"to\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = parse_source();
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result10 = "(";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse_insig();
                        if (result11 !== null) {
                          var result12 = parse_columnsClause();
                          if (result12 !== null) {
                            var result13 = parse_insig();
                            if (result13 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result14 = ")";
                                pos += 1;
                              } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result14 !== null) {
                                var result15 = parse_insig();
                                if (result15 !== null) {
                                  if (input.substr(pos, 6) === "values") {
                                    var result16 = "values";
                                    pos += 6;
                                  } else {
                                    var result16 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"values\"");
                                    }
                                  }
                                  if (result16 !== null) {
                                    var result17 = parse_insig();
                                    if (result17 !== null) {
                                      if (input.substr(pos, 1) === "(") {
                                        var result18 = "(";
                                        pos += 1;
                                      } else {
                                        var result18 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"(\"");
                                        }
                                      }
                                      if (result18 !== null) {
                                        var result19 = parse_csv();
                                        if (result19 !== null) {
                                          if (input.substr(pos, 1) === ")") {
                                            var result20 = ")";
                                            pos += 1;
                                          } else {
                                            var result20 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (result20 !== null) {
                                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20];
                                          } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result1 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, c, v) {
            if(c.length != v.value.length) {
              throw new this.SyntaxError("Line " + computeErrorPosition().line + ": Number of values does not match number of columns.");
            }
            return {
              type: 'insert',
              source: s,
              columns: c,
              values: v.value,
              line: computeErrorPosition().line
            }
          })(result1[5], result1[9], result1[16])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_deleteStatement() {
        var cacheKey = 'deleteStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "delete") {
          var result3 = "delete";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"delete\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 4) === "from") {
              var result5 = "from";
              pos += 4;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"from\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_source();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result9 = parse_whereClause();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, wc) {
            return {
              type: 'delete',
              source: s,
              whereCriteria: wc[0],
              line: computeErrorPosition().line
            }
          })(result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_columnsClause() {
        var cacheKey = 'columnsClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result4 = parse_all();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_fields();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(arr) {
            var aliasCount = 0;
            for(var i = 0; i < arr.length; i++) {
              if(arr[i].alias) {
                aliasCount++;
              }
            }
            if(aliasCount > 0 && aliasCount != arr.length) {
              throw new this.SyntaxError("Line " + computeErrorPosition().line + ": Not all selected columns are using aliases.");
            }
            return arr;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_fromClause() {
        var cacheKey = 'fromClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result6 = parse_source();
        if (result6 !== null) {
          var result3 = [];
          while (result6 !== null) {
            result3.push(result6);
            var result6 = parse_source();
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_commaSource();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_commaSource();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, sarr) {
            return s.concat(sarr);
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_source() {
        var cacheKey = 'source@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_aliasSource();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_nonAliasSource();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_commaSource() {
        var cacheKey = 'commaSource@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_comma();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_source();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s) {
            return s;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_aliasSource() {
        var cacheKey = 'aliasSource@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_identifier();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result5 = "as";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_identifier();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, a) {
            if(symbols[s]) {
              s = "{" + s + "}";
            }
            return {name: s, alias: a};
          })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_nonAliasSource() {
        var cacheKey = 'nonAliasSource@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_identifier();
        var result2 = result1 !== null
          ? (function(s) {
            if(symbols[s]) {
              s = "{" + s + "}";
            }
            return {name: s};
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_whereClause() {
        var cacheKey = 'whereClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "where") {
          var result3 = "where";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"where\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_whereCriteria();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w) {
            return w;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_limit() {
        var cacheKey = 'limit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "limit") {
          var result3 = "limit";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"limit\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_digits();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n) {
            return n;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_offset() {
        var cacheKey = 'offset@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "offset") {
          var result3 = "offset";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"offset\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_digits();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n) {
            return n;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_whereCriteria() {
        var cacheKey = 'whereCriteria@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_cond();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_andCond();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_andCond();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, carr) {
            var ret = [c];
            ret = ret.concat(carr);
            return ret;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_and() {
        var cacheKey = 'and@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 3) === "and") {
          var result0 = "and";
          pos += 3;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"and\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_cond() {
        var cacheKey = 'cond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_eqCond();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_inCond();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_udf();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_andCond() {
        var cacheKey = 'andCond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_and();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_cond();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
            return c;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_eqCond() {
        var cacheKey = 'eqCond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_field();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_operator();
              if (result6 !== null) {
                var result7 = parse_insig();
                if (result7 !== null) {
                  var result8 = parse_rhs();
                  if (result8 !== null) {
                    var result9 = parse_insig();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, rhs) {
            return {operator : '=', lhs : lhs, rhs : rhs};
          })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_inCond() {
        var cacheKey = 'inCond@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_identifier();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "in") {
              var result5 = "in";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"in\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result7 = "(";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    var result13 = parse_selectStatement();
                    if (result13 !== null) {
                      var result9 = result13;
                    } else {
                      var result12 = parse_csv();
                      if (result12 !== null) {
                        var result9 = result12;
                      } else {
                        var result9 = null;;
                      };
                    }
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result11 = ")";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lhs, rhs) {
            return {operator : 'in', lhs : {name: lhs}, rhs: rhs};
          })(result1[0], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_udf() {
        var cacheKey = 'udf@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_identifier();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result10 = parse_udfParams();
                var result7 = result10 !== null ? result10 : '';
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, p) {
            return {
              operator: 'udf',
              name: name,
              args: p
            }
          })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_udfParams() {
        var cacheKey = 'udfParams@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_udfParam();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var result7 = parse_comma();
            if (result7 !== null) {
              var result8 = parse_insig();
              if (result8 !== null) {
                var result9 = parse_udfParam();
                if (result9 !== null) {
                  var result6 = [result7, result8, result9];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var result7 = parse_comma();
              if (result7 !== null) {
                var result8 = parse_insig();
                if (result8 !== null) {
                  var result9 = parse_udfParam();
                  if (result9 !== null) {
                    var result6 = [result7, result8, result9];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, carr) {
            var args = [c];
            collect(carr,',', args, 'value');
            return args;
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_udfParam() {
        var cacheKey = 'udfParam@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_aliasedRef();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_quotedWord();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_quotedDigits();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_csv() {
        var cacheKey = 'csv@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_csvMember();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_commaCsvMember();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_commaCsvMember();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, carr) {
            var res = [c.value];
            collect(carr,',', res, 'value');
            return {
              value: res
            }
            return c;
          })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_commaCsvMember() {
        var cacheKey = 'commaCsvMember@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_insig();
        if (result3 !== null) {
          var result4 = parse_comma();
          if (result4 !== null) {
            var result5 = parse_insig();
            if (result5 !== null) {
              var result6 = parse_csvMember();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {
           return v;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_csvMember() {
        var cacheKey = 'csvMember@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_quotedWord();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_quotedDigits();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_ref();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ref() {
        var cacheKey = 'ref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_identifier();
        var result2 = result1 !== null
          ? (function(i) {
            return {
              value: "{" + i + "}"
            }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_operator() {
        var cacheKey = 'operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var result6 = parse_insig();
        if (result6 !== null) {
          if (input.substr(pos, 1) === "=") {
            var result7 = "=";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result7 !== null) {
            var result8 = parse_insig();
            if (result8 !== null) {
              var result5 = [result6, result7, result8];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_insig();
          if (result2 !== null) {
            if (input.substr(pos, 2) === "in") {
              var result3 = "in";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"in\"");
              }
            }
            if (result3 !== null) {
              var result4 = parse_insig();
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_rhs() {
        var cacheKey = 'rhs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result4 = parse_aliasedRef();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_quotedWord();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_quotedDigits();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_digits();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_aliasedRef() {
        var cacheKey = 'aliasedRef@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_selector();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_selector();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_selector();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {
            return {
              type: 'alias',
              value: append(chars)
            };
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_all() {
        var cacheKey = 'all@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "*") {
          var result1 = "*";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
            return {
              name: '*'
            }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_fields() {
        var cacheKey = 'fields@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_field();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse_insig();
          if (result6 !== null) {
            var result7 = parse_comma();
            if (result7 !== null) {
              var result8 = parse_insig();
              if (result8 !== null) {
                var result9 = parse_field();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse_insig();
            if (result6 !== null) {
              var result7 = parse_comma();
              if (result7 !== null) {
                var result8 = parse_insig();
                if (result8 !== null) {
                  var result9 = parse_field();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(arr) {
            var res = [];
            collect(arr, ",", res);
            return res;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_field() {
        var cacheKey = 'field@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_aliasField();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_nonAliasField();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_aliasField() {
        var cacheKey = 'aliasField@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_fieldName();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "as") {
              var result5 = "as";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"as\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_identifier();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, a) {
            if(symbols[s]) {
              s = "{" + s + "}";
            }
            return {name: s, alias: a};
          })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_nonAliasField() {
        var cacheKey = 'nonAliasField@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_fieldName();
        var result2 = result1 !== null
          ? (function(s) {
            return {name: s};
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_fieldName() {
        var cacheKey = 'fieldName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_selector();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_selector();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_selector();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {
            return append(chars);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_selector() {
        var cacheKey = 'selector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result3 = parse_word();
        if (result3 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result4 = "[";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result4 !== null) {
            var result15 = parse_digits();
            if (result15 !== null) {
              var result5 = result15;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "\"") {
                var result12 = "\"";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result12 !== null) {
                var result13 = parse_qword();
                if (result13 !== null) {
                  if (input.substr(pos, 1) === "\"") {
                    var result14 = "\"";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"\\\"\"");
                    }
                  }
                  if (result14 !== null) {
                    var result11 = [result12, result13, result14];
                  } else {
                    var result11 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos2;
                }
              } else {
                var result11 = null;
                pos = savedPos2;
              }
              if (result11 !== null) {
                var result5 = result11;
              } else {
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "'") {
                  var result8 = "'";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"'\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = parse_qword();
                  if (result9 !== null) {
                    if (input.substr(pos, 1) === "'") {
                      var result10 = "'";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"'\"");
                      }
                    }
                    if (result10 !== null) {
                      var result7 = [result8, result9, result10];
                    } else {
                      var result7 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
                if (result7 !== null) {
                  var result5 = result7;
                } else {
                  var result5 = null;;
                };
              };
            }
            if (result5 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result6 = "]";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"]\"");
                }
              }
              if (result6 !== null) {
                var result2 = [result3, result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_word();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_comma() {
        var cacheKey = 'comma@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === ",") {
          var result0 = ",";
          pos += 1;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\",\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_word();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_word();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_word();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(obj) {
            return append(obj);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_word() {
        var cacheKey = 'word@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z$:]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z$:]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z_0-9:]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_0-9:]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z_0-9:]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9:]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {
            var ret = chars[0];
            for(i = 1; i < chars.length; i++) {
              ret = ret + chars[i].join('');
            }
            return ret;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_quotedWord() {
        var cacheKey = 'quotedWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_sQuotedWord();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_dQuotedWord();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_sQuotedWord() {
        var cacheKey = 'sQuotedWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_qword();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w) {
            return {
              value: w
            }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_dQuotedWord() {
        var cacheKey = 'dQuotedWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_qword();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w) {
            return {
              value: w
            }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_qword() {
        var cacheKey = 'qword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[ -!]/) !== null) {
          var result8 = input.charAt(pos);
          pos++;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("[ -!]");
          }
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          if (input.substr(pos).match(/^[#-&]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[#-&]");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            if (input.substr(pos).match(/^[(-~]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[(-~]");
              }
            }
            if (result6 !== null) {
              var result3 = result6;
            } else {
              if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z]");
                }
              }
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-zA-Z_0-9]");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[ -!]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[ -!]");
            }
          }
          if (result8 !== null) {
            var result3 = result8;
          } else {
            if (input.substr(pos).match(/^[#-&]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[#-&]");
              }
            }
            if (result7 !== null) {
              var result3 = result7;
            } else {
              if (input.substr(pos).match(/^[(-~]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[(-~]");
                }
              }
              if (result6 !== null) {
                var result3 = result6;
              } else {
                if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-zA-Z]");
                  }
                }
                if (result5 !== null) {
                  var result3 = result5;
                } else {
                  if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
                    var result4 = input.charAt(pos);
                    pos++;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("[a-zA-Z_0-9]");
                    }
                  }
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                };
              };
            };
          }
        }
        var result2 = result1 !== null
          ? (function(chars) {
            return chars.join('');
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_quotedDigits() {
        var cacheKey = 'quotedDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_sQuotedDigits();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_dQuotedDigits();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_sQuotedDigits() {
        var cacheKey = 'sQuotedDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_digits();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return {
              value: d
            }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_dQuotedDigits() {
        var cacheKey = 'dQuotedDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_digits();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return {
              value: d
            }
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_return() {
        var cacheKey = 'return@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "return") {
          var result3 = "return";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"return\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_retval();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result11 = parse_route();
                var result7 = result11 !== null ? result11 : '';
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ";") {
                      var result10 = ";";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    var result9 = result10 !== null ? result10 : '';
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(o, r) {
            var ret = {
              type: 'return',
              line: computeErrorPosition().line,
              id: id,
              rhs: o
            };
            if(r) {
              ret.route = r;
            }
            return ret;
          })(result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_retval() {
        var cacheKey = 'retval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_statement();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_retref();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_value();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_retref() {
        var cacheKey = 'retref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_word();
        var result2 = result1 !== null
          ? (function(o) {
            if(symbols[o] === undefined) {
              throw new this.SyntaxError("Line " + computeErrorPosition().line + ": Unresolved symbol '" + o + "'");
            }
            return {
              ref: o
            }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_route() {
        var cacheKey = 'route@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "via") {
          var result3 = "via";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"via\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            if (input.substr(pos, 5) === "route") {
              var result5 = "route";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"route\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_quotedWord();
                if (result7 !== null) {
                  var result8 = parse_insig();
                  if (result8 !== null) {
                    if (input.substr(pos, 5) === "using") {
                      var result9 = "using";
                      pos += 5;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"using\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_insig();
                      if (result10 !== null) {
                        if (input.substr(pos, 6) === "method") {
                          var result11 = "method";
                          pos += 6;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"method\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse_insig();
                          if (result12 !== null) {
                            if (input.substr(pos, 3) === "get") {
                              var result18 = "get";
                              pos += 3;
                            } else {
                              var result18 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"get\"");
                              }
                            }
                            if (result18 !== null) {
                              var result13 = result18;
                            } else {
                              if (input.substr(pos, 4) === "post") {
                                var result17 = "post";
                                pos += 4;
                              } else {
                                var result17 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"post\"");
                                }
                              }
                              if (result17 !== null) {
                                var result13 = result17;
                              } else {
                                if (input.substr(pos, 3) === "put") {
                                  var result16 = "put";
                                  pos += 3;
                                } else {
                                  var result16 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"put\"");
                                  }
                                }
                                if (result16 !== null) {
                                  var result13 = result16;
                                } else {
                                  if (input.substr(pos, 6) === "delete") {
                                    var result15 = "delete";
                                    pos += 6;
                                  } else {
                                    var result15 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"delete\"");
                                    }
                                  }
                                  if (result15 !== null) {
                                    var result13 = result15;
                                  } else {
                                    if (input.substr(pos, 5) === "patch") {
                                      var result14 = "patch";
                                      pos += 5;
                                    } else {
                                      var result14 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"patch\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      var result13 = result14;
                                    } else {
                                      var result13 = null;;
                                    };
                                  };
                                };
                              };
                            }
                            if (result13 !== null) {
                              var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, m) {
            return {
              path: p,
              method: m
            }
          })(result1[4], result1[10])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_value() {
        var cacheKey = 'value@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result9 = parse_object();
        if (result9 !== null) {
          var result1 = result9;
        } else {
          var result8 = parse_stringval();
          if (result8 !== null) {
            var result1 = result8;
          } else {
            var result7 = parse_numberval();
            if (result7 !== null) {
              var result1 = result7;
            } else {
              var result6 = parse_arrayval();
              if (result6 !== null) {
                var result1 = result6;
              } else {
                var result5 = parse_trueval();
                if (result5 !== null) {
                  var result1 = result5;
                } else {
                  var result4 = parse_falseval();
                  if (result4 !== null) {
                    var result1 = result4;
                  } else {
                    var result3 = parse_nullval();
                    if (result3 !== null) {
                      var result1 = result3;
                    } else {
                      var result1 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        var result2 = result1 !== null
          ? (function(v) {
            return {
              object: v,
              type: 'define',
              line: computeErrorPosition().line
            }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_stringval() {
        var cacheKey = 'stringval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_string();
        var result2 = result1 !== null
          ? (function(s) {
            var s = append(s);
            return s.substr(1, s.length - 2);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_numberval() {
        var cacheKey = 'numberval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_number();
        var result2 = result1 !== null
          ? (function(n) {
            return parseFloat(append(n));
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_arrayval() {
        var cacheKey = 'arrayval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_array();
        var result2 = result1 !== null
          ? (function(n) {
            return JSON.parse(append(n));
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_trueval() {
        var cacheKey = 'trueval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_true();
        var result2 = result1 !== null
          ? (function(t) {
            return JSON.parse(t);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_falseval() {
        var cacheKey = 'falseval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_false();
        var result2 = result1 !== null
          ? (function(f) {
            return JSON.parse(f);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_nullval() {
        var cacheKey = 'nullval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_null();
        var result2 = result1 !== null
          ? (function(n) {
            return null;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_object() {
        var cacheKey = 'object@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_struct();
        var result2 = result1 !== null
          ? (function(o) {
           var str = append(o);
           return JSON.parse(str);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_struct() {
        var cacheKey = 'struct@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_insig();
        if (result1 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result2 = "{";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_insig();
            if (result3 !== null) {
              var result8 = parse_members();
              var result4 = result8 !== null ? result8 : '';
              if (result4 !== null) {
                var result5 = parse_insig();
                if (result5 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result6 = "}";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result6 !== null) {
                    var result7 = parse_insig();
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_members() {
        var cacheKey = 'members@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var result6 = parse_pair();
        if (result6 !== null) {
          var result7 = parse_insig();
          if (result7 !== null) {
            var result8 = parse_comma();
            if (result8 !== null) {
              var result9 = parse_insig();
              if (result9 !== null) {
                var result10 = parse_members();
                if (result10 !== null) {
                  var result5 = [result6, result7, result8, result9, result10];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_insig();
          if (result2 !== null) {
            var result3 = parse_pair();
            if (result3 !== null) {
              var result4 = parse_insig();
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_pair() {
        var cacheKey = 'pair@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_insig();
        if (result1 !== null) {
          var result2 = parse_string();
          if (result2 !== null) {
            var result3 = parse_insig();
            if (result3 !== null) {
              if (input.substr(pos, 1) === ":") {
                var result4 = ":";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\":\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_insig();
                if (result5 !== null) {
                  var result6 = parse_value();
                  if (result6 !== null) {
                    var result7 = parse_insig();
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_array() {
        var cacheKey = 'array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result1 !== null) {
          var result2 = parse_insig();
          if (result2 !== null) {
            var result6 = parse_elements();
            var result3 = result6 !== null ? result6 : '';
            if (result3 !== null) {
              var result4 = parse_insig();
              if (result4 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result5 = "]";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_elements() {
        var cacheKey = 'elements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result3 = parse_value();
        if (result3 !== null) {
          var result4 = parse_insig();
          if (result4 !== null) {
            var result5 = parse_comma();
            if (result5 !== null) {
              var result6 = parse_insig();
              if (result6 !== null) {
                var result7 = parse_elements();
                if (result7 !== null) {
                  var result2 = [result3, result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_value();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_string() {
        var cacheKey = 'string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_dquote();
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[ -!]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[ -!]");
            }
          }
          if (result8 !== null) {
            var result4 = result8;
          } else {
            if (input.substr(pos).match(/^[#-[]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[#-[]");
              }
            }
            if (result7 !== null) {
              var result4 = result7;
            } else {
              if (input.substr(pos).match(/^[\]-\uFFFF]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\]-\\uFFFF]");
                }
              }
              if (result6 !== null) {
                var result4 = result6;
              } else {
                if (input.substr(pos).match(/^['\\']/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("['\\\\']");
                  }
                }
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            };
          }
          while (result4 !== null) {
            result2.push(result4);
            if (input.substr(pos).match(/^[ -!]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[ -!]");
              }
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              if (input.substr(pos).match(/^[#-[]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[#-[]");
                }
              }
              if (result7 !== null) {
                var result4 = result7;
              } else {
                if (input.substr(pos).match(/^[\]-\uFFFF]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\]-\\uFFFF]");
                  }
                }
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  if (input.substr(pos).match(/^['\\']/) !== null) {
                    var result5 = input.charAt(pos);
                    pos++;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("['\\\\']");
                    }
                  }
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            }
          }
          if (result2 !== null) {
            var result3 = parse_dquote();
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos3 = pos;
        var result11 = parse_int();
        if (result11 !== null) {
          var result12 = parse_frac();
          if (result12 !== null) {
            var result13 = parse_exp();
            if (result13 !== null) {
              var result10 = [result11, result12, result13];
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result1 = result10;
        } else {
          var savedPos2 = pos;
          var result8 = parse_int();
          if (result8 !== null) {
            var result9 = parse_frac();
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos2;
            }
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result1 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_int();
            if (result5 !== null) {
              var result6 = parse_exp();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result1 = result4;
            } else {
              var result3 = parse_int();
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        var result2 = result1 !== null
          ? (function(c) {
            return append(c);
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_int() {
        var cacheKey = 'int@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        if (input.substr(pos, 1) === "+") {
          var result7 = "+";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        var result5 = result7 !== null ? result7 : '';
        if (result5 !== null) {
          var result6 = parse_digits();
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "-") {
            var result2 = "-";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_digits();
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_frac() {
        var cacheKey = 'frac@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === ".") {
          var result1 = ".";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result1 !== null) {
          var result3 = parse_digits();
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_exp() {
        var cacheKey = 'exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_e();
        if (result1 !== null) {
          var result3 = parse_int();
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_e() {
        var cacheKey = 'e@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === "e") {
          var result6 = "e";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"e\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 2) === "e+") {
            var result5 = "e+";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"e+\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 2) === "e-") {
              var result4 = "e-";
              pos += 2;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"e-\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 1) === "E") {
                var result3 = "E";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 2) === "E+") {
                  var result2 = "E+";
                  pos += 2;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"E+\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 2) === "E-") {
                    var result1 = "E-";
                    pos += 2;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E-\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_digits() {
        var cacheKey = 'digits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return parseInt(append(d));
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_true() {
        var cacheKey = 'true@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 4) === "true") {
          var result0 = "true";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_false() {
        var cacheKey = 'false@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 5) === "false") {
          var result0 = "false";
          pos += 5;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"false\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_null() {
        var cacheKey = 'null@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 4) === "null") {
          var result0 = "null";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"null\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_dquote() {
        var cacheKey = 'dquote@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^["]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\"]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_insig() {
        var cacheKey = 'insig@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_sp();
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_crlf();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_crlf();
          }
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return ''})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_sp() {
        var cacheKey = 'sp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[	]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[	]");
          }
        }
        if (result5 !== null) {
          var result3 = result5;
        } else {
          if (input.substr(pos).match(/^[ ]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[ ]");
            }
          }
          if (result4 !== null) {
            var result3 = result4;
          } else {
            var result3 = null;;
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[	]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[	]");
            }
          }
          if (result5 !== null) {
            var result3 = result5;
          } else {
            if (input.substr(pos).match(/^[ ]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[ ]");
              }
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
        }
        var result2 = result1 !== null
          ? (function() {
            return ''
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_crlf() {
        var cacheKey = 'crlf@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos).match(/^[\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[\\r\\n]");
          }
        }
        var result2 = result1 !== null
          ? (function(c) {
            return c;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();

          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }

          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



    // Utils to establish the right semantic model

    function typeOf(value) {

      var s = typeof value;

      if(s === 'object') {

        if(value) {

          if(typeof value.length === 'number' &&

            !(value.propertyIsEnumerable('length')) &&

            typeof value.splice === 'function') {

            s = 'array';

          }

        }

        else {

          s = 'null';

        }

      }

      return s;

    }

    function append(arr) {

      var str = '';

      if(typeOf(arr) === 'array') {

        for(var i = 0; i < arr.length; i++) {

           if(typeOf(arr[i]) == 'array') {

             str += append(arr[i]);

           }

           else if (typeof arr[i] === 'object') {

             str += JSON.stringify(arr[i].object);

           }

           else {

             str += arr[i];

           }

        }

      }

      else {

        str = str + arr;

      }

      return str;

    }

    function merge(arr) {

      var i, ret = {};

      for(i = 0; i < arr.length; i++) {

        for(p in arr[i]) {

          ret[p] = arr[i][p];

        }

      }

      return ret;

    }



    function collect(arr, separator, ret, f) {

      for(var i = 0; i < arr.length; i++) {

        if(typeOf(arr[i]) == 'array') {

          collect(arr[i], separator, ret, f);

        }

        else if(arr[i] != "" && arr[i] != separator) {

          if(f) {

            ret.push(arr[i][f]);

          }

          else {

            ret.push(arr[i]);

          }

        }

      }

    }



    function indexOf(names, name) {

      for(var i = 0; i < names.length; i++) {

        if(names[i].name === name) {

          return i;

        }

      }

      return -1;

    }



    function splitJoins(statement, cb) {

      var main = statement, join, i, cond, column, sel;

      if(statement.fromClause.length === 1) {

          return main;

      }



      if(statement.fromClause.length > 2) {

        throw new this.SyntaxError("Line: " + statement.line + ": Statement must have no more than two tables in the from clause");

      }



      main = {

          type: 'select',

          line: statement.line,

          columns: [],

          selected: [],

          extras: [], // used only during selection

          whereCriteria: []

      };

      join = {

          type: 'select',

          line: statement.line,

          columns: [],

          extras: [], // used only during selection

          whereCriteria: []

      };

      main.fromClause = [statement.fromClause[0]];

      join.fromClause = [statement.fromClause[1]];

      //  Split relevant columns into main and joiner

      for(i = 0; i < statement.columns.length; i++) {

          column = statement.columns[i];

          if(column.name.indexOf(main.fromClause[0].alias + '.') === 0) {

              // Keep it in main

              if(indexOf(main.columns, column.name) < 0) {

                  main.columns.push(column);

                  sel = {from: 'main'};

                  if(column.alias) {

                      sel.name = column.alias;

                  }

                  else {

                      sel.index = main.columns.length - 1;

                  }

                  main.selected.push(sel);

              }

          }

          else {

              // Keep it in join

              if(indexOf(join.columns, column.name) < 0) {

                  join.columns.push(column);

                  sel = {from: 'joiner'};

                  if(column.alias) {

                      sel.name = column.alias;

                  }

                  else {

                      sel.index = join.columns.length - 1;

                  }

                  main.selected.push(sel);

              }

          }

      }

      if(!statement.whereCriteria) {

          throw new this.SyntaxError("Line " + statement.line + ": Missing join condition in statement ");

      }

      if(statement.whereCriteria) {

          for(i = 0; i < statement.whereCriteria.length; i++) {

              cond = statement.whereCriteria[i];

              if(cond.rhs.type && cond.rhs.type === 'alias') {

                  // This is the join condition

                  var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');

                  if(index === 0) {

                      // Include only once

                      if(indexOf(main.columns, cond.rhs.value) < 0) {

                          var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');

                          main.columns.push({

                              name: cond.rhs.value

                          })

                          if(statement.usingColumnAliases) {

                              main.columns[main.columns.length - 1].alias = cond.rhs.alias ||

                                            cond.rhs.value.substr(index + main.fromClause[0].alias.length + 1);

                          }

                          main.extras.push(main.columns.length -1);

                      }

                      if(indexOf(join.columns, cond.lhs.name) < 0) {

                          var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');

                          join.columns.push({

                              name: cond.lhs.name

                          });

                          if(statement.usingColumnAliases) {

                              join.columns[join.columns.length - 1].alias = cond.lhs.alias ||

                                                 cond.lhs.name.substr(index + join.fromClause[0].alias.length + 1)

                          }

                          join.extras.push(join.columns.length - 1);

                      }

                  }

                  else {

                      // Include only once

                      if(indexOf(join.columns, cond.rhs.value) < 0) {

                          var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');

                          join.columns.push({

                              name: cond.rhs.value

                          })

                          if(statement.usingColumnAliases) {

                              join.columns[join.columns.length - 1].alias = cond.rhs.alias ||

                                          cond.rhs.value.substr(index + join.fromClause[0].alias.length + 1)

                          }

                          join.extras.push(join.columns.length - 1);

                      }

                      if(indexOf(main.columns, cond.lhs.name) < 0) {

                          var index = cond.lhs.name.indexOf(main.fromClause[0].alias + '.');

                          main.columns.push({

                              name: cond.lhs.name

                          });

                          if(statement.usingColumnAliases) {

                              main.columns[main.columns.length - 1].alias = cond.lhs.alias ||

                                          cond.lhs.name.substr(index + main.fromClause[0].alias.length + 1)

                          }



                          main.extras.push(main.columns.length -1);

                      }

                  }

                  join.whereCriteria.push(cond);

              }

              else {

                  if(cond.lhs.name.indexOf(main.fromClause[0].alias + '.') === 0) {

                      main.whereCriteria.push(cond);

                  }

                  else if(cond.lhs.name.indexOf(join.fromClause[0].alias + '.') === 0) {

                      join.whereCriteria.push(cond);

                  }

              }

          }

      }



      // TODO: Assertions and warnings

      if(join.whereCriteria && join.whereCriteria.length > 0) {

          if(indexOf(main.columns, join.whereCriteria[0].rhs.value) >= 0) {

              join.whereCriteria[0].rhs.joiningColumn = indexOf(main.columns, join.whereCriteria[0].rhs.value);

          }

          else {

              // Flip the condition

              var temp = join.whereCriteria[0].rhs.value;

              join.whereCriteria[0].rhs.value = join.whereCriteria[0].lhs.name;

              join.whereCriteria[0].lhs = {

                  name: temp

              }

              temp = join.whereCriteria[0].rhs.value;

              join.whereCriteria[0].rhs.joiningColumn = indexOf(main.columns, temp);

          }

      }

      main.joiner = join;



      // Reset the joiningColumn to the alias where columns are aliased

      // The joining column is an index by default.

      var joiningColumn;

      if(main.columns[join.whereCriteria[0].rhs.joiningColumn].alias) {

          for(var i = 0; i < main.columns.length; i++) {

              if(main.columns[i].name === main.joiner.whereCriteria[0].rhs.value) {

                  joiningColumn = main.columns[i].alias;

                  break;

              }

          }

          if(joiningColumn) {

              main.joiner.whereCriteria[0].rhs.joiningColumn = joiningColumn;

          }

          else {

              throw new this.SyntaxError("Line " + main.line + ": Joining column " + joiningColumn + " could not resolved. File a bug.");

          }

      }



      // Verify that all columns have prefixes

      for(var i = 0; i < main.columns.length; i++) {

          var prefixed = false;

           for(var j = 0; j < main.fromClause.length; j++) {

              if(main.columns[i].name.indexOf(main.fromClause[j].alias + '.') === 0) {

                  prefixed = true;

                  break;

              }

          }

          if(!prefixed) {

              throw new this.SyntaxError("Line " + main.line + ": Column " + main.columns[i].name + " not prefixed or prefix not found");

          }

      }

      for(var i = 0; i < join.columns.length; i++) {

          var prefixed = false;

           for(var j = 0; j < join.fromClause.length; j++) {

              if(join.columns[i].name.indexOf(join.fromClause[j].alias + '.') === 0) {

                  prefixed = true;

                  break;

              }

          }

          if(!prefixed) {

              throw new this.SyntaxError("Line " + main.line + ": Column " + join.columns[i].name + " not prefixed or prefix not found");

          }

      }



      return main;

    }

    // Symbol table

    var symbols = {};

    var lincr = 0;

    var id = 0;



      var result = parseFunctions[startRule]();

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();