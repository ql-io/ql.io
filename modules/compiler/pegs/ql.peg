
/*
 * Copyright 2011 eBay Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
    // Utils to establish the right semantic model
    function typeOf(value) {
        var s = typeof value;
        if(s === 'object') {
            if(value) {
                if(typeof value.length === 'number' &&
                   !(value.propertyIsEnumerable('length')) &&
                   typeof value.splice === 'function') {
                    s = 'array';
                }
            }
            else {
                s = 'null';
            }
        }
        return s;
    }

    function append(arr) {
        var str = '';
        if(typeOf(arr) === 'array') {
            for(var i = 0; i < arr.length; i++) {
                if(typeOf(arr[i]) == 'array') {
                    str += append(arr[i]);
                }
                else if (typeof arr[i] === 'object') {
                    str += JSON.stringify(arr[i].object);
                }
                else {
                    str += arr[i];
                }
            }
        }
        else {
            str = str + arr;
        }
        return str;
    }

    function merge(arr) {
        var i, ret = {};
        for(i = 0; i < arr.length; i++) {
            for(p in arr[i]) {
                ret[p] = arr[i][p];
            }
        }
        return ret;
    }

    function collect(arr, separator, ret, f) {
        for(var i = 0; i < arr.length; i++) {
            if(typeOf(arr[i]) == 'array') {
                collect(arr[i], separator, ret, f);
            }
            else if(arr[i] != "" && arr[i] != separator) {
                if(f && arr[i][f]) {
                    ret.push(arr[i][f]);
                }
                else {
                    ret.push(arr[i]);
                }
            }
        }
    }

    function indexOf(names, name) {
        for(var i = 0; i < names.length; i++) {
            if(names[i].name === name) {
                return i;
            }
        }
        return -1;
    }

    // Split join statements in to main and a joiner. The main statement is the independent
    // and the joiner depends on the outcome of the main statement. In this process, we split
    // the columns in the columns clause across the main and joiner, and merge them at runtime
    // using the 'selected' array below.
    function splitJoins(statement, cb) {
        var main = statement, join, i, cond, column, sel;

        // No need to split since there is no join.
        if(statement.fromClause.length === 1) {
            return main;
        }

        // Can't deal with joins between more than two tables.
        if(statement.fromClause.length > 2) {
            throw new this.SyntaxError("Line: " + statement.line + ": Statement must have no more than two tables in the from clause");
        }

        // Initialize the main statement.
        main = {
            type: 'select',
            line: statement.line,
            columns: [],
            selected: [], // These are the columns to be picked up at the end
            extras: [], // Used only during selection discared laer.
            whereCriteria: []
        };

        if(statement.extras) {
            // These are extra columns included the columns array - contain UDF args not already
            // listed in the columns clause
            main.udfExtras = statement.extras;
        }

        // Initialize the joiner
        join = {
            type: 'select',
            line: statement.line,
            columns: [],
            extras: [], // used only during selection
            whereCriteria: []
        };

        main.fromClause = [statement.fromClause[0]];
        join.fromClause = [statement.fromClause[1]];

        //  Split relevant columns into main and joiner
        for(i = 0; i < statement.columns.length; i++) {
            column = statement.columns[i];
            if(column.operator === 'udf') {
                // Nothing to do
            }
            else if(column.name.indexOf(main.fromClause[0].alias + '.') === 0) {
                // Keep it in main
                if(indexOf(main.columns, column.name) < 0) {
                    main.columns.push(column);
                    sel = {from: 'main'};
                    if(column.alias) {
                        sel.name = column.alias;
                    }
                    else {
                        sel.index = main.columns.length - 1;
                    }
                    if(column.for) sel.for = column.for;
                    main.selected.push(sel);
                }
            }
            else {
                // Keep it in join
                if(indexOf(join.columns, column.name) < 0) {
                    join.columns.push(column);
                    sel = {from: 'joiner'};
                    if(column.alias) {
                        sel.name = column.alias;
                    }
                    else {
                        sel.index = join.columns.length - 1;
                    }
                    if(column.for) sel.for = column.for;
                    main.selected.push(sel);
                }
            }
        }

        // We need a where clause for the join
        if(!statement.whereCriteria) {
            throw new this.SyntaxError("Line " + statement.line + ": Missing join condition in statement ");
        }

        if(statement.whereCriteria) {
            for(i = 0; i < statement.whereCriteria.length; i++) {
                cond = statement.whereCriteria[i];
                if(cond.operator === 'udf') {
                    main.whereCriteria.push(cond);
                }
                else if(cond.rhs.type && cond.rhs.type === 'alias') {
                    // This is the join condition
                    var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');
                    if(index === 0) {
                        // Include only once
                        if(indexOf(main.columns, cond.rhs.value) < 0) {
                            var index = cond.rhs.value.indexOf(main.fromClause[0].alias + '.');
                            main.columns.push({
                                name: cond.rhs.value,
                                type: 'column'
                            })
                            if(statement.usingColumnAliases) {
                                main.columns[main.columns.length - 1].alias = cond.rhs.alias ||
                                          cond.rhs.value.substr(index + main.fromClause[0].alias.length + 1);
                            }
                            main.extras.push(main.columns.length -1);
                        }
                        if(indexOf(join.columns, cond.lhs.name) < 0) {
                            var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');
                            join.columns.push({
                                name: cond.lhs.name,
                                type: 'column'
                            });
                            if(statement.usingColumnAliases) {
                                join.columns[join.columns.length - 1].alias = cond.lhs.alias ||
                                               cond.lhs.name.substr(index + join.fromClause[0].alias.length + 1)
                            }
                            join.extras.push(join.columns.length - 1);
                        }
                    }
                    else {
                        // Include only once
                        if(indexOf(join.columns, cond.rhs.value) < 0) {
                            var index = cond.rhs.value.indexOf(join.fromClause[0].alias + '.');
                            join.columns.push({
                                name: cond.rhs.value,
                                type: 'column'
                            })
                            if(statement.usingColumnAliases) {
                                join.columns[join.columns.length - 1].alias = cond.rhs.alias ||
                                        cond.rhs.value.substr(index + join.fromClause[0].alias.length + 1)
                            }
                            join.extras.push(join.columns.length - 1);
                        }
                        if(indexOf(main.columns, cond.lhs.name) < 0) {
                            var index = cond.lhs.name.indexOf(main.fromClause[0].alias + '.');
                            main.columns.push({
                                name: cond.lhs.name,
                                type: 'column'
                            });
                            if(statement.usingColumnAliases) {
                                main.columns[main.columns.length - 1].alias = cond.lhs.alias ||
                                        cond.lhs.name.substr(index + main.fromClause[0].alias.length + 1)
                            }

                            main.extras.push(main.columns.length -1);
                        }
                    }
                    join.whereCriteria.push(cond);
                }
                else {
                    if(cond.lhs.name.indexOf(main.fromClause[0].alias + '.') === 0) {
                        main.whereCriteria.push(cond);
                    }
                    else if(cond.lhs.name.indexOf(join.fromClause[0].alias + '.') === 0) {
                        join.whereCriteria.push(cond);
                    }
                }
            }
        }

        if(join.whereCriteria && join.whereCriteria.length > 0) {
            if(indexOf(main.columns, join.whereCriteria[0].rhs.value) >= 0) {
                join.whereCriteria[0].rhs.joiningColumn = indexOf(main.columns, join.whereCriteria[0].rhs.value);
            }
            else {
                // Flip the condition
                var temp = join.whereCriteria[0].rhs.value;
                join.whereCriteria[0].rhs.value = join.whereCriteria[0].lhs.name;
                join.whereCriteria[0].lhs = {
                    name: temp
                }
                temp = join.whereCriteria[0].rhs.value;
                join.whereCriteria[0].rhs.joiningColumn = indexOf(main.columns, temp);
            }
        }
        main.joiner = join;

        // Reset the joiningColumn to the alias where columns are aliased
        // The joining column is an index by default.
        var joiningColumn;
        if(main.columns[join.whereCriteria[0].rhs.joiningColumn].alias) {
            for(var i = 0; i < main.columns.length; i++) {
                if(main.columns[i].name === main.joiner.whereCriteria[0].rhs.value) {
                    joiningColumn = main.columns[i].alias;
                    break;
                }
            }
            if(joiningColumn) {
                main.joiner.whereCriteria[0].rhs.joiningColumn = joiningColumn;
            }
            else {
                throw new this.SyntaxError("Line " + main.line + ": Joining column " + joiningColumn + " could not resolved. File a bug.");
            }
        }

        // Verify that all columns have prefixes
        for(var i = 0; i < main.columns.length; i++) {
            if(!main.columns[i].operator) {
                var prefixed = false;
                 for(var j = 0; j < main.fromClause.length; j++) {
                    if(main.columns[i].name.indexOf(main.fromClause[j].alias + '.') === 0) {
                        prefixed = true;
                        break;
                    }
                }
                if(!prefixed) {
                    throw new this.SyntaxError("Line " + main.line + ": Column " + main.columns[i].name + " not prefixed or prefix not found");
                }
            }
        }
        for(var i = 0; i < join.columns.length; i++) {
            if(!join.columns[i].operator) {
                var prefixed = false;
                for(var j = 0; j < join.fromClause.length; j++) {
                    if(join.columns[i].name.indexOf(join.fromClause[j].alias + '.') === 0) {
                        prefixed = true;
                        break;
                    }
                }
                if(!prefixed) {
                    throw new this.SyntaxError("Line " + main.line + ": Column " + join.columns[i].name + " not prefixed or prefix not found");
                }
            }
        }

        // Redo the UDF args since the indexes of column type args would be different now
        // The index for each column arg should map to the 'selected' array so that we can pick up
        // values of args from the 'selected' array.
        for(var i = 0; i < main.whereCriteria.length; i++) {
            var where = main.whereCriteria[i];
            if(where.operator === 'udf') {
                for(var j = 0; j < where.args.length; j++) {
                    if(where.args[j].type === 'column') {
                        // What is the prefix?
                        var index = where.args[j].name.indexOf('.');
                        if(index < 0) {
                            throw new this.SyntaxError("Line " + main.line + ": Arg " + where.args[j].name + " not prefixed");
                        }
                        var prefix = where.args[j].name.substr(0, index);
                        var name = where.args[j].name.substr(index + 1);
                        if(main.fromClause[0].alias === prefix) {
                            // From main - find matching selected[] element where from = main and name = arg.name.
                            for(var selected = 0; selected < main.selected.length; selected++) {
                                if(main.selected[selected].from === 'main') {
                                    if(main.selected[selected].name && main.selected[selected].name === name) {
                                        where.args[j].index = selected;
                                    }
                                    else if(main.selected[selected].hasOwnProperty('index') &&
                                        main.columns[main.selected[selected].index].name === where.args[j].name) {
                                        where.args[j].index = selected;
                                    }
                                }
                            }
                        }
                        else if(main.joiner.fromClause[0].alias === prefix) {
                            // From joiner - find matching selected[] element where from = joiner and name = arg.name.
                            for(var selected = 0; selected < main.selected.length; selected++) {
                                if(main.selected[selected].from === 'joiner') {
                                    if(main.selected[selected].name && main.selected[selected].name === name) {
                                        where.args[j].index = selected;
                                    }
                                    else if(main.selected[selected].hasOwnProperty('index') &&
                                        join.columns[main.selected[selected].index].name === where.args[j].name) {
                                        where.args[j].index = selected;
                                    }
                                }
                            }
                        }
                        else {
                            throw new this.SyntaxError("Line " + main.line + ": Alias of arg " + where.args[j].name + " not found");
                        }
                    }
                }
            }
        }

        return main;
    }

    // Symbol table - to check for unreferenced variables
    var symbols = {};
    var lincr = 0;
    var id = 0;
}

///////////////////////////////////////////////////////////

//
// The bigbang
//
start = crlf* larr:LineCrlf* insig r:Return? insig crlf* insig carr:Comment* insig crlf*{
    ret = [];
    ret = ret.concat(larr);
    if(r) {
        ret.push(r);
    }
    ret = ret.concat(carr);
    return ret;
}

// A line in a statement
LineCrlf = l:Line crlf* {
    return l;
}

// Statement can be an assignment or a comemnt
Line = sp l:(Assign / Comment) {
    if(l.type !== 'comment') {
        l.id = id++;
    }
    return l;
}

// In an assignment, the RHS is optional to support single statement scripts.
Assign = a:Output? s:StatementOrObject insig ';'? insig {
    if(a) {
        s.assign = a.assign;
        s.line = a.line;
    }

    // Add LHS to the symbol table
    symbols[a.assign] = {};
    return s;
}

// A statement or object
StatementOrObject = Statement / Value / CallUdf

CallUdf = u:UDF {
    u.type = 'define';
    u.udf = u.name;
    delete u.operator;
    return u;
}

Statement = SelectStatement / ShowRoutesStatement / ShowStatement / DescribeRouteStatement /
            DescribeStatement / InsertStatement / DeleteStatement / CreateStatement

Output = insig w:Word insig '=' insig {
    return {
        line: line,
        assign: w
    }
}

Comment = '--' sp c:[\u0020-\uffff]* crlf? {
    return {
        line: line,
        type: 'comment',
        text: c.join('')
    }
}

// create table statement
CreateStatement = 'create' insig 'table' insig s:NonAliasSource insig v:Verb* {
    var s = {
        type: 'create',
        name: s.name,
        line: line
    };
    for(i = 0; i < v.length; i++) {
        s[v[i].type] = v[i];
        delete v[i].type;
    }
    return s;
}

Type = 'select' / 'insert' / 'delete' / 'update'
URI = QuotedWord

Verb = 'on' insig t:Type insig m:VerbName insig u:URI insig  a:WithAliases? h:UsingHeaders?
            d:UsingDefaults? p:UsingMonkeyPatch? insig b:UsingBodyTemplate? insig
            auth:AuthenticateUsing? insig r:ResultSet? insig exp:Expires? {
    var ret = {
        type: t,
        method: m,
        uri: u.value,
        defaults: d || {},
        aliases: a || {},
        headers: h || {},
        resultSet: r || '',
        cache: exp || {}
    };
    if(auth && auth.length > 0) {
        ret.auth = auth;
    }
    if(p) ret.patch = p;
    ret.body = b;
    return ret;
}

// A verb maps to an HTTP method. Don't ask for custom methods. Just use POST
VerbName = GetFrom / PostTo / PutTo / Delete / Patch
GetFrom = 'get' insig 'from' {
    return 'get'
}
PostTo = 'post' insig 'to' {
    return 'post'
}
PutTo = 'put' insig 'to' {
    return 'put'
}
Delete = 'delete' {
    return 'delete'
}
Patch = 'patch' {
    return 'patch'
}

// Clauses on the create table statement
UsingDefaults = 'using' insig 'defaults' d:NVPs {
    return merge(d);
}
UsingHeaders = 'using' insig 'headers' d:NVPs {
    return merge(d);
}
UsingMonkeyPatch = 'using' insig 'patch' insig t:QuotedWord {
    return t.value;
}
UsingBodyTemplate = 'using' insig 'bodyTemplate' insig t:QuotedWord insig 'type' insig
                            m:QuotedWord insig f:ForEachMember? insig {
    var ret = {
        template: t.value,
        type: m.value
    }
    if(f) {
        ret.foreach = f;
    }
    return ret;
}

WithPart = 'with' insig 'part' insig p:QuotedWord{
    return p;
}

// This clause is used to split POST requests
ForEachMember = 'foreach' insig id:QuotedWord {
  return id.value;
}
WithAliases = 'with' insig 'aliases' p:NVPs {
    return merge(p);
}
AuthenticateUsing = ('authenticate' / 'auth') insig 'using' insig m:QuotedWord {
    return m.value;
}
ResultSet = 'resultset' insig r:QuotedWord {
    return r.value;
}

// Comma-separated name=value pairs
NVPs = n:NVP narr:(CNVP)* {
  var ret = [n];
  ret = ret.concat(narr);
  return ret;
}
CNVP = ',' n:NVP {
    return n;
}
NVP = insig lhs:(Field/QuotedWord) insig '=' insig rhs:RHS insig {
    var  o = {};
    lhs = lhs.name || lhs;
    o[lhs.hasOwnProperty('value') ? lhs.value : lhs] = rhs.hasOwnProperty('value') ? rhs.value : rhs;
    return o;
}
Expires = insig 'expires' insig d:Digits insig {
    return {
        expires: d
    }
}

// Select statement
SelectStatement = s:Select insig c:ColumnsClause insig 'from' insig fc:FromClause insig
                  wc:WhereClause* insig l:Limit* insig o:Offset* {
    var s = {
        type: s.type,
        line: s.line,
        fromClause: fc,
        columns: c,
        whereCriteria: wc[0]
    };
    if(l[0]) {
        s.limit = l[0];
    }
    if(o[0]) {
        s.offset = o[0];
    }
    s.id = id;
    if(c && c.length > 0 && c[0].alias) {
        s.usingColumnAliases = true
    }

    // Extras from where clause - there are non-literal args of UDFs in the where clause
    if(s.whereCriteria && typeOf(s.columns) === 'array') {
        for(var i = 0; i < s.whereCriteria.length; i++) {
            var where = s.whereCriteria[i];
            if(where.operator === 'udf') {
                for(var j = 0; j < where.args.length; j++) {
                    if(where.args[j].type === 'column') {
                        // If this column is not already selected, included it now.
                        for(var c = 0; c < s.columns.length; c++) {
                            if(s.columns[c].name === where.args[j].name) {
                                if(s.columns[c].alias) {
                                    where.args[j].alias = s.columns[c].alias
                                    delete where.args[j].index;
                                }
                                else {
                                    where.args[j].index = c;
                                }
                                break;
                            }
                        }
                        if(!where.args[j].hasOwnProperty('alias') && !where.args[j].hasOwnProperty('index')) {
                            s.extras = s.extras || [];
                            s.extras.push(s.columns.length);
                            var extra = {name: where.args[j].name, type: 'column'};
                            // Index or name into selected columns
                            if(s.columns[0].alias) {
                                extra.alias = where.args[j].name;
                                where.args[j].alias = extra.alias;
                            }
                            else {
                                where.args[j].index = s.columns.length;
                            }
                            extra.for = 'udf';
                            s.columns.push(extra);
                        }
                    }
                }
            }
        }
    }
    s = splitJoins(s);
    delete s.id;
    return s;
}

Select = s:'select' {
    return {
        type: 'select',
        line: line
    }
}

// Show statements
ShowRoutesStatement = s:Show insig 'routes' {
    return {
        type: 'show routes',
        line: s.line
    }
}

ShowStatement = s:Show insig 'tables' {
    return {
        type: 'show',
        line: s.line
    }
}

Show = 'show' {
    return {
        line: line
    }
}

// Describe statements
Describe = (('describe') / ('desc')) {
    return {
        line: line
    }
}
DescribeRouteStatement = d:Describe insig 'route' insig p:QuotedWord insig 'using' insig 'method'
                         insig m:('get' / 'post' / 'put' / 'delete' / 'patch') {
    return {
        type: 'describe route',
        line: d.line,
        path: p,
        method: m
    }
}

DescribeStatement = d:Describe insig s:Source {
    return {
        type: 'describe',
        line: d.line,
        source: s
    }
}

ColumnsParen = '(' insig c:ColumnsClause insig ')' {
    return c
}

ValuesParen = 'values' insig '(' insig v:CSV  insig ')'{
    return v
}

// Insert Statement
InsertStatement = 'insert' insig 'into' insig s:Source insig c:ColumnsParen? insig v:ValuesParen?  insig wp:WithPart? {
    if (!v && c){
    throw new this.SyntaxError("Line " + line + ": Values are required if columns are specified.");

}
if(c && c.length != v.value.length) {
    throw new this.SyntaxError("Line " + line + ": Number of values does not match number of columns.");
}
if (!c && v && v.value.length > 1){
    throw new this.SyntaxError("Line " + line + ": Values do not have paired columns.");
}
ret = {
    type: 'insert',
    source: s,
    values: v.value,
    line: line
}
if (v){
    if (c){
        ret.columns = c,
            ret.values = v.value;
    }else{
        ret.values = v.value[0];
    }
}
if (wp){
    ret.parts = wp.value;
}
return ret;
}

// Delete statement
DeleteStatement = 'delete' insig 'from' insig s:Source insig wc:WhereClause* {
    return {
        type: 'delete',
        source: s,
        whereCriteria: wc[0],
        line: line
    }
}

// Various clauses
ColumnsClause = arr:(All / Fields) {
    var aliasCount = 0;
    for(var i = 0; i < arr.length; i++) {
        if(arr[i].alias) {
            aliasCount++;
        }
    }
    if(aliasCount > 0 && aliasCount != arr.length) {
        throw new this.SyntaxError("Line " + line + ": Not all selected columns are using aliases.");
    }
    return arr;
}

FromClause = s:Source+ sarr:(CommaSource*) {
    return s.concat(sarr);
}

Source = AliasSource / NonAliasSource

CommaSource = insig Comma insig s:Source {
    return s;
}

AliasSource = (s:Name insig 'as' insig a:Name) {
    if(symbols[s]) {
        s = "{" + s + "}";
    }
    return {name: s, alias: a};
}

NonAliasSource = s:Name {
    if(symbols[s]) {
        s = "{" + s + "}";
    }
    return {name: s};
}

// Where clause
WhereClause = 'where' insig w:WhereCriteria {
    return w;
}

// Limit
Limit = 'limit' insig n:Digits {
    return n;
}

// Offset
Offset = 'offset' insig n:Digits {
    return n;
}

WhereCriteria = c:Cond carr:(AndCond)* {
    var ret = [c];
    ret = ret.concat(carr);
    return ret;
}

And = 'and'

// Conditions in the where clause
Cond = (EqCond / InCond / UDF)

AndCond = insig And insig c:Cond {
    return c;
}

EqCond = insig lhs:Field insig Operator insig rhs:RHS insig {
    return {operator : '=', lhs : lhs, rhs : rhs};
}

InCond = lhs:Name insig 'in' insig '(' insig rhs:(SelectStatement / CSV) insig ')' {
    return {operator : 'in', lhs : {name: lhs}, rhs: rhs};
}

CSV =  insig c:CSVMember insig carr:(CommaCSVMember*) {
    var res = [c.value || c];
    collect(carr,',', res, 'value');
    return {
        value: res
    }
}

CommaCSVMember = (insig Comma insig v:CSVMember) {
    return v;
}

CSVMember = QuotedWord/QuotedDigits/Digits/Ref

Ref = i:Name {
    return {
        value: "{" + i + "}"
    }
}

Operator = (insig '=' insig/ insig 'in' insig)

RHS = r:(AliasedRef/QuotedWord/QuotedDigits/Digits) {
    if(!r.hasOwnProperty('value')) {
        r = {
            value: r
        }
    }
    return r;
}

AliasedRef = p:JSONPath {
    return {
        type: 'alias',
        value: p
    };
}

All = '*' {
    return {
        name: '*',
        type: 'column'
    }
}
Fields = arr:(Field (insig Comma insig Field)*) {
    var res = [];
    collect(arr, ",", res);
    return res;
}

Field = f:(AliasField / NonAliasField ) {
    return f;
}

AliasField = n:NonAliasField insig 'as' insig a:Name {
    if(symbols[n]) {
        n = "{" + n + "}";
    }
    n.alias = a;
    return n;
}

NonAliasField = UDF / Column

UDF = name:Name insig '(' insig p:UDFParams? insig ')' {
    return {
        operator: 'udf',
        name: name,
        args: p
    }
}

UDFParams = c:UDFParam insig carr:(Comma insig UDFParam)* {
    var res = [c];
    collect(carr,',', res);
    return res;
}

UDFParam = LiteralParam/Column

LiteralParam = j:JSON {
    return {
        type: 'literal',
        value: j
    }
}
ParamDigits = d:Digits {
    return {
        type: 'literal',
        value: d
    }
}

Column = p:JSONPath {
    return {
        type: 'column',
        name: p
    }
}

FieldName = chars:((Selector ('.' Selector)*)) {
    return append(chars);
}

Selector = Word ('[' (Digits / QuotedWordVal / '*' / JSONPath) ']')* / Word

Comma = ','

Name = obj:(Word ('.' Word)*) {
    return append(obj);
}

Word = chars:([a-zA-Z$:][a-zA-Z_0-9:]*)  {
    var ret = chars[0];
    for(i = 1; i < chars.length; i++) {
        ret = ret + chars[i].join('');
    }
    return ret;
}

QuotedWordVal = q:QuotedWord {
    return '"' + q.value + '"';
}

QuotedWord = sQuotedWord / dQuotedWord

sQuotedWord = '\'' c:([^'] / ' ')* '\'' {
    return {
        value: c.join('')
    }
}

dQuotedWord = '"' c:([^"] / ' ')* '"' {
    return {
        value: c.join('')
    }
}

QuotedDigits = sQuotedDigits / dQuotedDigits

sQuotedDigits = '\'' d:Digits '\'' {
    return {
        value: d
    }
}
dQuotedDigits = '"' d:Digits '"' {
    return {
        value: d
    }
}

///////////////////////////////////////////////////////////

Ret = 'return' {
    return {
        line: line
    }
}

Return = re:Ret insig o:RetVal insig r:Route? insig ';'? {
    var ret = {
        type: 'return',
        line: re.line,
        id: id,
        rhs: o
    };
    if(r) {
        ret.route = r;
    }
    return ret;
}

RetVal = Statement / CallUdf / RetRef / Value

RetRef = o:Word {
    if(symbols[o] === undefined) {
        throw new this.SyntaxError("Line " + line + ": Unresolved symbol '" + o + "'");
    }
    return {
        ref: o
    }
}

Route = 'via' insig 'route' insig p:QuotedWord insig 'using' insig 'method' insig
            m:('get' / 'post' / 'put' / 'delete' / 'patch') insig h:UsingHeaders? {
    return {
        path: p,
        method: m,
        headers: h || {}
    }
}

// JSON
JSON = Object / StringVal / NumberVal / ArrayVal / TrueVal / FalseVal / NullVal
Value = v:JSON {
    return {
        object: v === "__null__" ? null : v,
        type: 'define',
        line: line
    }
}

StringVal = s:String {
    var s = append(s);
    return s.substr(1, s.length - 2);
}

NumberVal = n:Number {
    return parseFloat(append(n));
}

ArrayVal = n:Array {
    return JSON.parse(append(n));
}

TrueVal = t:True {
    return JSON.parse(t);
}

FalseVal = f:False {
    return JSON.parse(f);
}

NullVal = n:Null {
    return "__null__";
}
Object = o:Struct {
    var str = append(o);
    return JSON.parse(str);
}

Struct = insig '{' insig m:Members? insig '}' insig

Members = (Pair insig Comma insig Members) / (insig Pair insig)

Pair = insig String insig ':' insig Value insig

Array = '[' insig Elements? insig ']'

Elements = (Value insig Comma insig Elements) / Value

String = StringLiteral

Number = c:((Int Frac Exp) / (Int Frac) / (Int Exp) / (Int)) {
    return append(c);
}

Int =('+'? Digits) / ('-' Digits)

Frac = '.' Digits?

Exp = e Int?

e = ('e') / ('e+') / ('e-') / 'E' / ('E+') / ('E-')

Digits = d:[0-9]+ {
    return parseInt(append(d));
}

True = 'true'

False = 'false'

Null = 'null'

Comma = ','

dquote = [\u0022]

squote = [\u0027]

insig = sp crlf* sp { return ''}

sp = ([\x09]/[\x20])*{
  return ''
}

crlf = c:[\x0d\x0a] {
  return c;
}

//
// JSONPath
//
JSONPath = i:Identifier e:ExtIdentifier? {
    return i + e;
}

ExtIdentifier = c:( Descendent / Indexed )* {
    return c.join('');
}

Indexed = '[' p:(PositiveNumber / Property / Expr) ']' {
    return '[' + p + ']';
}

Property = StringLiteral

Expr = q:'?'? '(' e:ExprBlock ')' {
    return q + '(' + e + ')'
}

// This is a pickle - must ideally allow any
// expression that can be eval'ed
ExprBlock = s:StringLiteral {
    return s.substr(1, s.length - 2);
}

Identifier = c:([a-zA-Z$:][a-zA-Z_0-9:]*)  {
    var ret = c[0];
    for(i = 1; i < c.length; i++) {
        ret = ret + c[i].join('');
    }
    return ret;
}

Descendent = s:Selector i:Identifier {
    return s + i;
}

Selector = d:('..' / '.')

PositiveNumber = d:[0-9]+ {
  return parseInt(d.join(''));
}

StringLiteral = parts:(('"' DoubleString '"') / ("'" SingleString "'")) {
    return '"' + parts[1] + '"';
}

// Quotation mark is not allowed
DoubleString = c:dchar* {
    return c.join('');
}

// Apostrophe is not allowed
SingleString = c:achar* {
    return c.join('');
}

// In the original JSON grammar: "any-Unicode-character-except-"-or-\-or-control-character"
dchar = [^"\\\0-\x1F\x7f]
    / '\\"'  { return '"';  }
    / "\\\\" { return "\\"; }
    / "\\/"  { return "/";  }
    / "\\b"  { return "\b"; }
    / "\\f"  { return "\f"; }
    / "\\n"  { return "\n"; }
    / "\\r"  { return "\r"; }
    / "\\t"  { return "\t"; }
    / "\\u" h1:hexDigit h2:hexDigit h3:hexDigit h4:hexDigit {
    return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
}

achar = [^'\\\0-\x1F\x7f]
    / "\\'"  { return "\'";  }
    / "\\\\" { return "\\"; }
    / "\\/"  { return "/";  }
    / "\\b"  { return "\b"; }
    / "\\f"  { return "\f"; }
    / "\\n"  { return "\n"; }
    / "\\r"  { return "\r"; }
    / "\\t"  { return "\t"; }
    / "\\u" h1:hexDigit h2:hexDigit h3:hexDigit h4:hexDigit {
    return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
}

hexDigit
  = [0-9a-fA-F]