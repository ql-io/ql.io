module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "URITemplate": parse_URITemplate,
        "literal": parse_literal,
        "expression": parse_expression,
        "operator": parse_operator,
        "required": parse_required,
        "blockMerge": parse_blockMerge,
        "dontencode": parse_dontencode,
        "multivalued": parse_multivalued,
        "variable": parse_variable,
        "digits": parse_digits
      };

      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "URITemplate";
      }

      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;

        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }

        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }

        rightmostFailuresExpected.push(failure);
      }

      function parse_URITemplate() {
        var cacheKey = "URITemplate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0, result1;
        var pos0;

        pos0 = pos;
        result0 = [];
        result1 = parse_literal();
        if (result1 === null) {
          result1 = parse_expression();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_literal();
          if (result1 === null) {
            result1 = parse_expression();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {
            var o = [], i, current = 0;
            o.push(c[0]);
            for(i = 1; i < c.length; i++) {
                if(c[i].constructor === String && o[current].constructor === String) {
                    o[current] = o[current] + c[i];
                }
                else {
                    o.push(c[i]);
                    current++;
                }
            }
            function select(path, obj) {
                var splits = !path ? [] : path.split('.');
                var curr = obj;
                for(var i = 0; i < splits.length; i++) {
                    if(curr[splits[i]]) {
                        curr = curr[splits[i]];
                        if(i < splits.length - 1 && curr.constructor === Array && curr.length > 0) {
                            curr = curr[0];
                        }
                    }
                    else {
                        return null;
                    }
                }
                return curr;
            }
            function _append(str, val, encode) {
                var j;
                if(str.constructor === Array) {
                    for(j = 0; j < str.length; j++) {
                        str[j] = str[j] + (encode ? encodeURIComponent(val) : val);
                    }
                }
                else {
                    str = str + (encode ? encodeURIComponent(val) : val);
                }
                return str;
            }
            function _format(str, values, defaults, stream) {
                values = values || {};
                defaults = defaults || {};
                var i, j, val, split = false, arr, subset, key;
                stream = stream || o;
                var ele;
                for(i = 0; i < stream.length; i++) {
                    ele = stream[i];
                    if(ele.constructor === String) {
                        str = _append(str, ele, false);
                    }
                    else {
                        if(ele.variable.constructor == Array) {
                            // Case of nested token - only single valued for now
                            key = _format('', values, defaults, ele.variable);
                            val = select(key, values) || select(key, defaults);
                            str = str + val;
                        }
                        else {
                            val = select(ele.variable, values) || select(ele.variable, defaults);
                            if(val) {
                                var encode = !ele.dontencode;
                                if(val.constructor == Array) {
                                    // But is the token multivalued?
                                    if(val.length === 0 && ele.required) {
                                        throw {
                                            error: 'Token ' + ele.variable + ' not specified. Processed ' + str
                                        }
                                    }
                                    else if(val.length === 1) {
                                        if(!val[0] && ele.required) {
                                            throw {
                                                error: 'Token ' + ele.variable + ' not specified. Processed ' + str
                                            }
                                        }
                                        str = _append(str, val, encode);
                                    }
                                    else if(ele.multivalued) {
                                        if(ele.max) {
                                            if(val.length <= ele.max) {
                                                // Append as usual
                                                str = _append(str, val, encode);
                                            }
                                            else {
                                                // Split the values into multiple and append each
                                                if(split) {
                                                    throw {
                                                        error: 'Template can not have multiple single-valued params with multiple values'
                                                    }
                                                }
                                                else {
                                                    split = true;
                                                    // Split and continue.
                                                    arr = [];
                                                    subset = [];
                                                    var start = 0, end = ele.max;

                                                    // Remove duplicates
                                                    val = val.sort();
                                                    val = val.filter(function(v,i,o) {
                                                        return (i === 0) ||
                                                            v !== o[i-1];
                                                    });

                                                    for(j = 0; j < val.length/ele.max; j++) {
                                                        subset = val.slice(start, end);
                                                        arr.push(_append(str, subset, encode));
                                                        start += ele.max;
                                                        end += ele.max;
                                                    }
                                                    str = arr;
                                                }
                                            }
                                        }
                                        else {
                                            str = _append(str, val, encode);
                                        }
                                    }
                                    else {
                                        // Split if not already split. If already split, error
                                        if(split) {
                                            throw {
                                                error: 'Template can not have multiple single-valued params with multiple values'
                                            }
                                        }
                                        else {
                                            split = true;
                                            // Split and continue.
                                            arr = [];
                                            for(j = 0; j < val.length; j++) {
                                                arr.push(_append(str, val[j], encode));
                                            }
                                            str = arr;
                                        }
                                    }
                                }
                                else {
                                    str = _append(str, val, encode);
                                }
                            }
                            else if(ele.required) {
                                throw {
                                    error: 'Token ' + ele.variable + ' not specified. Processed ' + str
                                }
                            }
                        }
                    }
                }
                return str;
            }
            return {
                format: function(values, defaults) {
                    return _format('', values, defaults);
                },
                merge: function() {
                    for(i = 0; i < o.length; i++) {
                        if(o[i].merge) {
                            return o[i].merge;
                        }
                    }
                    return 'field';
                },
                stream: o
            }
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_literal() {
        var cacheKey = "literal@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0;

        if (/^[^^ "'<>`{|}]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[^^ \"'<>`{|}]");
          }
        }
        if (result0 === null) {
          result0 = parse_expression();
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_expression() {
        var cacheKey = "expression@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0, result1, result2, result3;
        var pos0, pos1;

        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_operator();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_operator();
          }
          if (result1 !== null) {
            result2 = parse_variable();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 125) {
                result3 = "}";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, op, v) {
            var token = {
                variable: v
            };
            for(var i = 0; i < op.length; i++) {
                for(p in op[i]) {
                    if(op[i].hasOwnProperty(p)) {
                        token[p] = op[i][p];
                    }
                }
            }
            return token;
        })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_operator() {
        var cacheKey = "operator@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0;

        result0 = parse_required();
        if (result0 === null) {
          result0 = parse_blockMerge();
          if (result0 === null) {
            result0 = parse_multivalued();
            if (result0 === null) {
              result0 = parse_dontencode();
            }
          }
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_required() {
        var cacheKey = "required@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0;
        var pos0;

        pos0 = pos;
        if (input.charCodeAt(pos) === 94) {
          result0 = "^";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"^\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            return {
                required: true
            }
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_blockMerge() {
        var cacheKey = "blockMerge@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0;
        var pos0;

        pos0 = pos;
        if (input.charCodeAt(pos) === 35) {
          result0 = "#";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            return {
                merge: 'block'
            }
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_dontencode() {
        var cacheKey = "dontencode@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0;
        var pos0;

        pos0 = pos;
        if (input.charCodeAt(pos) === 96) {
          result0 = "`";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            return {
                dontencode: true
            }
        })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_multivalued() {
        var cacheKey = "multivalued@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0, result1;
        var pos0, pos1;

        pos0 = pos;
        pos1 = pos;
        result0 = parse_digits();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 124) {
            result1 = "|";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"|\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, d) {
            var ret = {
                multivalued: true
            }
            d = parseInt(d);
            if(d > 0) {
                ret.max = d;
            }
            return ret;
        })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_variable() {
        var cacheKey = "variable@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0, result1;
        var pos0;

        pos0 = pos;
        result0 = [];
        result1 = parse_literal();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_literal();
        }
        if (result0 !== null) {
          result0 = (function(offset, l) {
            var o = [];
            o.push(l[0]);
            var current = 0;
            for(var i = 1; i < l.length; i++) {
                if(typeof l[i] === 'string' && typeof o[current] === 'string') {
                    o[current] = o[current] + l[i];
                }
                else {
                    o.push(l[i]);
                    current++;
                }
            }
            return (o.length === 1) ? o[0] : o;
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_digits() {
        var cacheKey = "digits@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var result0, result1;
        var pos0;

        pos0 = pos;
        result0 = [];
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, d) {
            var str = '';
            for(var i = 0; i < d.length; i++) {
                str += d[i];
            }
            return str;
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }


      function cleanupExpected(expected) {
        expected.sort();

        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }


      var result = parseFunctions[startRule]();

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();

        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;

      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundHumanized = found ? quote(found) : "end of input";

      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }

    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();