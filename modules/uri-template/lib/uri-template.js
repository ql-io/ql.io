module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "URITemplate": parse_URITemplate,
        "blockMerge": parse_blockMerge,
        "digits": parse_digits,
        "expression": parse_expression,
        "literal": parse_literal,
        "multivalued": parse_multivalued,
        "operator": parse_operator,
        "required": parse_required,
        "variable": parse_variable
      };

      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "URITemplate";
      }

      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);

        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        rightmostMatchFailuresExpected.push(failure);
      }

      function parse_URITemplate() {
        var cacheKey = 'URITemplate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        var result5 = parse_literal();
        if (result5 !== null) {
          var result3 = result5;
        } else {
          var result4 = parse_expression();
          if (result4 !== null) {
            var result3 = result4;
          } else {
            var result3 = null;;
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          var result5 = parse_literal();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result4 = parse_expression();
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
        }
        var result2 = result1 !== null
          ? (function(c) {
              var o = [], i, current = 0;
              o.push(c[0]);
              for(i = 1; i < c.length; i++) {
                  if(c[i].constructor === String && o[current].constructor === String) {
                      o[current] = o[current] + c[i];
                  }
                  else {
                      o.push(c[i]);
                      current++;
                  }
              }
              function select(path, obj) {
                  var splits = !path ? [] : path.split('.');
                  var curr = obj;
                  for(var i = 0; i < splits.length; i++) {
                      if(curr[splits[i]]) {
                          curr = curr[splits[i]];
                          if(i < splits.length - 1 && curr.constructor === Array && curr.length > 0) {
                              curr = curr[0];
                          }
                      }
                      else {
                          return null;
                      }
                  }
                  return curr;
              }
              function _append(str, val, encode) {
                  var j;
                  if(str.constructor === Array) {
                      for(j = 0; j < str.length; j++) {
                          str[j] = str[j] + (encode ? encodeURIComponent(val) : val);
                      }
                  }
                  else {
                      str = str + (encode ? encodeURIComponent(val) : val);
                  }
                  return str;
              }
              function _format(str, values, defaults, stream) {
                  values = values || {};
                  defaults = defaults || {};
                  var i, j, val, split = false, arr, subset, key;
                  stream = stream || o;
                  var ele;
                  for(i = 0; i < stream.length; i++) {
                      ele = stream[i];
                      if(ele.constructor === String) {
                          str = _append(str, ele, false);
                      }
                      else {
                          if(ele.variable.constructor == Array) {
                              // Case of nested token - only single valued for now
                              key = _format('', values, defaults, ele.variable);
                              val = select(key, values) || select(key, defaults);
                              str = str + val;
                          }
                          else {
                              val = select(ele.variable, values) || select(ele.variable, defaults);
                              if(val) {
                                  if(val.constructor == Array) {
                                      // But is the token multivalued?
                                      if(val.length === 1) {
                                          str = _append(str, val, true);
                                      }
                                      else if(ele.multivalued) {
                                          if(ele.max) {
                                              if(val.length <= ele.max) {
                                                  // Append as usual
                                                  str = _append(str, val, true);
                                              }
                                              else {
                                                  // Split the values into multiple and append each
                                                  if(split) {
                                                      throw {
                                                          error: 'Template can not have multiple single-valued params with multiple values'
                                                      }
                                                  }
                                                  else {
                                                      split = true;
                                                      // Split and continue.
                                                      arr = [];
                                                      subset = [];
                                                      var start = 0, end = ele.max;
                                                      for(j = 0; j < val.length/ele.max; j++) {
                                                          subset = val.slice(start, end);
                                                          arr.push(_append(str, subset, true));
                                                          start += ele.max;
                                                          end += ele.max;
                                                      }
                                                      str = arr;
                                                  }
                                              }
                                          }
                                          else {
                                              str = _append(str, val, true);
                                          }
                                      }
                                      else {
                                          // Split if not already split. If already split, error
                                          if(split) {
                                              throw {
                                                  error: 'Template can not have multiple single-valued params with multiple values'
                                              }
                                          }
                                          else {
                                              split = true;
                                              // Split and continue.
                                              arr = [];
                                              for(j = 0; j < val.length; j++) {
                                                  arr.push(_append(str, val[j], true));
                                              }
                                              str = arr;
                                          }
                                      }
                                  }
                                  else {
                                      str = _append(str, val, false);
                                  }
                              }
                              else if(ele.required) {
                                  throw {
                                      error: 'Token ' + ele.variable + ' not specified. Processed ' + str
                                  }
                              }
                          }
                      }
                  }
                  return str;
              }
              return {
                  format: function(values, defaults) {
                      return _format('', values, defaults);
                  },
                  merge: function() {
                      for(i = 0; i < o.length; i++) {
                          if(o[i].merge) {
                              return o[i].merge;
                          }
                      }
                      return 'field';
                  },
                  stream: o
              }
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_literal() {
        var cacheKey = 'literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[^^ "'<>`{|}]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[^^ \"'<>`{|}]");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result7 = parse_operator();
          while (result7 !== null) {
            result4.push(result7);
            var result7 = parse_operator();
          }
          if (result4 !== null) {
            var result5 = parse_variable();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "}") {
                var result6 = "}";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, v) {
              var token = {
                  variable: v
              };
              for(var i = 0; i < op.length; i++) {
                  for(p in op[i]) {
                      if(op[i].hasOwnProperty(p)) {
                          token[p] = op[i][p];
                      }
                  }
              }
              return token;
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_operator() {
        var cacheKey = 'operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result3 = parse_required();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_blockMerge();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_multivalued();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_required() {
        var cacheKey = 'required@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "^") {
          var result1 = "^";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return {
                  required: true
              }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_blockMerge() {
        var cacheKey = 'blockMerge@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result1 = "#";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"#\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return {
                  merge: 'block'
              }
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_multivalued() {
        var cacheKey = 'multivalued@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_digits();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 1) === "|") {
            var result4 = "|";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
              var ret = {
                  multivalued: true
              }
              d = parseInt(d);
              if(d > 0) {
                  ret.max = d;
              }
              return ret;
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_variable() {
        var cacheKey = 'variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        var result3 = parse_literal();
        while (result3 !== null) {
          result1.push(result3);
          var result3 = parse_literal();
        }
        var result2 = result1 !== null
          ? (function(l) {
              var o = [];
              o.push(l[0]);
              var current = 0;
              for(var i = 1; i < l.length; i++) {
                  if(typeof l[i] === 'string' && typeof o[current] === 'string') {
                      o[current] = o[current] + l[i];
                  }
                  else {
                      o.push(l[i]);
                      current++;
                  }
              }
              return (o.length === 1) ? o[0] : o;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_digits() {
        var cacheKey = 'digits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
        }
        var result2 = result1 !== null
          ? (function(d) {
              var str = '';
              for(var i = 0; i < d.length; i++) {
                  str += d[i];
              }
              return str;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();

          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }

          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



      var result = parseFunctions[startRule]();

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();